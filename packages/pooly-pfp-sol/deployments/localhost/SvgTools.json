{
  "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_colors",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_id",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_customAttributes",
          "type": "bytes"
        }
      ],
      "name": "autoLinearGradient",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_coordinates",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_colors",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_id",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_customAttributes",
          "type": "bytes"
        }
      ],
      "name": "autoLinearGradient",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "colors",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_colorName",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "_alpha",
          "type": "uint8"
        }
      ],
      "name": "getColor",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_colorName",
          "type": "string"
        }
      ],
      "name": "getColor",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_prec",
          "type": "uint8"
        }
      ],
      "name": "round2Txt",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_size",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_svgAttrs",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_rectAttrs",
          "type": "bytes"
        }
      ],
      "name": "startSvgRect",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x49fb27cd975e4922b4ad47d1f1ec708a2a4d74b51acb42716c174ee1e735ad41",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
    "transactionIndex": 0,
    "gasUsed": "1515665",
    "logsBloom": "0x
    "blockHash": "0x7e3f47e92e7443ecf1c25fe54a50b3bebfc1e9cf668b96525793aac266856704",
    "transactionHash": "0x49fb27cd975e4922b4ad47d1f1ec708a2a4d74b51acb42716c174ee1e735ad41",
    "logs": [],
    "blockNumber": 6,
    "cumulativeGasUsed": "1515665",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1d5a56a1078f935190c56fe6e8e932bb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_colors\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_id\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_customAttributes\",\"type\":\"bytes\"}],\"name\":\"autoLinearGradient\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_coordinates\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_colors\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_id\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_customAttributes\",\"type\":\"bytes\"}],\"name\":\"autoLinearGradient\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"colors\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_colorName\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_alpha\",\"type\":\"uint8\"}],\"name\":\"getColor\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_colorName\",\"type\":\"string\"}],\"name\":\"getColor\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_prec\",\"type\":\"uint8\"}],\"name\":\"round2Txt\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_size\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_svgAttrs\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_rectAttrs\",\"type\":\"bytes\"}],\"name\":\"startSvgRect\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@pooly-cards/svg-lib-sol/contracts/libraries/SvgTools.sol\":\"SvgTools\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@pooly-cards/svg-lib-sol/contracts/libraries/SvgCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n\\n// General format for shapes:\\n// [0] : options splitted in bits extracted with & mask (so can be cumulative).\\n//       Following the principle of least surprise.\\n//       if i & 1 == 0   : ending tag '/>', else just '>' (you must close the tag)\\n//       if i & 2 == 0   : uses svgPrefix (i`svgPrefix_`0, ..)\\n//                         Otherwise no class nor id prefix (i0, c0) \\n//\\n\\n// svgStyle is a structure used by style() that returns a '<style ... >' block\\n// svgStyle.conf:\\n// if bit 8 is set, fill is a css selector. Else, default: rgba on 4 bytes\\n// if bit 7 is set, stroke is a css selector. Else, default rgba on 4 bytes\\n// In other words:\\n//     if i & 1 == 1: [1] is a text containing a css selector \\n//       and produces 'fill:url(#id)' where #id is #i`conf.prefix`_n\\n//       else: \\n//         [1], [2], [3], [4] : fill:RGBA\\n//     if i & 2 == 2: stroke contain a css selector at [2] or [5] depending \\n//       on the option i & 1 above\\nstruct svgStyle {\\n    uint8 conf; \\n    uint8 stroke_width;\\n    bytes element; // target element to apply the style\\n    bytes fill;    // rgba or plain id string\\n    bytes stroke;  // rgba or plain id string\\n}\\n\\n\\n// AnimTransfType is used by animateTransform\\nenum AnimTransfType { translate, scale, rotate, skewX, skewY }\\n\\nlibrary SvgCore {\\n\\n    using Strings for uint256;\\n    using Strings for uint8;\\n\\n    // Open <svg> tag\\n    // _vBSize defines the viewBox in 4 bytes\\n    //   [0] x\\n    //   [1] y\\n    //   [2] length\\n    //   [3] width\\n    // accepts custom attributes in _customAttributes\\n    function startSvg(\\n        bytes memory _vBSize,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<svg ',\\n            'viewBox=\\\"',\\n            stringifyIntSet(_vBSize, 0, 4),\\n            '\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" ',\\n            _customAttributes,\\n            '>'\\n        );\\n    }\\n\\n    // Close </svg> tag\\n    function endSvg(\\n    ) public pure returns (bytes memory) {\\n        return('</svg>');\\n    }\\n\\n    // <g _customAttributes></g> tag encloses _b\\n    function defs(\\n        bytes memory _b,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<g ',\\n            _customAttributes,\\n            '>',\\n            _b,\\n            '</g>'\\n        );\\n    }\\n    // <defs></defs> tag encloses _b\\n    function defs(\\n        bytes memory _b\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<defs>',\\n            _b,\\n            '</defs>'\\n        );\\n    }\\n    // returns a <symbol id=...>_content</symbol>\\n    function symbol(\\n        bytes memory _id,\\n        bytes memory _content\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<symbol id=\\\"',\\n            _id,\\n            '\\\">',\\n            _content,\\n            '</symbol>'\\n        );\\n    }\\n\\n    // <mask id=\\\"_id\\\">_b<mask> tag encloses _b\\n    // accepts custom attributes in _customAttributes\\n    function mask(\\n        bytes memory _b,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<mask ',\\n            _customAttributes,\\n            '>',\\n            _b,\\n            '</mask>'\\n        );\\n    }\\n\\n    // Takes 4 bytes starting from the given offset\\n    // Returns css' 'rgba(r,v,b,a%)'\\n    // so alpha should be between 0 and 100\\n    function toRgba(\\n        bytes memory _rgba,\\n        uint256 offset\\n    ) public pure returns (bytes memory){\\n\\n        return abi.encodePacked(\\n            \\\"rgba(\\\",\\n            byte2uint8(_rgba, offset).toString(), \\\",\\\",\\n            byte2uint8(_rgba, offset + 1).toString(), \\\",\\\",\\n            byte2uint8(_rgba, offset + 2).toString(), \\\",\\\",\\n            byte2uint8(_rgba, offset + 3).toString(),\\n            \\\"%)\\\"\\n        );\\n    }\\n\\n    // defines a style for '_element' class or id string (eg. '#iprefix_1') \\n    // colors are defined in 4 bytes ; red,green,blue,alpha OR url(#id)\\n    // then if set stroke color (RGBA or #id),\\n    // then if set stroke-width\\n    // see idoc about svgStyle.conf in the struct def.\\n    // note: As \\\"_element\\\" is a free string you can pass \\\"svg\\\" for a default style\\n    function style(\\n        svgStyle memory _style\\n    ) public pure returns (bytes memory) {\\n        return style(_style, '');\\n    }\\n    function style(\\n        svgStyle memory _style,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n            bytes memory attributes; \\n\\n            attributes = abi.encodePacked(\\n                '<style>', \\n                _style.element, '{fill:');\\n            if (_style.conf & 1 == 1) {\\n                attributes = abi.encodePacked(\\n                    attributes,\\n                    'url(',\\n                    _style.fill,\\n                    ');'\\n                );\\n            } else {\\n                if (_style.fill.length == 4) {\\n                    attributes = abi.encodePacked(\\n                        attributes,\\n                        toRgba(_style.fill, 0), ';'\\n                    );\\n                } else {\\n                    attributes = abi.encodePacked(\\n                        attributes,\\n                        'none;'\\n                    );\\n                }\\n            }\\n            if (_style.conf & 2 == 2) {\\n                attributes = abi.encodePacked(\\n                    attributes,\\n                    'stroke:url(',\\n                    _style.stroke,\\n                    ');'\\n                );\\n            } else {\\n                if (_style.stroke.length == 4) {\\n                    attributes = abi.encodePacked(\\n                        attributes,\\n                        'stroke:',\\n                        toRgba(_style.stroke, 0),\\n                        ';'\\n                    );\\n                }\\n            }\\n            attributes = abi.encodePacked(\\n                attributes,\\n                'stroke-width:',\\n                _style.stroke_width.toString(),\\n                ';'\\n            );\\n            return abi.encodePacked(\\n                attributes,\\n                _customAttributes,\\n                '}</style>'\\n            );\\n    }\\n\\n    // Returns a line element.\\n    // _coord:\\n    //   [0] : General format applies\\n    //   [1] : x1 \\n    //   [2] : y1\\n    //   [3] : x2\\n    //   [4] : y2\\n    function line(\\n        bytes memory _coord,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        // add .0001 is a workaround for stroke filling\\n        // doesn'n work on horizontal and vertical lines\\n        return abi.encodePacked(\\n            '<line x1=\\\"',\\n            byte2uint8(_coord, 1).toString(),\\n            '.0001\\\" y1=\\\"',\\n            byte2uint8(_coord, 2).toString(),\\n            '.0001\\\" x2=\\\"',\\n            byte2uint8(_coord, 3).toString(),\\n            '\\\" y2=\\\"',\\n            byte2uint8(_coord, 4).toString(),\\n                '\\\" ',\\n            _customAttributes,\\n            endingtag(_coord)\\n        );\\n    }\\n    // Returns a polyline: Variable length ; \\\"infinite\\\" coordinates\\n    // _coords:\\n    //   [0] : General format applies\\n    //   [1],[2] x,y 1st point\\n    //   [3],[4] x,y 2nd point\\n    //   [5],[6] x,y 3rd point\\n    //   ... , ...\\n    // Define one or more lines depending on the number of parameters\\n    function polyline(\\n        bytes memory _coords,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n\\n        return abi.encodePacked(\\n            '<polyline  points=\\\"', \\n            stringifyIntSet(_coords, 1, _coords.length - 1),\\n            '\\\" ',\\n            _customAttributes,\\n            endingtag(_coords)\\n        );\\n    }\\n\\n    // Returns a rectangle\\n    // _r:\\n    //   [0] : General format applies\\n    //   [1],[2] x,y 1st point\\n    //   [3],[4] width, height\\n    function rect(\\n        bytes memory _r,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n\\n        return abi.encodePacked(\\n            '<rect x=\\\"', \\n            byte2uint8(_r, 1).toString(),\\n            '\\\" y=\\\"',\\n            byte2uint8(_r, 2).toString(),\\n            '\\\" width=\\\"',\\n            byte2uint8(_r, 3).toString(),\\n            '\\\" height=\\\"',\\n            byte2uint8(_r, 4).toString(),\\n            '\\\" ',\\n            _customAttributes,\\n            endingtag(_r)\\n        );\\n    }\\n\\n    // Returns a polygon, with a variable number of points\\n    // _p:\\n    //   [0] : General format applies\\n    //   [1],[2] x,y 1st point\\n    //   [3],[4] x,y 2nd point\\n    //   [5],[6] x,y 3rd point\\n    //   ... , ...\\n    // Define one or more lines depending on the number of parameters\\n    function polygon(\\n        bytes memory _p,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n\\n        return abi.encodePacked(\\n            '<polygon points=\\\"',\\n            stringifyIntSet(_p, 1, _p.length -1),\\n            '\\\" ',\\n            _customAttributes,\\n            endingtag(_p)\\n        );\\n    }\\n\\n    // Returns a circle\\n    // _c:\\n    //   [0] : General format applies\\n    //   [1] : cx \\n    //   [2] : cy Where cx,cy defines the center.\\n    //   [3] : r = radius\\n    function circle(\\n        bytes memory _c,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<circle ', \\n            'cx=\\\"', \\n            byte2uint8(_c, 1).toString(),\\n            '\\\" cy=\\\"',\\n            byte2uint8(_c, 2).toString(),\\n            '\\\" r=\\\"',\\n            byte2uint8(_c, 3).toString(),\\n            '\\\" ',\\n            _customAttributes,\\n            endingtag(_c)\\n        );  \\n    }\\n\\n    // Returns an ellipse\\n    // _e:\\n    //   [0] : General format applies\\n    //   [1] : cx \\n    //   [2] : cy Where cx,cy defines the center.\\n    //   [3] : rx = X radius\\n    //   [4] : ry = Y radius\\n    function ellipse(\\n        bytes memory _e,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<ellipse ',\\n            'cx=\\\"',\\n            byte2uint8(_e, 1).toString(),\\n            '\\\" cy=\\\"',\\n            byte2uint8(_e, 2).toString(),\\n            '\\\" rx=\\\"',\\n            byte2uint8(_e, 3).toString(),\\n            '\\\" ry=\\\"',\\n            byte2uint8(_e, 4).toString(),\\n            '\\\" ',\\n            _customAttributes,\\n            endingtag(_e)\\n        );  \\n    }\\n\\n\\n    // Returns a <use href='#id' ...\\n    // _coord:\\n    //   [0] : General format applies\\n    //   [1],[2] x,y\\n    function use(\\n        bytes memory _coord,\\n        bytes memory _href,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<use ', \\n            'href=\\\"',\\n            _href,\\n            '\\\" x=\\\"',\\n            byte2uint8(_coord, 1).toString(),\\n            '\\\" y=\\\"',\\n            byte2uint8(_coord, 2).toString(),\\n            '\\\" ',\\n            _customAttributes,\\n            endingtag(_coord)\\n        );\\n    }\\n\\n    // Returns a linearGradient\\n    //  _lg:\\n    //   [0] General format applies but adds an option:\\n    //   [0] if i & 128:\\n    //      [3] x1\\n    //      [4] x2\\n    //      [5] y1\\n    //      [6] y2\\n    //      [7..10] RGBA\\n    //      [11] offset %\\n    //      [12..15] RGBA\\n    //      [16] offset %\\n    //      [...]\\n    //   else: RGBA starts at [3]\\n    // Define a linear gradient, better used in a <defs> tag. \\n    // Applied to an object with 'fill:url(#id)'\\n    // Then loops, offset + RGBA = 5 bytes \\n    function linearGradient(\\n        bytes memory _lg,\\n        bytes memory _id,\\n        bytes memory _customAttributes\\n    ) external pure returns (bytes memory) {\\n        bytes memory grdata; \\n        uint8 offset = 1;\\n\\n        if (uint8(_lg[0]) & 128 == 128) {\\n            grdata = abi.encodePacked(\\n                'x1=\\\"',\\n                byte2uint8(_lg, 1).toString(),\\n                '%\\\" x2=\\\"',\\n                byte2uint8(_lg, 2).toString(),\\n                '%\\\" y1=\\\"',\\n                byte2uint8(_lg, 3).toString(),\\n                '%\\\" y2=\\\"',\\n                byte2uint8(_lg, 4).toString(), '%\\\"'\\n            );\\n            offset = 5;\\n        }\\n        grdata = abi.encodePacked(\\n            '<linearGradient id=\\\"',\\n            _id,\\n            '\\\" ',\\n            _customAttributes,\\n            grdata,\\n            '>'\\n        );\\n        for (uint i = offset ; i < _lg.length ; i+=5) {\\n            grdata = abi.encodePacked(\\n                grdata,\\n                '<stop offset=\\\"',\\n                byte2uint8(_lg, i).toString(),\\n                '%\\\" stop-color=\\\"',\\n                toRgba(_lg, i+1),\\n                '\\\" id=\\\"',\\n                _id,\\n                byte2uint8(_lg, i).toString(),\\n                '\\\"/>'\\n            );\\n        }\\n        return abi.encodePacked(grdata, '</linearGradient>');\\n    }\\n\\n    // Returns a <text ...>_text</text> block\\n    // Non standard ; _b only contains coordinates.\\n    function text(\\n        bytes memory _b,\\n        bytes memory _text,\\n        bytes memory _customAttributes\\n    ) external pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<text x=\\\"', \\n            byte2uint8(_b, 0).toString(),\\n            '\\\" y=\\\"',\\n            byte2uint8(_b, 1).toString(),\\n            '\\\" ',\\n            _customAttributes,\\n            '>',\\n            _text,\\n            '</text>'\\n        );\\n\\n    }\\n\\n    // Returns animate\\n    // Non standard function.\\n    // _b contains the 'values' Svg field.\\n    //   [0] : number of byte element per tuple\\n    //   [1:] values\\n    // the tuples are separated by ';'.\\n    // _element refers to the id to apply the animation\\n    // _attr contains the attribute name set to 'attribute'\\n    // _element is the target element to animate\\n    // _attr the attribute to animate\\n    // _duration of the animation is in seconds\\n    // repeatCount's default is 'indefinite'\\n    function animate(\\n        bytes memory _b,\\n        bytes memory _element,\\n        bytes memory _attr,\\n        uint8 _duration,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return animate(_b, _element, _attr, _duration, 0, _customAttributes);\\n    }\\n\\n    function animate(\\n        bytes memory _b,\\n        bytes memory _element,\\n        bytes memory _attr,\\n        uint8 _duration,\\n        uint8 _repeatCount,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<animate href=\\\"',\\n            _element,\\n            '\\\" attributeName=\\\"',\\n            _attr,\\n            '\\\" values=\\\"',\\n            tuples2ValueMatrix(_b),\\n            '\\\" dur=\\\"',\\n            _duration.toString(),\\n            's\\\" repeatCount=\\\"',\\n            repeatCount(_repeatCount),\\n            '\\\" ',\\n            _customAttributes,\\n            '/>'\\n        );\\n    }\\n\\n    // Returns animateTransform\\n    // _b is the same as in animate\\n    // AnimTransfType is an enum: {translate, scale, rotate, skewX, skewY}\\n    function animateTransform(\\n        bytes memory _b,\\n        bytes memory _element,\\n        AnimTransfType _type,\\n        uint8 _duration,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return animateTransform(_b, _element, _type, _duration, 0, _customAttributes);\\n    }\\n\\n    function animateTransform(\\n        bytes memory _b,\\n        bytes memory _element,\\n        AnimTransfType _type,\\n        uint8 _duration,\\n        uint8 _repeatCount,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<animateTransform href=\\\"',\\n            _element,\\n            '\\\" attributeName=\\\"transform\\\" type=\\\"',\\n            animTransfType(_type),\\n            '\\\" dur=\\\"',\\n            _duration.toString(),\\n            's\\\" repeatCount=\\\"',\\n            repeatCount(_repeatCount),\\n            '\\\" values=\\\"',\\n            tuples2ValueMatrix(_b),\\n            '\\\" ',\\n            _customAttributes,\\n            '/>'\\n        );\\n    }\\n\\n    // Returns 'type' for animateTransform \\n    function animTransfType(AnimTransfType _t)\\n    internal pure returns (bytes memory) {\\n        if (_t == AnimTransfType.translate) return \\\"translate\\\";\\n        if (_t == AnimTransfType.scale)     return \\\"scale\\\";\\n        if (_t == AnimTransfType.rotate)    return \\\"rotate\\\";\\n        if (_t == AnimTransfType.skewX)     return \\\"skewX\\\";\\n        if (_t == AnimTransfType.skewY)     return \\\"skewY\\\";\\n    }\\n\\n    // Returns a path\\n    // See github's repo oh how to encode data for path\\n    // A Q and T are not implemented yet\\n    // _b:\\n    //   [0] : General format applies\\n    //   [1:] : encoded data\\n    function path(\\n        bytes memory _b,\\n        bytes memory _customAttributes\\n    ) external pure returns (bytes memory) {\\n\\n        bytes memory pathdata; \\n        pathdata = '<path d=\\\"';\\n\\n        for (uint i = 1 ; i < _b.length ; i++) {\\n            if(uint8(_b[i]) == 77) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'M',\\n                    stringifyIntSet(_b, i+1, 2)\\n                );\\n                i += 2;\\n            } else if (uint8(_b[i]) == 109) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'm',\\n                    stringifyIntSet(_b, i+1, 2)\\n                );\\n                i += 2;\\n            } else if (uint8(_b[i]) == 76) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'L',\\n                    stringifyIntSet(_b, i+1, 2)\\n                );\\n                i += 2;\\n            } else if (uint8(_b[i]) == 108) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'l',\\n                    stringifyIntSet(_b, i+1, 2)\\n                );\\n                i += 2;\\n            } else if (uint8(_b[i]) == 67) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'C',\\n                    stringifyIntSet(_b, i+1, 6)\\n                );\\n                i += 6;\\n            } else if (uint8(_b[i]) == 86) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'V',\\n                    byte2uint8(_b, i+1).toString()\\n                );\\n                i++;\\n            } else if (uint8(_b[i]) == 118) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'v',\\n                    byte2uint8(_b, i+1).toString()\\n                );\\n                i++;\\n            } else if (uint8(_b[i]) == 72) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'H',\\n                    byte2uint8(_b, i+1).toString()\\n                );\\n                i++;\\n            } else if (uint8(_b[i]) == 104) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'h',\\n                    byte2uint8(_b, i+1).toString()\\n                );\\n                i++;\\n            } else if (uint8(_b[i]) == 83) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'S',\\n                    stringifyIntSet(_b, i+1, 4)\\n                );\\n                i += 4;\\n            } else if (uint8(_b[i]) == 115) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 's',\\n                    stringifyIntSet(_b, i+1, 4)\\n                );\\n                i += 4;\\n            } else if (uint8(_b[i]) == 65) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'A',\\n                    stringifyIntSet(_b, i+1, 7)\\n                );\\n                i += 7;\\n            } else if (uint8(_b[i]) == 97) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'a',\\n                    stringifyIntSet(_b, i+1, 7)\\n                );\\n                i += 4;\\n            } else if (uint8(_b[i]) == 90) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'Z'\\n                );\\n            } else if (uint8(_b[i]) == 122) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'z'\\n                );\\n            } else {\\n                pathdata = abi.encodePacked(\\n                    pathdata, '**' , i.toString(), '-', \\n                    uint8(_b[i]).toString()\\n                    );\\n            }\\n        }\\n        return(\\n            abi.encodePacked(\\n                pathdata, '\\\" ',\\n                _customAttributes,\\n                endingtag(_b)\\n            )\\n        );\\n    }\\n// ------ tools -----------\\n\\n    // Returns the ending tag as defined in_b[3] (odd number)\\n    function endingtag(\\n        bytes memory _b\\n    ) pure public returns (string memory) {\\n        if (byte2uint8(_b,0) & 1 == 0) {\\n            return ' />';\\n        }\\n        return '>';\\n    }\\n\\n    // Returns 'n' stringified and spaced uint8\\n    function stringifyIntSet(\\n        bytes memory _data,\\n        uint256 _offset,\\n        uint256 _len\\n    ) public pure returns (bytes memory) { \\n        bytes memory res;\\n        require (_data.length >= _offset + _len, 'Out of range');\\n        for (uint i = _offset ; i < _offset + _len ; i++) {\\n            res = abi.encodePacked(\\n                res,\\n                byte2uint8(_data, i).toString(),\\n                ' '\\n            );\\n        }\\n        return res;\\n    }\\n\\n    // Used by animation*, receives an array whose the first elements indicates\\n    // the number of tuples, and the values data\\n    // returns the values separated by spaces,\\n    // tuples separated by semicolon\\n    function tuples2ValueMatrix(\\n        bytes memory _data\\n    ) public pure returns (bytes memory) { \\n        uint256 _len = byte2uint8(_data, 0);\\n        bytes memory res;\\n\\n        for (uint i = 1 ; i <= _data.length - 1 ; i += _len) {\\n            res = abi.encodePacked(\\n                res,\\n                stringifyIntSet(_data, i, _len),\\n                ';'\\n            );\\n        }\\n        return res;\\n\\n    }\\n\\n    // returns a repeatCount for the animations.\\n    // If uint8 == 0 then indefinite loop\\n    // else a count of loops.\\n    function repeatCount(uint8 _r)\\n    public pure returns (string memory) {\\n        if (_r == 0) {\\n            return 'indefinite';\\n        } else {\\n            return _r.toString();\\n        }\\n    }\\n\\n    // Returns one uint8 in a byte array\\n    function byte2uint8(\\n        bytes memory _data,\\n        uint256 _offset\\n    ) public pure returns (uint8) { \\n        require (_data.length > _offset, 'Out of range');\\n        return uint8(_data[_offset]);\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x94cae161b911c4bc4d173eb3e80b071bec4b3f92a059d3de1a1e9d22fc371d09\",\"license\":\"MIT\"},\"@pooly-cards/svg-lib-sol/contracts/libraries/SvgTools.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport './SvgCore.sol';\\n\\ncontract SvgTools {\\n\\n    using Strings for uint256;\\n\\n    mapping(string => bytes) public colors;\\n\\n    constructor () {\\n        colors['Black'] = hex'000000'; \\n        colors['White'] = hex'FFFFFF'; \\n        colors['SFRed'] = hex'E02020'; \\n        colors['SFGreen'] = hex'10BB34'; \\n        colors['Aave1'] = hex'B6509E';\\n        colors['Aave2'] = hex'2EBAC6';\\n        colors['Navy'] = hex'000080'; \\n        colors['MediumBlue'] = hex'0000CD'; \\n        colors['Green'] = hex'008000'; \\n        colors['DarkGreen'] = hex'006400'; \\n        colors['Maroon'] = hex'800000'; \\n        colors['Red'] = hex'FF0000'; \\n        colors['Lime'] = hex'00FF00'; \\n        colors['DarkGrey'] = hex'A9A9A9'; \\n        colors['Gold'] = hex'FFD700'; \\n        colors['Yellow'] = hex'FFFF00'; \\n        colors['Blue'] = hex'0000FF'; \\n        colors['GhostWhite'] = hex'F8F8FF'; \\n        colors['LightGrey'] = hex'D3D3D3'; \\n        colors['DarkViolet'] = hex'9400D3'; \\n    }\\n\\n    /* -------------------------------------\\n    *  Various helpers\\n       ------------------------------------- */\\n\\n    // starts a <sgv> tag with a rect at the same size.\\n    function startSvgRect(\\n        bytes memory _size,\\n        bytes memory _svgAttrs,\\n        bytes memory _rectAttrs\\n    )\\n    external view returns (bytes memory) {\\n        return abi.encodePacked(\\n            SvgCore.startSvg(_size, _svgAttrs),\\n            SvgCore.rect(\\n                abi.encodePacked(\\n                    hex'00',\\n                    _size),\\n                _rectAttrs)\\n        );\\n    }\\n\\n    function getColor(string memory _colorName)\\n    public view returns (bytes memory) {\\n        require(colors[_colorName].length == 3, \\\"Unknown color\\\");\\n        return abi.encodePacked(colors[_colorName], hex'64');\\n    }\\n\\n    function getColor(string memory _colorName, uint8 _alpha)\\n    public view returns (bytes memory) {\\n        require(colors[_colorName].length == 3, \\\"Unknown color\\\");\\n        return abi.encodePacked(colors[_colorName], _alpha);\\n    }\\n    \\n    // Input: array of colors (without alpha)\\n    // Ouputs a linearGradient\\n    function autoLinearGradient(\\n        bytes memory _colors,\\n        bytes memory _id,\\n        bytes memory _customAttributes\\n    )\\n    public view returns (bytes memory) {\\n        return this.autoLinearGradient('', _colors, _id, _customAttributes);\\n    }\\n    function autoLinearGradient(\\n        bytes memory _coordinates,\\n        bytes memory _colors,\\n        bytes memory _id,\\n        bytes memory _customAttributes\\n    )\\n    external view returns (bytes memory) {\\n        bytes memory _b;\\n        if (_coordinates.length > 3 ) {\\n            _b = abi.encodePacked(\\n                uint8(128),\\n                _coordinates\\n            );\\n        } else {\\n            _b = hex'00';\\n        }\\n        // Count the number of colors passed, each on 4 byte\\n        uint256 colorCount = _colors.length / 4;\\n        uint8 i = 0;\\n        while (i < colorCount) {\\n            _b = abi.encodePacked(\\n                _b,\\n                uint8(i * (100 / (colorCount - 1))) , // grad. stop %\\n                uint8(_colors[i*4]),\\n                uint8(_colors[i*4 + 1]),\\n                uint8(_colors[i*4 + 2]),\\n                uint8(_colors[i*4 + 3])\\n           );\\n           i++;\\n        }\\n        return SvgCore.linearGradient(_b, _id, _customAttributes);\\n    } \\n\\n\\n    // Converts uint value to 'decimal' text\\n    function round2Txt(\\n        uint256 _value,\\n        uint8 _decimals,\\n        uint8 _prec\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            (_value / 10 ** _decimals).toString(), \\n            \\\".\\\",\\n            ( _value / 10 ** (_decimals - _prec) -\\n                _value / 10 ** (_decimals ) * 10 ** _prec\\n            ).toString()\\n        );\\n    }\\n\\n}\\n\",\"keccak256\":\"0x1c2f3cc712aee0230f3f90bf421e05e97773d78f9cd9c8de111f537f93be9b75\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405180604001604052806003815260200160008152506000604051620000449064426c61636b60d81b815260050190565b908152602001604051809103902090805190602001906200006792919062000627565b50604080518082018252600381526001600160e81b031960208201908152825164576869746560d81b8152600060058201529251928390036025019092209051620000b3929062000627565b50604080518082018252600381526207010160ed1b6020820190815282516414d194995960da1b8152600060058201529251928390036025019092209051620000fd929062000627565b506040805180820182526003815262042ecd60ea1b6020820190815282516629a323b932b2b760c91b815260006007820152925192839003602701909220905162000149929062000627565b5060408051808201825260038152625b284f60e91b60208201908152825164416176653160d81b815260006005820152925192839003602501909220905162000193929062000627565b506040805180820182526003815262175d6360e91b6020820190815282516420b0bb329960d91b8152600060058201529251928390036025019092209051620001dd929062000627565b5060408051808201825260038152600160ef1b602082019081528251634e61767960e01b815260006004820152925192839003602401909220905162000224929062000627565b506040805180820182526003815260cd60e81b602082019081528251694d656469756d426c756560b01b81526000600a820152925192839003602a01909220905162000271929062000627565b5060408051808201825260038152600160f71b6020820190815282516423b932b2b760d91b8152600060058201529251928390036025019092209051620002b9929062000627565b5060408051808201825260038152601960f21b602082019081528251682230b935a3b932b2b760b91b815260006009820152925192839003602901909220905162000305929062000627565b5060408051808201825260038152600160ff1b6020820190815282516526b0b937b7b760d11b81526000600682015292519283900360260190922090516200034e929062000627565b506040518060400160405280600381526020017fff0000000000000000000000000000000000000000000000000000000000000081525060006040516200039e906214995960ea1b815260030190565b90815260200160405180910390209080519060200190620003c192919062000627565b506040805180820182526003815260ff60f01b602082019081528251634c696d6560e01b815260006004820152925192839003602401909220905162000408929062000627565b506040805180820182526003815262a9a9a960e81b602082019081528251674461726b4772657960c01b815260006008820152925192839003602801909220905162000455929062000627565b50604080518082018252600381526001602960f01b03196020820190815282516311dbdb1960e21b8152600060048201529251928390036024019092209051620004a0929062000627565b50604080518082018252600381526001600160f01b03196020820190815282516559656c6c6f7760d01b8152600060068201529251928390036026019092209051620004ed929062000627565b506040805180820182526003815260ff60e81b60208201908152825163426c756560e01b815260006004820152925192839003602401909220905162000534929062000627565b506040805180820182526003815262f8f8ff60e81b6020820190815282516947686f7374576869746560b01b81526000600a820152925192839003602a01909220905162000583929062000627565b506040805180820182526003815262d3d3d360e81b602082019081528251684c696768744772657960b81b8152600060098201529251928390036029019092209051620005d1929062000627565b5060408051808201825260038152629400d360e81b6020820190815282516911185c9ad59a5bdb195d60b21b81526000600a820152925192839003602a01909220905162000620929062000627565b5062000709565b8280546200063590620006cd565b90600052602060002090601f016020900481019282620006595760008555620006a4565b82601f106200067457805160ff1916838001178555620006a4565b82800160010185558215620006a4579182015b82811115620006a457825182559160200191906001019062000687565b50620006b2929150620006b6565b5090565b5b80821115620006b25760008155600101620006b7565b600181811c90821680620006e257607f821691505b6020821081036200070357634e487b7160e01b600052602260045260246000fd5b50919050565b6111c580620007196000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063525f36541161005b578063525f3654146100d15780638b62dfda146100e4578063b0187570146100f7578063d6412c271461010a57600080fd5b80630135df001461008257806340c629fe146100ab5780634b698358146100be575b600080fd5b61009561009036600461094f565b61011d565b6040516100a29190610a33565b60405180910390f35b6100956100b9366004610a4d565b610264565b6100956100cc36600461094f565b610309565b6100956100df366004610a98565b610380565b6100956100f2366004610ae6565b610439565b610095610105366004610a4d565b6104bf565b610095610118366004610b22565b61056f565b604051630e49f2cd60e41b815260609073Dc64a140Aa3E981100a9becA4E685f962f0cF6C99063e49f2cd0906101599087908790600401610bcf565b600060405180830381865af4158015610176573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261019e9190810190610bfd565b73Dc64a140Aa3E981100a9becA4E685f962f0cF6C963b0c294d8866040516020016101c99190610c6b565b604051602081830303815290604052856040518363ffffffff1660e01b81526004016101f6929190610bcf565b600060405180830381865af4158015610213573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261023b9190810190610bfd565b60405160200161024c929190610c91565b60405160208183030381529060405290509392505050565b80516020818301810180516000825292820191909301209152805461028890610cc0565b80601f01602080910402602001604051908101604052809291908181526020018280546102b490610cc0565b80156103015780601f106102d657610100808354040283529160200191610301565b820191906000526020600020905b8154815290600101906020018083116102e457829003601f168201915b505050505081565b60405163d6412c2760e01b8152606090309063d6412c279061033390879087908790600401610cfa565b600060405180830381865afa158015610350573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103789190810190610bfd565b949350505050565b60606000836040516103929190610d4b565b908152602001604051809103902080546103ab90610cc0565b90506003146103f15760405162461bcd60e51b815260206004820152600d60248201526c2ab735b737bbb71031b7b637b960991b60448201526064015b60405180910390fd5b6000836040516104019190610d4b565b908152602001604051809103902082604051602001610421929190610e00565b60405160208183030381529060405290505b92915050565b606061045861044984600a610f22565b6104539086610f47565b610789565b6104ae61046684600a610f22565b61047186600a610f22565b61047b9088610f47565b6104859190610f5b565b61048f8587610f7a565b61049a90600a610f22565b6104a49088610f47565b6104539190610f9d565b60405160200161024c929190610fb4565b60606000826040516104d19190610d4b565b908152602001604051809103902080546104ea90610cc0565b905060031461052b5760405162461bcd60e51b815260206004820152600d60248201526c2ab735b737bbb71031b7b637b960991b60448201526064016103e8565b60008260405161053b9190610d4b565b90815260200160405180910390206040516020016105599190610ff0565b6040516020818303038152906040529050919050565b6060806003865111156105a65760808660405160200161059092919061100d565b60405160208183030381529060405290506105bd565b506040805180820190915260018152600060208201525b6000600486516105cd9190610f47565b905060005b818160ff1610156106fd57826105e9600184610f9d565b6105f4906064610f47565b6106019060ff8416610f5b565b8861060d84600461103c565b60ff16815181106106205761062061105d565b016020015160f81c8961063485600461103c565b61063f906001611073565b60ff16815181106106525761065261105d565b016020015160f81c8a61066686600461103c565b610671906002611073565b60ff16815181106106845761068461105d565b016020015160f81c8b61069887600461103c565b6106a3906003611073565b60ff16815181106106b6576106b661105d565b602001015160f81c60f81b60f81c6040516020016106d996959493929190611098565b604051602081830303815290604052925080806106f5906110f2565b9150506105d2565b60405163cf0eca0960e01b815273Dc64a140Aa3E981100a9becA4E685f962f0cF6C99063cf0eca09906107389086908a908a90600401611111565b600060405180830381865af4158015610755573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261077d9190810190610bfd565b98975050505050505050565b6060816000036107b05750506040805180820190915260018152600360fc1b602082015290565b8160005b81156107da57806107c48161114a565b91506107d39050600a83610f47565b91506107b4565b60008167ffffffffffffffff8111156107f5576107f561088a565b6040519080825280601f01601f19166020018201604052801561081f576020820181803683370190505b5090505b841561037857610834600183610f9d565b9150610841600a86611163565b61084c906030611177565b60f81b8183815181106108615761086161105d565b60200101906001600160f81b031916908160001a905350610883600a86610f47565b9450610823565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156108c9576108c961088a565b604052919050565b600067ffffffffffffffff8211156108eb576108eb61088a565b50601f01601f191660200190565b600082601f83011261090a57600080fd5b813561091d610918826108d1565b6108a0565b81815284602083860101111561093257600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561096457600080fd5b833567ffffffffffffffff8082111561097c57600080fd5b610988878388016108f9565b9450602086013591508082111561099e57600080fd5b6109aa878388016108f9565b935060408601359150808211156109c057600080fd5b506109cd868287016108f9565b9150509250925092565b60005b838110156109f25781810151838201526020016109da565b83811115610a01576000848401525b50505050565b60008151808452610a1f8160208601602086016109d7565b601f01601f19169290920160200192915050565b602081526000610a466020830184610a07565b9392505050565b600060208284031215610a5f57600080fd5b813567ffffffffffffffff811115610a7657600080fd5b610378848285016108f9565b803560ff81168114610a9357600080fd5b919050565b60008060408385031215610aab57600080fd5b823567ffffffffffffffff811115610ac257600080fd5b610ace858286016108f9565b925050610add60208401610a82565b90509250929050565b600080600060608486031215610afb57600080fd5b83359250610b0b60208501610a82565b9150610b1960408501610a82565b90509250925092565b60008060008060808587031215610b3857600080fd5b843567ffffffffffffffff80821115610b5057600080fd5b610b5c888389016108f9565b95506020870135915080821115610b7257600080fd5b610b7e888389016108f9565b94506040870135915080821115610b9457600080fd5b610ba0888389016108f9565b93506060870135915080821115610bb657600080fd5b50610bc3878288016108f9565b91505092959194509250565b604081526000610be26040830185610a07565b8281036020840152610bf48185610a07565b95945050505050565b600060208284031215610c0f57600080fd5b815167ffffffffffffffff811115610c2657600080fd5b8201601f81018413610c3757600080fd5b8051610c45610918826108d1565b818152856020838501011115610c5a57600080fd5b610bf48260208301602086016109d7565b6000815260008251610c848160018501602087016109d7565b9190910160010192915050565b60008351610ca38184602088016109d7565b835190830190610cb78183602088016109d7565b01949350505050565b600181811c90821680610cd457607f821691505b602082108103610cf457634e487b7160e01b600052602260045260246000fd5b50919050565b608081526000608082015260a060208201526000610d1b60a0830186610a07565b8281036040840152610d2d8186610a07565b90508281036060840152610d418185610a07565b9695505050505050565b60008251610d5d8184602087016109d7565b9190910192915050565b8054600090600181811c9080831680610d8157607f831692505b60208084108203610da257634e487b7160e01b600052602260045260246000fd5b818015610db65760018114610dc757610df4565b60ff19861689528489019650610df4565b60008881526020902060005b86811015610dec5781548b820152908501908301610dd3565b505084890196505b50505050505092915050565b6000610e0c8285610d67565b60f89390931b6001600160f81b03191683525050600101919050565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115610e79578160001904821115610e5f57610e5f610e28565b80851615610e6c57918102915b93841c9390800290610e43565b509250929050565b600082610e9057506001610433565b81610e9d57506000610433565b8160018114610eb35760028114610ebd57610ed9565b6001915050610433565b60ff841115610ece57610ece610e28565b50506001821b610433565b5060208310610133831016604e8410600b8410161715610efc575081810a610433565b610f068383610e3e565b8060001904821115610f1a57610f1a610e28565b029392505050565b6000610a4660ff841683610e81565b634e487b7160e01b600052601260045260246000fd5b600082610f5657610f56610f31565b500490565b6000816000190483118215151615610f7557610f75610e28565b500290565b600060ff821660ff841680821015610f9457610f94610e28565b90039392505050565b600082821015610faf57610faf610e28565b500390565b60008351610fc68184602088016109d7565b601760f91b9083019081528351610fe48160018401602088016109d7565b01600101949350505050565b6000610ffc8284610d67565b601960fa1b81526001019392505050565b60ff60f81b8360f81b1681526000825161102e8160018501602087016109d7565b919091016001019392505050565b600060ff821660ff84168160ff0481118215151615610f1a57610f1a610e28565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff84168060ff0382111561109057611090610e28565b019392505050565b600087516110aa818460208c016109d7565b60f897881b6001600160f81b03199081169390910192835295871b861660018301525092851b8416600284015290841b8316600383015290921b166004820152600501919050565b600060ff821660ff810361110857611108610e28565b60010192915050565b6060815260006111246060830186610a07565b82810360208401526111368186610a07565b90508281036040840152610d418185610a07565b60006001820161115c5761115c610e28565b5060010190565b60008261117257611172610f31565b500690565b6000821982111561118a5761118a610e28565b50019056fea264697066735822122049743a4b25a8642d02959b78cc450feb2bf80838561ab2ca3332d57bee1a195264736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063525f36541161005b578063525f3654146100d15780638b62dfda146100e4578063b0187570146100f7578063d6412c271461010a57600080fd5b80630135df001461008257806340c629fe146100ab5780634b698358146100be575b600080fd5b61009561009036600461094f565b61011d565b6040516100a29190610a33565b60405180910390f35b6100956100b9366004610a4d565b610264565b6100956100cc36600461094f565b610309565b6100956100df366004610a98565b610380565b6100956100f2366004610ae6565b610439565b610095610105366004610a4d565b6104bf565b610095610118366004610b22565b61056f565b604051630e49f2cd60e41b815260609073__$72447f1b2f145aca09ac0141c77e8da5f9$__9063e49f2cd0906101599087908790600401610bcf565b600060405180830381865af4158015610176573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261019e9190810190610bfd565b73__$72447f1b2f145aca09ac0141c77e8da5f9$__63b0c294d8866040516020016101c99190610c6b565b604051602081830303815290604052856040518363ffffffff1660e01b81526004016101f6929190610bcf565b600060405180830381865af4158015610213573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261023b9190810190610bfd565b60405160200161024c929190610c91565b60405160208183030381529060405290509392505050565b80516020818301810180516000825292820191909301209152805461028890610cc0565b80601f01602080910402602001604051908101604052809291908181526020018280546102b490610cc0565b80156103015780601f106102d657610100808354040283529160200191610301565b820191906000526020600020905b8154815290600101906020018083116102e457829003601f168201915b505050505081565b60405163d6412c2760e01b8152606090309063d6412c279061033390879087908790600401610cfa565b600060405180830381865afa158015610350573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103789190810190610bfd565b949350505050565b60606000836040516103929190610d4b565b908152602001604051809103902080546103ab90610cc0565b90506003146103f15760405162461bcd60e51b815260206004820152600d60248201526c2ab735b737bbb71031b7b637b960991b60448201526064015b60405180910390fd5b6000836040516104019190610d4b565b908152602001604051809103902082604051602001610421929190610e00565b60405160208183030381529060405290505b92915050565b606061045861044984600a610f22565b6104539086610f47565b610789565b6104ae61046684600a610f22565b61047186600a610f22565b61047b9088610f47565b6104859190610f5b565b61048f8587610f7a565b61049a90600a610f22565b6104a49088610f47565b6104539190610f9d565b60405160200161024c929190610fb4565b60606000826040516104d19190610d4b565b908152602001604051809103902080546104ea90610cc0565b905060031461052b5760405162461bcd60e51b815260206004820152600d60248201526c2ab735b737bbb71031b7b637b960991b60448201526064016103e8565b60008260405161053b9190610d4b565b90815260200160405180910390206040516020016105599190610ff0565b6040516020818303038152906040529050919050565b6060806003865111156105a65760808660405160200161059092919061100d565b60405160208183030381529060405290506105bd565b506040805180820190915260018152600060208201525b6000600486516105cd9190610f47565b905060005b818160ff1610156106fd57826105e9600184610f9d565b6105f4906064610f47565b6106019060ff8416610f5b565b8861060d84600461103c565b60ff16815181106106205761062061105d565b016020015160f81c8961063485600461103c565b61063f906001611073565b60ff16815181106106525761065261105d565b016020015160f81c8a61066686600461103c565b610671906002611073565b60ff16815181106106845761068461105d565b016020015160f81c8b61069887600461103c565b6106a3906003611073565b60ff16815181106106b6576106b661105d565b602001015160f81c60f81b60f81c6040516020016106d996959493929190611098565b604051602081830303815290604052925080806106f5906110f2565b9150506105d2565b60405163cf0eca0960e01b815273__$72447f1b2f145aca09ac0141c77e8da5f9$__9063cf0eca09906107389086908a908a90600401611111565b600060405180830381865af4158015610755573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261077d9190810190610bfd565b98975050505050505050565b6060816000036107b05750506040805180820190915260018152600360fc1b602082015290565b8160005b81156107da57806107c48161114a565b91506107d39050600a83610f47565b91506107b4565b60008167ffffffffffffffff8111156107f5576107f561088a565b6040519080825280601f01601f19166020018201604052801561081f576020820181803683370190505b5090505b841561037857610834600183610f9d565b9150610841600a86611163565b61084c906030611177565b60f81b8183815181106108615761086161105d565b60200101906001600160f81b031916908160001a905350610883600a86610f47565b9450610823565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156108c9576108c961088a565b604052919050565b600067ffffffffffffffff8211156108eb576108eb61088a565b50601f01601f191660200190565b600082601f83011261090a57600080fd5b813561091d610918826108d1565b6108a0565b81815284602083860101111561093257600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561096457600080fd5b833567ffffffffffffffff8082111561097c57600080fd5b610988878388016108f9565b9450602086013591508082111561099e57600080fd5b6109aa878388016108f9565b935060408601359150808211156109c057600080fd5b506109cd868287016108f9565b9150509250925092565b60005b838110156109f25781810151838201526020016109da565b83811115610a01576000848401525b50505050565b60008151808452610a1f8160208601602086016109d7565b601f01601f19169290920160200192915050565b602081526000610a466020830184610a07565b9392505050565b600060208284031215610a5f57600080fd5b813567ffffffffffffffff811115610a7657600080fd5b610378848285016108f9565b803560ff81168114610a9357600080fd5b919050565b60008060408385031215610aab57600080fd5b823567ffffffffffffffff811115610ac257600080fd5b610ace858286016108f9565b925050610add60208401610a82565b90509250929050565b600080600060608486031215610afb57600080fd5b83359250610b0b60208501610a82565b9150610b1960408501610a82565b90509250925092565b60008060008060808587031215610b3857600080fd5b843567ffffffffffffffff80821115610b5057600080fd5b610b5c888389016108f9565b95506020870135915080821115610b7257600080fd5b610b7e888389016108f9565b94506040870135915080821115610b9457600080fd5b610ba0888389016108f9565b93506060870135915080821115610bb657600080fd5b50610bc3878288016108f9565b91505092959194509250565b604081526000610be26040830185610a07565b8281036020840152610bf48185610a07565b95945050505050565b600060208284031215610c0f57600080fd5b815167ffffffffffffffff811115610c2657600080fd5b8201601f81018413610c3757600080fd5b8051610c45610918826108d1565b818152856020838501011115610c5a57600080fd5b610bf48260208301602086016109d7565b6000815260008251610c848160018501602087016109d7565b9190910160010192915050565b60008351610ca38184602088016109d7565b835190830190610cb78183602088016109d7565b01949350505050565b600181811c90821680610cd457607f821691505b602082108103610cf457634e487b7160e01b600052602260045260246000fd5b50919050565b608081526000608082015260a060208201526000610d1b60a0830186610a07565b8281036040840152610d2d8186610a07565b90508281036060840152610d418185610a07565b9695505050505050565b60008251610d5d8184602087016109d7565b9190910192915050565b8054600090600181811c9080831680610d8157607f831692505b60208084108203610da257634e487b7160e01b600052602260045260246000fd5b818015610db65760018114610dc757610df4565b60ff19861689528489019650610df4565b60008881526020902060005b86811015610dec5781548b820152908501908301610dd3565b505084890196505b50505050505092915050565b6000610e0c8285610d67565b60f89390931b6001600160f81b03191683525050600101919050565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115610e79578160001904821115610e5f57610e5f610e28565b80851615610e6c57918102915b93841c9390800290610e43565b509250929050565b600082610e9057506001610433565b81610e9d57506000610433565b8160018114610eb35760028114610ebd57610ed9565b6001915050610433565b60ff841115610ece57610ece610e28565b50506001821b610433565b5060208310610133831016604e8410600b8410161715610efc575081810a610433565b610f068383610e3e565b8060001904821115610f1a57610f1a610e28565b029392505050565b6000610a4660ff841683610e81565b634e487b7160e01b600052601260045260246000fd5b600082610f5657610f56610f31565b500490565b6000816000190483118215151615610f7557610f75610e28565b500290565b600060ff821660ff841680821015610f9457610f94610e28565b90039392505050565b600082821015610faf57610faf610e28565b500390565b60008351610fc68184602088016109d7565b601760f91b9083019081528351610fe48160018401602088016109d7565b01600101949350505050565b6000610ffc8284610d67565b601960fa1b81526001019392505050565b60ff60f81b8360f81b1681526000825161102e8160018501602087016109d7565b919091016001019392505050565b600060ff821660ff84168160ff0481118215151615610f1a57610f1a610e28565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff84168060ff0382111561109057611090610e28565b019392505050565b600087516110aa818460208c016109d7565b60f897881b6001600160f81b03199081169390910192835295871b861660018301525092851b8416600284015290841b8316600383015290921b166004820152600501919050565b600060ff821660ff810361110857611108610e28565b60010192915050565b6060815260006111246060830186610a07565b82810360208401526111368186610a07565b90508281036040840152610d418185610a07565b60006001820161115c5761115c610e28565b5060010190565b60008261117257611172610f31565b500690565b6000821982111561118a5761118a610e28565b50019056fea264697066735822122049743a4b25a8642d02959b78cc450feb2bf80838561ab2ca3332d57bee1a195264736f6c634300080d0033",
  "libraries": {
    "SvgCore": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6465,
        "contract": "@pooly-cards/svg-lib-sol/contracts/libraries/SvgTools.sol:SvgTools",
        "label": "colors",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_string_memory_ptr,t_bytes_storage)"
      }
    ],
    "types": {
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_string_memory_ptr,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}