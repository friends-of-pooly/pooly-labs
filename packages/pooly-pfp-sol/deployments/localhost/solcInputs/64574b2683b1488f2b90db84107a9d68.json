{
  "language": "Solidity",
  "sources": {
    "contracts/PoolyPFPRenderer.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.11;\n\nimport \"@pooly-cards/svg-lib-sol/contracts/SVG.sol\";\nimport \"@pooly-cards/svg-lib-sol/contracts/Utils.sol\";\n\ncontract PoolyPFPRenderer {\n  function render(uint256 _tokenId) public pure returns (string memory) {\n    return\n      string.concat(\n        '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"300\" height=\"300\" style=\"background:#541563\">',\n        svg.text(\n          string.concat(\n            svg.prop(\"x\", \"20\"),\n            svg.prop(\"y\", \"40\"),\n            svg.prop(\"font-size\", \"22\"),\n            svg.prop(\"fill\", \"white\")\n          ),\n          string.concat(svg.cdata(\"Pooly PFP #\"), utils.uint2str(_tokenId))\n        ),\n        svg.rect(\n          string.concat(\n            svg.prop(\"fill\", \"purple\"),\n            svg.prop(\"x\", \"20\"),\n            svg.prop(\"y\", \"50\"),\n            svg.prop(\"width\", utils.uint2str(160)),\n            svg.prop(\"height\", utils.uint2str(10))\n          ),\n          utils.NULL\n        ),\n        \"</svg>\"\n      );\n  }\n\n  function example() external pure returns (string memory) {\n    return render(1);\n  }\n\n  function generate(uint256 id) external pure returns (string memory) {\n    return \"test\";\n  }\n}\n"
    },
    "@pooly-cards/svg-lib-sol/contracts/SVG.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.12;\nimport './Utils.sol';\n\n// Core SVG utilitiy library which helps us construct\n// onchain SVG's with a simple, web-like API.\nlibrary svg {\n    /* MAIN ELEMENTS */\n    function g(string memory _props, string memory _children)\n        internal\n        pure\n        returns (string memory)\n    {\n        return el('g', _props, _children);\n    }\n\n    function path(string memory _props, string memory _children)\n        internal\n        pure\n        returns (string memory)\n    {\n        return el('path', _props, _children);\n    }\n\n    function text(string memory _props, string memory _children)\n        internal\n        pure\n        returns (string memory)\n    {\n        return el('text', _props, _children);\n    }\n\n    function line(string memory _props, string memory _children)\n        internal\n        pure\n        returns (string memory)\n    {\n        return el('line', _props, _children);\n    }\n\n    function circle(string memory _props, string memory _children)\n        internal\n        pure\n        returns (string memory)\n    {\n        return el('circle', _props, _children);\n    }\n\n    function circle(string memory _props)\n        internal\n        pure\n        returns (string memory)\n    {\n        return el('circle', _props);\n    }\n\n    function rect(string memory _props, string memory _children)\n        internal\n        pure\n        returns (string memory)\n    {\n        return el('rect', _props, _children);\n    }\n\n    function rect(string memory _props)\n        internal\n        pure\n        returns (string memory)\n    {\n        return el('rect', _props);\n    }\n\n    function filter(string memory _props, string memory _children)\n        internal\n        pure\n        returns (string memory)\n    {\n        return el('filter', _props, _children);\n    }\n\n    function cdata(string memory _content)\n        internal\n        pure\n        returns (string memory)\n    {\n        return string.concat('<![CDATA[', _content, ']]>');\n    }\n\n    /* GRADIENTS */\n    function radialGradient(string memory _props, string memory _children)\n        internal\n        pure\n        returns (string memory)\n    {\n        return el('radialGradient', _props, _children);\n    }\n\n    function linearGradient(string memory _props, string memory _children)\n        internal\n        pure\n        returns (string memory)\n    {\n        return el('linearGradient', _props, _children);\n    }\n\n    function gradientStop(\n        uint256 offset,\n        string memory stopColor,\n        string memory _props\n    ) internal pure returns (string memory) {\n        return\n            el(\n                'stop',\n                string.concat(\n                    prop('stop-color', stopColor),\n                    ' ',\n                    prop('offset', string.concat(utils.uint2str(offset), '%')),\n                    ' ',\n                    _props\n                )\n            );\n    }\n\n    function animateTransform(string memory _props)\n        internal\n        pure\n        returns (string memory)\n    {\n        return el('animateTransform', _props);\n    }\n\n    function image(string memory _href, string memory _props)\n        internal\n        pure\n        returns (string memory)\n    {\n        return\n            el(\n                'image',\n                string.concat(prop('href', _href), ' ', _props)\n            );\n    }\n\n    /* COMMON */\n    // A generic element, can be used to construct any SVG (or HTML) element\n    function el(\n        string memory _tag,\n        string memory _props,\n        string memory _children\n    ) internal pure returns (string memory) {\n        return\n            string.concat(\n                '<',\n                _tag,\n                ' ',\n                _props,\n                '>',\n                _children,\n                '</',\n                _tag,\n                '>'\n            );\n    }\n\n    // A generic element, can be used to construct any SVG (or HTML) element without children\n    function el(\n        string memory _tag,\n        string memory _props\n    ) internal pure returns (string memory) {\n        return\n            string.concat(\n                '<',\n                _tag,\n                ' ',\n                _props,\n                '/>'\n            );\n    }\n\n    // an SVG attribute\n    function prop(string memory _key, string memory _val)\n        internal\n        pure\n        returns (string memory)\n    {\n        return string.concat(_key, '=', '\"', _val, '\" ');\n    }\n}\n"
    },
    "@pooly-cards/svg-lib-sol/contracts/Utils.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.12;\n\n// Core utils used extensively to format CSS and numbers.\nlibrary utils {\n    // used to simulate empty strings\n    string internal constant NULL = '';\n\n    // formats a CSS variable line. includes a semicolon for formatting.\n    function setCssVar(string memory _key, string memory _val)\n        internal\n        pure\n        returns (string memory)\n    {\n        return string.concat('--', _key, ':', _val, ';');\n    }\n\n    // formats getting a css variable\n    function getCssVar(string memory _key)\n        internal\n        pure\n        returns (string memory)\n    {\n        return string.concat('var(--', _key, ')');\n    }\n\n    // formats getting a def URL\n    function getDefURL(string memory _id)\n        internal\n        pure\n        returns (string memory)\n    {\n        return string.concat('url(#', _id, ')');\n    }\n\n    // formats rgba white with a specified opacity / alpha\n    function white_a(uint256 _a) internal pure returns (string memory) {\n        return rgba(255, 255, 255, _a);\n    }\n\n    // formats rgba black with a specified opacity / alpha\n    function black_a(uint256 _a) internal pure returns (string memory) {\n        return rgba(0, 0, 0, _a);\n    }\n\n    // formats generic rgba color in css\n    function rgba(\n        uint256 _r,\n        uint256 _g,\n        uint256 _b,\n        uint256 _a\n    ) internal pure returns (string memory) {\n        string memory formattedA = _a < 100\n            ? string.concat('0.', utils.uint2str(_a))\n            : '1';\n        return\n            string.concat(\n                'rgba(',\n                utils.uint2str(_r),\n                ',',\n                utils.uint2str(_g),\n                ',',\n                utils.uint2str(_b),\n                ',',\n                formattedA,\n                ')'\n            );\n    }\n\n    // checks if two strings are equal\n    function stringsEqual(string memory _a, string memory _b)\n        internal\n        pure\n        returns (bool)\n    {\n        return\n            keccak256(abi.encodePacked(_a)) == keccak256(abi.encodePacked(_b));\n    }\n\n    // returns the length of a string in characters\n    function utfStringLength(string memory _str)\n        internal\n        pure\n        returns (uint256 length)\n    {\n        uint256 i = 0;\n        bytes memory string_rep = bytes(_str);\n\n        while (i < string_rep.length) {\n            if (string_rep[i] >> 7 == 0) i += 1;\n            else if (string_rep[i] >> 5 == bytes1(uint8(0x6))) i += 2;\n            else if (string_rep[i] >> 4 == bytes1(uint8(0xE))) i += 3;\n            else if (string_rep[i] >> 3 == bytes1(uint8(0x1E)))\n                i += 4;\n                //For safety\n            else i += 1;\n\n            length++;\n        }\n    }\n\n    // converts an unsigned integer to a string\n    function uint2str(uint256 _i)\n        internal\n        pure\n        returns (string memory _uintAsString)\n    {\n        if (_i == 0) {\n            return '0';\n        }\n        uint256 j = _i;\n        uint256 len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint256 k = len;\n        while (_i != 0) {\n            k = k - 1;\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\n            bytes1 b1 = bytes1(temp);\n            bstr[k] = b1;\n            _i /= 10;\n        }\n        return string(bstr);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "istanbul",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}