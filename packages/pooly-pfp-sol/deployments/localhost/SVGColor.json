{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_colors",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_id",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_customAttributes",
          "type": "bytes"
        }
      ],
      "name": "autoLinearGradient",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_coordinates",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_colors",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_id",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_customAttributes",
          "type": "bytes"
        }
      ],
      "name": "autoLinearGradient",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        }
      ],
      "name": "byte2uint8",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "colors",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_colorName",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "_alpha",
          "type": "uint8"
        }
      ],
      "name": "getColor",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_colorName",
          "type": "string"
        }
      ],
      "name": "getColor",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_colorName",
          "type": "string"
        }
      ],
      "name": "getRgba",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_lg",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_id",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_customAttributes",
          "type": "bytes"
        }
      ],
      "name": "linearGradient",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_prec",
          "type": "uint8"
        }
      ],
      "name": "round2Txt",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_rgba",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        }
      ],
      "name": "toRgba",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x01eda7c900d518c9e4feb8e411f75691b22ecfff4805bce981bb2ff9bfa53ea0",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1699953",
    "logsBloom": "0x
    "blockHash": "0x11b588b4c60c1c53098d4f44773c68f511e30539fed62f46f8e71f358d43fabb",
    "transactionHash": "0x01eda7c900d518c9e4feb8e411f75691b22ecfff4805bce981bb2ff9bfa53ea0",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1699953",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1d5a56a1078f935190c56fe6e8e932bb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_colors\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_id\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_customAttributes\",\"type\":\"bytes\"}],\"name\":\"autoLinearGradient\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_coordinates\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_colors\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_id\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_customAttributes\",\"type\":\"bytes\"}],\"name\":\"autoLinearGradient\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"}],\"name\":\"byte2uint8\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"colors\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_colorName\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_alpha\",\"type\":\"uint8\"}],\"name\":\"getColor\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_colorName\",\"type\":\"string\"}],\"name\":\"getColor\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_colorName\",\"type\":\"string\"}],\"name\":\"getRgba\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_lg\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_id\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_customAttributes\",\"type\":\"bytes\"}],\"name\":\"linearGradient\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_prec\",\"type\":\"uint8\"}],\"name\":\"round2Txt\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_rgba\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"toRgba\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@pooly-cards/svg-lib-sol/contracts/SVGColor.sol\":\"SVGColor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@pooly-cards/svg-lib-sol/contracts/SVGColor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\n\\ncontract SVGColor {\\n    using Strings for uint256;\\n    using Strings for uint8;\\n\\n    mapping(string => bytes) public colors;\\n\\n    constructor () {\\n        colors[\\\"Black\\\"] = hex'000000'; \\n        colors[\\\"White\\\"] = hex'FFFFFF'; \\n        colors[\\\"SFRed\\\"] = hex'E02020'; \\n        colors[\\\"SFGreen\\\"] = hex'10BB34'; \\n        colors[\\\"Aave1\\\"] = hex'B6509E';\\n        colors[\\\"Aave2\\\"] = hex'2EBAC6';\\n        colors[\\\"Navy\\\"] = hex'000080'; \\n        colors[\\\"MediumBlue\\\"] = hex'0000CD'; \\n        colors[\\\"Green\\\"] = hex'008000'; \\n        colors[\\\"DarkGreen\\\"] = hex'006400'; \\n        colors[\\\"Maroon\\\"] = hex'800000'; \\n        colors[\\\"Red\\\"] = hex'FF0000'; \\n        colors[\\\"Lime\\\"] = hex'00FF00'; \\n        colors[\\\"DarkGrey\\\"] = hex'A9A9A9'; \\n        colors[\\\"Gold\\\"] = hex'FFD700'; \\n        colors[\\\"Yellow\\\"] = hex'FFFF00'; \\n        colors[\\\"Blue\\\"] = hex'0000FF'; \\n        colors[\\\"GhostWhite\\\"] = hex'F8F8FF'; \\n        colors[\\\"LightGrey\\\"] = hex'D3D3D3'; \\n        colors[\\\"DarkViolet\\\"] = hex'9400D3'; \\n    }\\n\\n    /* -------------------------------------\\n    *  Various helpers\\n       ------------------------------------- */\\n    function getColor(string memory _colorName)\\n    public view returns (bytes memory) {\\n        require(colors[_colorName].length == 3, \\\"Unknown color\\\");\\n        return abi.encodePacked(colors[_colorName], hex'64');\\n    }\\n    \\n    function getColor(string memory _colorName, uint8 _alpha)\\n    public view returns (bytes memory) {\\n        require(colors[_colorName].length == 3, \\\"Unknown color\\\");\\n        return abi.encodePacked(colors[_colorName], _alpha);\\n    }\\n    \\n    function getRgba(string memory _colorName)\\n    public view returns (string memory) {\\n        return string(toRgba(getColor(_colorName), 0));\\n    }\\n    \\n    \\n    // Input: array of colors (without alpha)\\n    // Ouputs a linearGradient\\n    function autoLinearGradient(\\n        bytes memory _colors,\\n        bytes memory _id,\\n        bytes memory _customAttributes\\n    )\\n    public view returns (bytes memory) {\\n        return this.autoLinearGradient(\\\"\\\", _colors, _id, _customAttributes);\\n    }\\n    function autoLinearGradient(\\n        bytes memory _coordinates,\\n        bytes memory _colors,\\n        bytes memory _id,\\n        bytes memory _customAttributes\\n    )\\n    external view returns (bytes memory) {\\n        bytes memory _b;\\n        if (_coordinates.length > 3 ) {\\n            _b = abi.encodePacked(\\n                uint8(128),\\n                _coordinates\\n            );\\n        } else {\\n            _b = hex'00';\\n        }\\n        // Count the number of colors passed, each on 4 byte\\n        uint256 colorCount = _colors.length / 4;\\n        uint8 i = 0;\\n        while (i < colorCount) {\\n            _b = abi.encodePacked(\\n                _b,\\n                uint8(i * (100 / (colorCount - 1))) , // grad. stop %\\n                uint8(_colors[i*4]),\\n                uint8(_colors[i*4 + 1]),\\n                uint8(_colors[i*4 + 2]),\\n                uint8(_colors[i*4 + 3])\\n           );\\n           i++;\\n        }\\n        return linearGradient(_b, _id, _customAttributes);\\n    } \\n\\n\\n    // Converts uint value to 'decimal' text\\n    function round2Txt(\\n        uint256 _value,\\n        uint8 _decimals,\\n        uint8 _prec\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            (_value / 10 ** _decimals).toString(), \\n            \\\".\\\",\\n            ( _value / 10 ** (_decimals - _prec) -\\n                _value / 10 ** (_decimals ) * 10 ** _prec\\n            ).toString()\\n        );\\n    }\\n\\n    function linearGradient(\\n        bytes memory _lg,\\n        bytes memory _id,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        bytes memory grdata; \\n        uint8 offset = 1;\\n\\n        if (uint8(_lg[0]) & 128 == 128) {\\n            grdata = abi.encodePacked(\\n                'x1=\\\"',\\n                byte2uint8(_lg, 1).toString(),\\n                '%\\\" x2=\\\"',\\n                byte2uint8(_lg, 2).toString(),\\n                '%\\\" y1=\\\"',\\n                byte2uint8(_lg, 3).toString(),\\n                '%\\\" y2=\\\"',\\n                byte2uint8(_lg, 4).toString(), '%\\\"'\\n            );\\n            offset = 5;\\n        }\\n        grdata = abi.encodePacked(\\n            '<linearGradient id=\\\"',\\n            _id,\\n            '\\\" ',\\n            _customAttributes,\\n            grdata,\\n            \\\">\\\"\\n        );\\n        for (uint i = offset ; i < _lg.length ; i+=5) {\\n            grdata = abi.encodePacked(\\n                grdata,\\n                '<stop offset=\\\"',\\n                byte2uint8(_lg, i).toString(),\\n                '%\\\" stop-color=\\\"',\\n                toRgba(_lg, i+1),\\n                '\\\" id=\\\"',\\n                _id,\\n                byte2uint8(_lg, i).toString(),\\n                '\\\"/>'\\n            );\\n        }\\n        return abi.encodePacked(grdata, '</linearGradient>');\\n    }\\n\\n\\n    function toRgba(\\n        bytes memory _rgba,\\n        uint256 offset\\n    ) public pure returns (bytes memory){\\n\\n        return abi.encodePacked(\\n            \\\"rgba(\\\",\\n            byte2uint8(_rgba, offset).toString(), \\\",\\\",\\n            byte2uint8(_rgba, offset + 1).toString(), \\\",\\\",\\n            byte2uint8(_rgba, offset + 2).toString(), \\\",\\\",\\n            byte2uint8(_rgba, offset + 3).toString(),\\n            \\\"%)\\\"\\n        );\\n    }\\n\\n    function byte2uint8(\\n        bytes memory _data,\\n        uint256 _offset\\n    ) public pure returns (uint8) { \\n        require (_data.length > _offset, 'Out of range');\\n        return uint8(_data[_offset]);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x994f4cedb1629f5601ec4b221593da6145eb2397ac9f35a4a6a22dd58bbb935c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405180604001604052806003815260200160008152506000604051620000449064426c61636b60d81b815260050190565b908152602001604051809103902090805190602001906200006792919062000627565b50604080518082018252600381526001600160e81b031960208201908152825164576869746560d81b8152600060058201529251928390036025019092209051620000b3929062000627565b50604080518082018252600381526207010160ed1b6020820190815282516414d194995960da1b8152600060058201529251928390036025019092209051620000fd929062000627565b506040805180820182526003815262042ecd60ea1b6020820190815282516629a323b932b2b760c91b815260006007820152925192839003602701909220905162000149929062000627565b5060408051808201825260038152625b284f60e91b60208201908152825164416176653160d81b815260006005820152925192839003602501909220905162000193929062000627565b506040805180820182526003815262175d6360e91b6020820190815282516420b0bb329960d91b8152600060058201529251928390036025019092209051620001dd929062000627565b5060408051808201825260038152600160ef1b602082019081528251634e61767960e01b815260006004820152925192839003602401909220905162000224929062000627565b506040805180820182526003815260cd60e81b602082019081528251694d656469756d426c756560b01b81526000600a820152925192839003602a01909220905162000271929062000627565b5060408051808201825260038152600160f71b6020820190815282516423b932b2b760d91b8152600060058201529251928390036025019092209051620002b9929062000627565b5060408051808201825260038152601960f21b602082019081528251682230b935a3b932b2b760b91b815260006009820152925192839003602901909220905162000305929062000627565b5060408051808201825260038152600160ff1b6020820190815282516526b0b937b7b760d11b81526000600682015292519283900360260190922090516200034e929062000627565b506040518060400160405280600381526020017fff0000000000000000000000000000000000000000000000000000000000000081525060006040516200039e906214995960ea1b815260030190565b90815260200160405180910390209080519060200190620003c192919062000627565b506040805180820182526003815260ff60f01b602082019081528251634c696d6560e01b815260006004820152925192839003602401909220905162000408929062000627565b506040805180820182526003815262a9a9a960e81b602082019081528251674461726b4772657960c01b815260006008820152925192839003602801909220905162000455929062000627565b50604080518082018252600381526001602960f01b03196020820190815282516311dbdb1960e21b8152600060048201529251928390036024019092209051620004a0929062000627565b50604080518082018252600381526001600160f01b03196020820190815282516559656c6c6f7760d01b8152600060068201529251928390036026019092209051620004ed929062000627565b506040805180820182526003815260ff60e81b60208201908152825163426c756560e01b815260006004820152925192839003602401909220905162000534929062000627565b506040805180820182526003815262f8f8ff60e81b6020820190815282516947686f7374576869746560b01b81526000600a820152925192839003602a01909220905162000583929062000627565b506040805180820182526003815262d3d3d360e81b602082019081528251684c696768744772657960b81b8152600060098201529251928390036029019092209051620005d1929062000627565b5060408051808201825260038152629400d360e81b6020820190815282516911185c9ad59a5bdb195d60b21b81526000600a820152925192839003602a01909220905162000620929062000627565b5062000709565b8280546200063590620006cd565b90600052602060002090601f016020900481019282620006595760008555620006a4565b82601f106200067457805160ff1916838001178555620006a4565b82800160010185558215620006a4579182015b82811115620006a457825182559160200191906001019062000687565b50620006b2929150620006b6565b5090565b5b80821115620006b25760008155600101620006b7565b600181811c90821680620006e257607f821691505b6020821081036200070357634e487b7160e01b600052602260045260246000fd5b50919050565b61151980620007196000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063b018757011610066578063b01875701461012a578063cde589101461013d578063cf0eca0914610150578063d6412c2714610163578063e5d19e691461017657600080fd5b806340c629fe146100a35780634b698358146100cc5780635119ce4b146100df578063525f3654146101045780638b62dfda14610117575b600080fd5b6100b66100b1366004610a44565b610189565b6040516100c39190610ad5565b60405180910390f35b6100b66100da366004610aef565b61022e565b6100f26100ed366004610b77565b6102a5565b60405160ff90911681526020016100c3565b6100b6610112366004610bd2565b61030e565b6100b6610125366004610c20565b6103c1565b6100b6610138366004610a44565b61045f565b6100b661014b366004610a44565b61050f565b6100b661015e366004610aef565b610524565b6100b6610171366004610c5c565b610681565b6100b6610184366004610b77565b610826565b8051602081830181018051600082529282019190930120915280546101ad90610d09565b80601f01602080910402602001604051908101604052809291908181526020018280546101d990610d09565b80156102265780601f106101fb57610100808354040283529160200191610226565b820191906000526020600020905b81548152906001019060200180831161020957829003601f168201915b505050505081565b60405163d6412c2760e01b8152606090309063d6412c279061025890879087908790600401610d43565b600060405180830381865afa158015610275573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261029d9190810190610d94565b949350505050565b6000818351116102eb5760405162461bcd60e51b815260206004820152600c60248201526b4f7574206f662072616e676560a01b60448201526064015b60405180910390fd5b8282815181106102fd576102fd610e0b565b016020015160f81c90505b92915050565b60606000836040516103209190610e21565b9081526020016040518091039020805461033990610d09565b905060031461037a5760405162461bcd60e51b815260206004820152600d60248201526c2ab735b737bbb71031b7b637b960991b60448201526064016102e2565b60008360405161038a9190610e21565b9081526020016040518091039020826040516020016103aa929190610ed6565b604051602081830303815290604052905092915050565b60606103e06103d184600a610ff8565b6103db908661101d565b61087e565b6104366103ee84600a610ff8565b6103f986600a610ff8565b610403908861101d565b61040d9190611031565b6104178587611050565b61042290600a610ff8565b61042c908861101d565b6103db9190611073565b60405160200161044792919061108a565b60405160208183030381529060405290509392505050565b60606000826040516104719190610e21565b9081526020016040518091039020805461048a90610d09565b90506003146104cb5760405162461bcd60e51b815260206004820152600d60248201526c2ab735b737bbb71031b7b637b960991b60448201526064016102e2565b6000826040516104db9190610e21565b90815260200160405180910390206040516020016104f991906110c6565b6040516020818303038152906040529050919050565b606061030861051d8361045f565b6000610826565b6060806000600190508560008151811061054057610540610e0b565b60209101015160f81c608090811690036105bd5761056a6105628760016102a5565b60ff1661087e565b6105786105628860026102a5565b6105866105628960036102a5565b6105946105628a60046102a5565b6040516020016105a794939291906110e3565b6040516020818303038152906040529150600590505b8484836040516020016105d293929190611197565b60408051601f19818403018152919052915060ff81165b8651811015610655578261060061056289846102a5565b61060f8961018485600161121a565b8861061d6105628c876102a5565b604051602001610631959493929190611232565b60408051601f19818403018152919052925061064e60058261121a565b90506105e9565b508160405160200161066791906112fb565b604051602081830303815290604052925050509392505050565b6060806003865111156106b8576080866040516020016106a2929190611330565b60405160208183030381529060405290506106cf565b506040805180820190915260018152600060208201525b6000600486516106df919061101d565b905060005b818160ff16101561080f57826106fb600184611073565b61070690606461101d565b6107139060ff8416611031565b8861071f84600461135f565b60ff168151811061073257610732610e0b565b016020015160f81c8961074685600461135f565b610751906001611380565b60ff168151811061076457610764610e0b565b016020015160f81c8a61077886600461135f565b610783906002611380565b60ff168151811061079657610796610e0b565b016020015160f81c8b6107aa87600461135f565b6107b5906003611380565b60ff16815181106107c8576107c8610e0b565b602001015160f81c60f81b60f81c6040516020016107eb969594939291906113a5565b60405160208183030381529060405292508080610807906113ff565b9150506106e4565b61081a838787610524565b98975050505050505050565b606061083561056284846102a5565b610847610562856100ed86600161121a565b610859610562866100ed87600261121a565b61086b610562876100ed88600361121a565b6040516020016103aa949392919061141e565b6060816000036108a55750506040805180820190915260018152600360fc1b602082015290565b8160005b81156108cf57806108b9816114b6565b91506108c89050600a8361101d565b91506108a9565b60008167ffffffffffffffff8111156108ea576108ea61097f565b6040519080825280601f01601f191660200182016040528015610914576020820181803683370190505b5090505b841561029d57610929600183611073565b9150610936600a866114cf565b61094190603061121a565b60f81b81838151811061095657610956610e0b565b60200101906001600160f81b031916908160001a905350610978600a8661101d565b9450610918565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156109be576109be61097f565b604052919050565b600067ffffffffffffffff8211156109e0576109e061097f565b50601f01601f191660200190565b600082601f8301126109ff57600080fd5b8135610a12610a0d826109c6565b610995565b818152846020838601011115610a2757600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215610a5657600080fd5b813567ffffffffffffffff811115610a6d57600080fd5b61029d848285016109ee565b60005b83811015610a94578181015183820152602001610a7c565b83811115610aa3576000848401525b50505050565b60008151808452610ac1816020860160208601610a79565b601f01601f19169290920160200192915050565b602081526000610ae86020830184610aa9565b9392505050565b600080600060608486031215610b0457600080fd5b833567ffffffffffffffff80821115610b1c57600080fd5b610b28878388016109ee565b94506020860135915080821115610b3e57600080fd5b610b4a878388016109ee565b93506040860135915080821115610b6057600080fd5b50610b6d868287016109ee565b9150509250925092565b60008060408385031215610b8a57600080fd5b823567ffffffffffffffff811115610ba157600080fd5b610bad858286016109ee565b95602094909401359450505050565b803560ff81168114610bcd57600080fd5b919050565b60008060408385031215610be557600080fd5b823567ffffffffffffffff811115610bfc57600080fd5b610c08858286016109ee565b925050610c1760208401610bbc565b90509250929050565b600080600060608486031215610c3557600080fd5b83359250610c4560208501610bbc565b9150610c5360408501610bbc565b90509250925092565b60008060008060808587031215610c7257600080fd5b843567ffffffffffffffff80821115610c8a57600080fd5b610c96888389016109ee565b95506020870135915080821115610cac57600080fd5b610cb8888389016109ee565b94506040870135915080821115610cce57600080fd5b610cda888389016109ee565b93506060870135915080821115610cf057600080fd5b50610cfd878288016109ee565b91505092959194509250565b600181811c90821680610d1d57607f821691505b602082108103610d3d57634e487b7160e01b600052602260045260246000fd5b50919050565b608081526000608082015260a060208201526000610d6460a0830186610aa9565b8281036040840152610d768186610aa9565b90508281036060840152610d8a8185610aa9565b9695505050505050565b600060208284031215610da657600080fd5b815167ffffffffffffffff811115610dbd57600080fd5b8201601f81018413610dce57600080fd5b8051610ddc610a0d826109c6565b818152856020838501011115610df157600080fd5b610e02826020830160208601610a79565b95945050505050565b634e487b7160e01b600052603260045260246000fd5b60008251610e33818460208701610a79565b9190910192915050565b8054600090600181811c9080831680610e5757607f831692505b60208084108203610e7857634e487b7160e01b600052602260045260246000fd5b818015610e8c5760018114610e9d57610eca565b60ff19861689528489019650610eca565b60008881526020902060005b86811015610ec25781548b820152908501908301610ea9565b505084890196505b50505050505092915050565b6000610ee28285610e3d565b60f89390931b6001600160f81b03191683525050600101919050565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115610f4f578160001904821115610f3557610f35610efe565b80851615610f4257918102915b93841c9390800290610f19565b509250929050565b600082610f6657506001610308565b81610f7357506000610308565b8160018114610f895760028114610f9357610faf565b6001915050610308565b60ff841115610fa457610fa4610efe565b50506001821b610308565b5060208310610133831016604e8410600b8410161715610fd2575081810a610308565b610fdc8383610f14565b8060001904821115610ff057610ff0610efe565b029392505050565b6000610ae860ff841683610f57565b634e487b7160e01b600052601260045260246000fd5b60008261102c5761102c611007565b500490565b600081600019048311821515161561104b5761104b610efe565b500290565b600060ff821660ff84168082101561106a5761106a610efe565b90039392505050565b60008282101561108557611085610efe565b500390565b6000835161109c818460208801610a79565b601760f91b90830190815283516110ba816001840160208801610a79565b01600101949350505050565b60006110d28284610e3d565b601960fa1b81526001019392505050565b633c189e9160e11b81528451600090611103816004850160208a01610a79565b661291103c191e9160c91b600491840191820152855161112a81600b840160208a01610a79565b661291103c989e9160c91b600b92909101918201528451611152816012840160208901610a79565b661291103c991e9160c91b60129290910191820152835161117a816019840160208801610a79565b61129160f11b60199290910191820152601b019695505050505050565b731e3634b732b0b923b930b234b2b73a1034b21e9160611b815283516000906111c7816014850160208901610a79565b61011160f51b60149184019182015284516111e9816016840160208901610a79565b84519101906111ff816016840160208801610a79565b601f60f91b6016929091019182015260170195945050505050565b6000821982111561122d5761122d610efe565b500190565b60008651611244818460208b01610a79565b6d1e39ba37b81037b33339b2ba1e9160911b908301908152865161126f81600e840160208b01610a79565b6e12911039ba37b816b1b7b637b91e9160891b600e9290910191820152855161129f81601d840160208a01610a79565b65111034b21e9160d11b601d929091019182015284516112c6816023840160208901610a79565b84519101906112dc816023840160208801610a79565b6211179f60e91b60239290910191820152602601979650505050505050565b6000825161130d818460208701610a79565b701e17b634b732b0b923b930b234b2b73a1f60791b920191825250601101919050565b60ff60f81b8360f81b16815260008251611351816001850160208701610a79565b919091016001019392505050565b600060ff821660ff84168160ff0481118215151615610ff057610ff0610efe565b600060ff821660ff84168060ff0382111561139d5761139d610efe565b019392505050565b600087516113b7818460208c01610a79565b60f897881b6001600160f81b03199081169390910192835295871b861660018301525092851b8416600284015290841b8316600383015290921b166004820152600501919050565b600060ff821660ff810361141557611415610efe565b60010192915050565b640e4cec4c2560db1b81526000855161143e816005850160208a01610a79565b8083019050600b60fa1b8060058301528651611461816006850160208b01610a79565b60069201918201819052855161147e816007850160208a01610a79565b60079201918201528351611499816008840160208801610a79565b61252960f01b60089290910191820152600a019695505050505050565b6000600182016114c8576114c8610efe565b5060010190565b6000826114de576114de611007565b50069056fea2646970667358221220aba6ed67d1b0e68d47fb08983af863e5674bd0b2dc23d51e569ab12890d6199064736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063b018757011610066578063b01875701461012a578063cde589101461013d578063cf0eca0914610150578063d6412c2714610163578063e5d19e691461017657600080fd5b806340c629fe146100a35780634b698358146100cc5780635119ce4b146100df578063525f3654146101045780638b62dfda14610117575b600080fd5b6100b66100b1366004610a44565b610189565b6040516100c39190610ad5565b60405180910390f35b6100b66100da366004610aef565b61022e565b6100f26100ed366004610b77565b6102a5565b60405160ff90911681526020016100c3565b6100b6610112366004610bd2565b61030e565b6100b6610125366004610c20565b6103c1565b6100b6610138366004610a44565b61045f565b6100b661014b366004610a44565b61050f565b6100b661015e366004610aef565b610524565b6100b6610171366004610c5c565b610681565b6100b6610184366004610b77565b610826565b8051602081830181018051600082529282019190930120915280546101ad90610d09565b80601f01602080910402602001604051908101604052809291908181526020018280546101d990610d09565b80156102265780601f106101fb57610100808354040283529160200191610226565b820191906000526020600020905b81548152906001019060200180831161020957829003601f168201915b505050505081565b60405163d6412c2760e01b8152606090309063d6412c279061025890879087908790600401610d43565b600060405180830381865afa158015610275573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261029d9190810190610d94565b949350505050565b6000818351116102eb5760405162461bcd60e51b815260206004820152600c60248201526b4f7574206f662072616e676560a01b60448201526064015b60405180910390fd5b8282815181106102fd576102fd610e0b565b016020015160f81c90505b92915050565b60606000836040516103209190610e21565b9081526020016040518091039020805461033990610d09565b905060031461037a5760405162461bcd60e51b815260206004820152600d60248201526c2ab735b737bbb71031b7b637b960991b60448201526064016102e2565b60008360405161038a9190610e21565b9081526020016040518091039020826040516020016103aa929190610ed6565b604051602081830303815290604052905092915050565b60606103e06103d184600a610ff8565b6103db908661101d565b61087e565b6104366103ee84600a610ff8565b6103f986600a610ff8565b610403908861101d565b61040d9190611031565b6104178587611050565b61042290600a610ff8565b61042c908861101d565b6103db9190611073565b60405160200161044792919061108a565b60405160208183030381529060405290509392505050565b60606000826040516104719190610e21565b9081526020016040518091039020805461048a90610d09565b90506003146104cb5760405162461bcd60e51b815260206004820152600d60248201526c2ab735b737bbb71031b7b637b960991b60448201526064016102e2565b6000826040516104db9190610e21565b90815260200160405180910390206040516020016104f991906110c6565b6040516020818303038152906040529050919050565b606061030861051d8361045f565b6000610826565b6060806000600190508560008151811061054057610540610e0b565b60209101015160f81c608090811690036105bd5761056a6105628760016102a5565b60ff1661087e565b6105786105628860026102a5565b6105866105628960036102a5565b6105946105628a60046102a5565b6040516020016105a794939291906110e3565b6040516020818303038152906040529150600590505b8484836040516020016105d293929190611197565b60408051601f19818403018152919052915060ff81165b8651811015610655578261060061056289846102a5565b61060f8961018485600161121a565b8861061d6105628c876102a5565b604051602001610631959493929190611232565b60408051601f19818403018152919052925061064e60058261121a565b90506105e9565b508160405160200161066791906112fb565b604051602081830303815290604052925050509392505050565b6060806003865111156106b8576080866040516020016106a2929190611330565b60405160208183030381529060405290506106cf565b506040805180820190915260018152600060208201525b6000600486516106df919061101d565b905060005b818160ff16101561080f57826106fb600184611073565b61070690606461101d565b6107139060ff8416611031565b8861071f84600461135f565b60ff168151811061073257610732610e0b565b016020015160f81c8961074685600461135f565b610751906001611380565b60ff168151811061076457610764610e0b565b016020015160f81c8a61077886600461135f565b610783906002611380565b60ff168151811061079657610796610e0b565b016020015160f81c8b6107aa87600461135f565b6107b5906003611380565b60ff16815181106107c8576107c8610e0b565b602001015160f81c60f81b60f81c6040516020016107eb969594939291906113a5565b60405160208183030381529060405292508080610807906113ff565b9150506106e4565b61081a838787610524565b98975050505050505050565b606061083561056284846102a5565b610847610562856100ed86600161121a565b610859610562866100ed87600261121a565b61086b610562876100ed88600361121a565b6040516020016103aa949392919061141e565b6060816000036108a55750506040805180820190915260018152600360fc1b602082015290565b8160005b81156108cf57806108b9816114b6565b91506108c89050600a8361101d565b91506108a9565b60008167ffffffffffffffff8111156108ea576108ea61097f565b6040519080825280601f01601f191660200182016040528015610914576020820181803683370190505b5090505b841561029d57610929600183611073565b9150610936600a866114cf565b61094190603061121a565b60f81b81838151811061095657610956610e0b565b60200101906001600160f81b031916908160001a905350610978600a8661101d565b9450610918565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156109be576109be61097f565b604052919050565b600067ffffffffffffffff8211156109e0576109e061097f565b50601f01601f191660200190565b600082601f8301126109ff57600080fd5b8135610a12610a0d826109c6565b610995565b818152846020838601011115610a2757600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215610a5657600080fd5b813567ffffffffffffffff811115610a6d57600080fd5b61029d848285016109ee565b60005b83811015610a94578181015183820152602001610a7c565b83811115610aa3576000848401525b50505050565b60008151808452610ac1816020860160208601610a79565b601f01601f19169290920160200192915050565b602081526000610ae86020830184610aa9565b9392505050565b600080600060608486031215610b0457600080fd5b833567ffffffffffffffff80821115610b1c57600080fd5b610b28878388016109ee565b94506020860135915080821115610b3e57600080fd5b610b4a878388016109ee565b93506040860135915080821115610b6057600080fd5b50610b6d868287016109ee565b9150509250925092565b60008060408385031215610b8a57600080fd5b823567ffffffffffffffff811115610ba157600080fd5b610bad858286016109ee565b95602094909401359450505050565b803560ff81168114610bcd57600080fd5b919050565b60008060408385031215610be557600080fd5b823567ffffffffffffffff811115610bfc57600080fd5b610c08858286016109ee565b925050610c1760208401610bbc565b90509250929050565b600080600060608486031215610c3557600080fd5b83359250610c4560208501610bbc565b9150610c5360408501610bbc565b90509250925092565b60008060008060808587031215610c7257600080fd5b843567ffffffffffffffff80821115610c8a57600080fd5b610c96888389016109ee565b95506020870135915080821115610cac57600080fd5b610cb8888389016109ee565b94506040870135915080821115610cce57600080fd5b610cda888389016109ee565b93506060870135915080821115610cf057600080fd5b50610cfd878288016109ee565b91505092959194509250565b600181811c90821680610d1d57607f821691505b602082108103610d3d57634e487b7160e01b600052602260045260246000fd5b50919050565b608081526000608082015260a060208201526000610d6460a0830186610aa9565b8281036040840152610d768186610aa9565b90508281036060840152610d8a8185610aa9565b9695505050505050565b600060208284031215610da657600080fd5b815167ffffffffffffffff811115610dbd57600080fd5b8201601f81018413610dce57600080fd5b8051610ddc610a0d826109c6565b818152856020838501011115610df157600080fd5b610e02826020830160208601610a79565b95945050505050565b634e487b7160e01b600052603260045260246000fd5b60008251610e33818460208701610a79565b9190910192915050565b8054600090600181811c9080831680610e5757607f831692505b60208084108203610e7857634e487b7160e01b600052602260045260246000fd5b818015610e8c5760018114610e9d57610eca565b60ff19861689528489019650610eca565b60008881526020902060005b86811015610ec25781548b820152908501908301610ea9565b505084890196505b50505050505092915050565b6000610ee28285610e3d565b60f89390931b6001600160f81b03191683525050600101919050565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115610f4f578160001904821115610f3557610f35610efe565b80851615610f4257918102915b93841c9390800290610f19565b509250929050565b600082610f6657506001610308565b81610f7357506000610308565b8160018114610f895760028114610f9357610faf565b6001915050610308565b60ff841115610fa457610fa4610efe565b50506001821b610308565b5060208310610133831016604e8410600b8410161715610fd2575081810a610308565b610fdc8383610f14565b8060001904821115610ff057610ff0610efe565b029392505050565b6000610ae860ff841683610f57565b634e487b7160e01b600052601260045260246000fd5b60008261102c5761102c611007565b500490565b600081600019048311821515161561104b5761104b610efe565b500290565b600060ff821660ff84168082101561106a5761106a610efe565b90039392505050565b60008282101561108557611085610efe565b500390565b6000835161109c818460208801610a79565b601760f91b90830190815283516110ba816001840160208801610a79565b01600101949350505050565b60006110d28284610e3d565b601960fa1b81526001019392505050565b633c189e9160e11b81528451600090611103816004850160208a01610a79565b661291103c191e9160c91b600491840191820152855161112a81600b840160208a01610a79565b661291103c989e9160c91b600b92909101918201528451611152816012840160208901610a79565b661291103c991e9160c91b60129290910191820152835161117a816019840160208801610a79565b61129160f11b60199290910191820152601b019695505050505050565b731e3634b732b0b923b930b234b2b73a1034b21e9160611b815283516000906111c7816014850160208901610a79565b61011160f51b60149184019182015284516111e9816016840160208901610a79565b84519101906111ff816016840160208801610a79565b601f60f91b6016929091019182015260170195945050505050565b6000821982111561122d5761122d610efe565b500190565b60008651611244818460208b01610a79565b6d1e39ba37b81037b33339b2ba1e9160911b908301908152865161126f81600e840160208b01610a79565b6e12911039ba37b816b1b7b637b91e9160891b600e9290910191820152855161129f81601d840160208a01610a79565b65111034b21e9160d11b601d929091019182015284516112c6816023840160208901610a79565b84519101906112dc816023840160208801610a79565b6211179f60e91b60239290910191820152602601979650505050505050565b6000825161130d818460208701610a79565b701e17b634b732b0b923b930b234b2b73a1f60791b920191825250601101919050565b60ff60f81b8360f81b16815260008251611351816001850160208701610a79565b919091016001019392505050565b600060ff821660ff84168160ff0481118215151615610ff057610ff0610efe565b600060ff821660ff84168060ff0382111561139d5761139d610efe565b019392505050565b600087516113b7818460208c01610a79565b60f897881b6001600160f81b03199081169390910192835295871b861660018301525092851b8416600284015290841b8316600383015290921b166004820152600501919050565b600060ff821660ff810361141557611415610efe565b60010192915050565b640e4cec4c2560db1b81526000855161143e816005850160208a01610a79565b8083019050600b60fa1b8060058301528651611461816006850160208b01610a79565b60069201918201819052855161147e816007850160208a01610a79565b60079201918201528351611499816008840160208801610a79565b61252960f01b60089290910191820152600a019695505050505050565b6000600182016114c8576114c8610efe565b5060010190565b6000826114de576114de611007565b50069056fea2646970667358221220aba6ed67d1b0e68d47fb08983af863e5674bd0b2dc23d51e569ab12890d6199064736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3694,
        "contract": "@pooly-cards/svg-lib-sol/contracts/SVGColor.sol:SVGColor",
        "label": "colors",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_string_memory_ptr,t_bytes_storage)"
      }
    ],
    "types": {
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_string_memory_ptr,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}