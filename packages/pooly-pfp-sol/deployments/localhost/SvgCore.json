{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_b",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_element",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_attr",
          "type": "bytes"
        },
        {
          "internalType": "uint8",
          "name": "_duration",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_repeatCount",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_customAttributes",
          "type": "bytes"
        }
      ],
      "name": "animate",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_b",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_element",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_attr",
          "type": "bytes"
        },
        {
          "internalType": "uint8",
          "name": "_duration",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_customAttributes",
          "type": "bytes"
        }
      ],
      "name": "animate",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_b",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_element",
          "type": "bytes"
        },
        {
          "internalType": "enum AnimTransfType",
          "name": "_type",
          "type": "AnimTransfType"
        },
        {
          "internalType": "uint8",
          "name": "_duration",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_customAttributes",
          "type": "bytes"
        }
      ],
      "name": "animateTransform",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_b",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_element",
          "type": "bytes"
        },
        {
          "internalType": "enum AnimTransfType",
          "name": "_type",
          "type": "AnimTransfType"
        },
        {
          "internalType": "uint8",
          "name": "_duration",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_repeatCount",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_customAttributes",
          "type": "bytes"
        }
      ],
      "name": "animateTransform",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        }
      ],
      "name": "byte2uint8",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_c",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_customAttributes",
          "type": "bytes"
        }
      ],
      "name": "circle",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_b",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_customAttributes",
          "type": "bytes"
        }
      ],
      "name": "defs",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_b",
          "type": "bytes"
        }
      ],
      "name": "defs",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_e",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_customAttributes",
          "type": "bytes"
        }
      ],
      "name": "ellipse",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endSvg",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_b",
          "type": "bytes"
        }
      ],
      "name": "endingtag",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_coord",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_customAttributes",
          "type": "bytes"
        }
      ],
      "name": "line",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_lg",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_id",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_customAttributes",
          "type": "bytes"
        }
      ],
      "name": "linearGradient",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_b",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_customAttributes",
          "type": "bytes"
        }
      ],
      "name": "mask",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_b",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_customAttributes",
          "type": "bytes"
        }
      ],
      "name": "path",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_p",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_customAttributes",
          "type": "bytes"
        }
      ],
      "name": "polygon",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_coords",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_customAttributes",
          "type": "bytes"
        }
      ],
      "name": "polyline",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_r",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_customAttributes",
          "type": "bytes"
        }
      ],
      "name": "rect",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_r",
          "type": "uint8"
        }
      ],
      "name": "repeatCount",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_vBSize",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_customAttributes",
          "type": "bytes"
        }
      ],
      "name": "startSvg",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_len",
          "type": "uint256"
        }
      ],
      "name": "stringifyIntSet",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "conf",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "stroke_width",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "element",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "fill",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "stroke",
              "type": "bytes"
            }
          ],
          "internalType": "struct svgStyle",
          "name": "_style",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_customAttributes",
          "type": "bytes"
        }
      ],
      "name": "style",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "conf",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "stroke_width",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "element",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "fill",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "stroke",
              "type": "bytes"
            }
          ],
          "internalType": "struct svgStyle",
          "name": "_style",
          "type": "tuple"
        }
      ],
      "name": "style",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_id",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_content",
          "type": "bytes"
        }
      ],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_b",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_text",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_customAttributes",
          "type": "bytes"
        }
      ],
      "name": "text",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_rgba",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        }
      ],
      "name": "toRgba",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "tuples2ValueMatrix",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_coord",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_href",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_customAttributes",
          "type": "bytes"
        }
      ],
      "name": "use",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x75cdbc6c70541a6ddf9502713fee800035dbe952572a8e33350d229d5b83623c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "2656655",
    "logsBloom": "0x
    "blockHash": "0xfa6c096d30810fc2905690fa1d066c3b63929cb95b932974500f95b9b8d7ca9d",
    "transactionHash": "0x75cdbc6c70541a6ddf9502713fee800035dbe952572a8e33350d229d5b83623c",
    "logs": [],
    "blockNumber": 5,
    "cumulativeGasUsed": "2656655",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1d5a56a1078f935190c56fe6e8e932bb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_b\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_element\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_attr\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"_duration\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_repeatCount\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_customAttributes\",\"type\":\"bytes\"}],\"name\":\"animate\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_b\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_element\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_attr\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"_duration\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_customAttributes\",\"type\":\"bytes\"}],\"name\":\"animate\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_b\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_element\",\"type\":\"bytes\"},{\"internalType\":\"enum AnimTransfType\",\"name\":\"_type\",\"type\":\"AnimTransfType\"},{\"internalType\":\"uint8\",\"name\":\"_duration\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_customAttributes\",\"type\":\"bytes\"}],\"name\":\"animateTransform\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_b\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_element\",\"type\":\"bytes\"},{\"internalType\":\"enum AnimTransfType\",\"name\":\"_type\",\"type\":\"AnimTransfType\"},{\"internalType\":\"uint8\",\"name\":\"_duration\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_repeatCount\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_customAttributes\",\"type\":\"bytes\"}],\"name\":\"animateTransform\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"}],\"name\":\"byte2uint8\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_c\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_customAttributes\",\"type\":\"bytes\"}],\"name\":\"circle\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_b\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_customAttributes\",\"type\":\"bytes\"}],\"name\":\"defs\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_b\",\"type\":\"bytes\"}],\"name\":\"defs\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_e\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_customAttributes\",\"type\":\"bytes\"}],\"name\":\"ellipse\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endSvg\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_b\",\"type\":\"bytes\"}],\"name\":\"endingtag\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_coord\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_customAttributes\",\"type\":\"bytes\"}],\"name\":\"line\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_lg\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_id\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_customAttributes\",\"type\":\"bytes\"}],\"name\":\"linearGradient\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_b\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_customAttributes\",\"type\":\"bytes\"}],\"name\":\"mask\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_b\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_customAttributes\",\"type\":\"bytes\"}],\"name\":\"path\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_p\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_customAttributes\",\"type\":\"bytes\"}],\"name\":\"polygon\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_coords\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_customAttributes\",\"type\":\"bytes\"}],\"name\":\"polyline\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_r\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_customAttributes\",\"type\":\"bytes\"}],\"name\":\"rect\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_r\",\"type\":\"uint8\"}],\"name\":\"repeatCount\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_vBSize\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_customAttributes\",\"type\":\"bytes\"}],\"name\":\"startSvg\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_len\",\"type\":\"uint256\"}],\"name\":\"stringifyIntSet\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"conf\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"stroke_width\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"element\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"fill\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"stroke\",\"type\":\"bytes\"}],\"internalType\":\"struct svgStyle\",\"name\":\"_style\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_customAttributes\",\"type\":\"bytes\"}],\"name\":\"style\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"conf\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"stroke_width\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"element\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"fill\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"stroke\",\"type\":\"bytes\"}],\"internalType\":\"struct svgStyle\",\"name\":\"_style\",\"type\":\"tuple\"}],\"name\":\"style\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_id\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_content\",\"type\":\"bytes\"}],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_b\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_text\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_customAttributes\",\"type\":\"bytes\"}],\"name\":\"text\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_rgba\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"toRgba\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tuples2ValueMatrix\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_coord\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_href\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_customAttributes\",\"type\":\"bytes\"}],\"name\":\"use\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@pooly-cards/svg-lib-sol/contracts/libraries/SvgCore.sol\":\"SvgCore\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@pooly-cards/svg-lib-sol/contracts/libraries/SvgCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n\\n// General format for shapes:\\n// [0] : options splitted in bits extracted with & mask (so can be cumulative).\\n//       Following the principle of least surprise.\\n//       if i & 1 == 0   : ending tag '/>', else just '>' (you must close the tag)\\n//       if i & 2 == 0   : uses svgPrefix (i`svgPrefix_`0, ..)\\n//                         Otherwise no class nor id prefix (i0, c0) \\n//\\n\\n// svgStyle is a structure used by style() that returns a '<style ... >' block\\n// svgStyle.conf:\\n// if bit 8 is set, fill is a css selector. Else, default: rgba on 4 bytes\\n// if bit 7 is set, stroke is a css selector. Else, default rgba on 4 bytes\\n// In other words:\\n//     if i & 1 == 1: [1] is a text containing a css selector \\n//       and produces 'fill:url(#id)' where #id is #i`conf.prefix`_n\\n//       else: \\n//         [1], [2], [3], [4] : fill:RGBA\\n//     if i & 2 == 2: stroke contain a css selector at [2] or [5] depending \\n//       on the option i & 1 above\\nstruct svgStyle {\\n    uint8 conf; \\n    uint8 stroke_width;\\n    bytes element; // target element to apply the style\\n    bytes fill;    // rgba or plain id string\\n    bytes stroke;  // rgba or plain id string\\n}\\n\\n\\n// AnimTransfType is used by animateTransform\\nenum AnimTransfType { translate, scale, rotate, skewX, skewY }\\n\\nlibrary SvgCore {\\n\\n    using Strings for uint256;\\n    using Strings for uint8;\\n\\n    // Open <svg> tag\\n    // _vBSize defines the viewBox in 4 bytes\\n    //   [0] x\\n    //   [1] y\\n    //   [2] length\\n    //   [3] width\\n    // accepts custom attributes in _customAttributes\\n    function startSvg(\\n        bytes memory _vBSize,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<svg ',\\n            'viewBox=\\\"',\\n            stringifyIntSet(_vBSize, 0, 4),\\n            '\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" ',\\n            _customAttributes,\\n            '>'\\n        );\\n    }\\n\\n    // Close </svg> tag\\n    function endSvg(\\n    ) public pure returns (bytes memory) {\\n        return('</svg>');\\n    }\\n\\n    // <g _customAttributes></g> tag encloses _b\\n    function defs(\\n        bytes memory _b,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<g ',\\n            _customAttributes,\\n            '>',\\n            _b,\\n            '</g>'\\n        );\\n    }\\n    // <defs></defs> tag encloses _b\\n    function defs(\\n        bytes memory _b\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<defs>',\\n            _b,\\n            '</defs>'\\n        );\\n    }\\n    // returns a <symbol id=...>_content</symbol>\\n    function symbol(\\n        bytes memory _id,\\n        bytes memory _content\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<symbol id=\\\"',\\n            _id,\\n            '\\\">',\\n            _content,\\n            '</symbol>'\\n        );\\n    }\\n\\n    // <mask id=\\\"_id\\\">_b<mask> tag encloses _b\\n    // accepts custom attributes in _customAttributes\\n    function mask(\\n        bytes memory _b,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<mask ',\\n            _customAttributes,\\n            '>',\\n            _b,\\n            '</mask>'\\n        );\\n    }\\n\\n    // Takes 4 bytes starting from the given offset\\n    // Returns css' 'rgba(r,v,b,a%)'\\n    // so alpha should be between 0 and 100\\n    function toRgba(\\n        bytes memory _rgba,\\n        uint256 offset\\n    ) public pure returns (bytes memory){\\n\\n        return abi.encodePacked(\\n            \\\"rgba(\\\",\\n            byte2uint8(_rgba, offset).toString(), \\\",\\\",\\n            byte2uint8(_rgba, offset + 1).toString(), \\\",\\\",\\n            byte2uint8(_rgba, offset + 2).toString(), \\\",\\\",\\n            byte2uint8(_rgba, offset + 3).toString(),\\n            \\\"%)\\\"\\n        );\\n    }\\n\\n    // defines a style for '_element' class or id string (eg. '#iprefix_1') \\n    // colors are defined in 4 bytes ; red,green,blue,alpha OR url(#id)\\n    // then if set stroke color (RGBA or #id),\\n    // then if set stroke-width\\n    // see idoc about svgStyle.conf in the struct def.\\n    // note: As \\\"_element\\\" is a free string you can pass \\\"svg\\\" for a default style\\n    function style(\\n        svgStyle memory _style\\n    ) public pure returns (bytes memory) {\\n        return style(_style, '');\\n    }\\n    function style(\\n        svgStyle memory _style,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n            bytes memory attributes; \\n\\n            attributes = abi.encodePacked(\\n                '<style>', \\n                _style.element, '{fill:');\\n            if (_style.conf & 1 == 1) {\\n                attributes = abi.encodePacked(\\n                    attributes,\\n                    'url(',\\n                    _style.fill,\\n                    ');'\\n                );\\n            } else {\\n                if (_style.fill.length == 4) {\\n                    attributes = abi.encodePacked(\\n                        attributes,\\n                        toRgba(_style.fill, 0), ';'\\n                    );\\n                } else {\\n                    attributes = abi.encodePacked(\\n                        attributes,\\n                        'none;'\\n                    );\\n                }\\n            }\\n            if (_style.conf & 2 == 2) {\\n                attributes = abi.encodePacked(\\n                    attributes,\\n                    'stroke:url(',\\n                    _style.stroke,\\n                    ');'\\n                );\\n            } else {\\n                if (_style.stroke.length == 4) {\\n                    attributes = abi.encodePacked(\\n                        attributes,\\n                        'stroke:',\\n                        toRgba(_style.stroke, 0),\\n                        ';'\\n                    );\\n                }\\n            }\\n            attributes = abi.encodePacked(\\n                attributes,\\n                'stroke-width:',\\n                _style.stroke_width.toString(),\\n                ';'\\n            );\\n            return abi.encodePacked(\\n                attributes,\\n                _customAttributes,\\n                '}</style>'\\n            );\\n    }\\n\\n    // Returns a line element.\\n    // _coord:\\n    //   [0] : General format applies\\n    //   [1] : x1 \\n    //   [2] : y1\\n    //   [3] : x2\\n    //   [4] : y2\\n    function line(\\n        bytes memory _coord,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        // add .0001 is a workaround for stroke filling\\n        // doesn'n work on horizontal and vertical lines\\n        return abi.encodePacked(\\n            '<line x1=\\\"',\\n            byte2uint8(_coord, 1).toString(),\\n            '.0001\\\" y1=\\\"',\\n            byte2uint8(_coord, 2).toString(),\\n            '.0001\\\" x2=\\\"',\\n            byte2uint8(_coord, 3).toString(),\\n            '\\\" y2=\\\"',\\n            byte2uint8(_coord, 4).toString(),\\n                '\\\" ',\\n            _customAttributes,\\n            endingtag(_coord)\\n        );\\n    }\\n    // Returns a polyline: Variable length ; \\\"infinite\\\" coordinates\\n    // _coords:\\n    //   [0] : General format applies\\n    //   [1],[2] x,y 1st point\\n    //   [3],[4] x,y 2nd point\\n    //   [5],[6] x,y 3rd point\\n    //   ... , ...\\n    // Define one or more lines depending on the number of parameters\\n    function polyline(\\n        bytes memory _coords,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n\\n        return abi.encodePacked(\\n            '<polyline  points=\\\"', \\n            stringifyIntSet(_coords, 1, _coords.length - 1),\\n            '\\\" ',\\n            _customAttributes,\\n            endingtag(_coords)\\n        );\\n    }\\n\\n    // Returns a rectangle\\n    // _r:\\n    //   [0] : General format applies\\n    //   [1],[2] x,y 1st point\\n    //   [3],[4] width, height\\n    function rect(\\n        bytes memory _r,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n\\n        return abi.encodePacked(\\n            '<rect x=\\\"', \\n            byte2uint8(_r, 1).toString(),\\n            '\\\" y=\\\"',\\n            byte2uint8(_r, 2).toString(),\\n            '\\\" width=\\\"',\\n            byte2uint8(_r, 3).toString(),\\n            '\\\" height=\\\"',\\n            byte2uint8(_r, 4).toString(),\\n            '\\\" ',\\n            _customAttributes,\\n            endingtag(_r)\\n        );\\n    }\\n\\n    // Returns a polygon, with a variable number of points\\n    // _p:\\n    //   [0] : General format applies\\n    //   [1],[2] x,y 1st point\\n    //   [3],[4] x,y 2nd point\\n    //   [5],[6] x,y 3rd point\\n    //   ... , ...\\n    // Define one or more lines depending on the number of parameters\\n    function polygon(\\n        bytes memory _p,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n\\n        return abi.encodePacked(\\n            '<polygon points=\\\"',\\n            stringifyIntSet(_p, 1, _p.length -1),\\n            '\\\" ',\\n            _customAttributes,\\n            endingtag(_p)\\n        );\\n    }\\n\\n    // Returns a circle\\n    // _c:\\n    //   [0] : General format applies\\n    //   [1] : cx \\n    //   [2] : cy Where cx,cy defines the center.\\n    //   [3] : r = radius\\n    function circle(\\n        bytes memory _c,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<circle ', \\n            'cx=\\\"', \\n            byte2uint8(_c, 1).toString(),\\n            '\\\" cy=\\\"',\\n            byte2uint8(_c, 2).toString(),\\n            '\\\" r=\\\"',\\n            byte2uint8(_c, 3).toString(),\\n            '\\\" ',\\n            _customAttributes,\\n            endingtag(_c)\\n        );  \\n    }\\n\\n    // Returns an ellipse\\n    // _e:\\n    //   [0] : General format applies\\n    //   [1] : cx \\n    //   [2] : cy Where cx,cy defines the center.\\n    //   [3] : rx = X radius\\n    //   [4] : ry = Y radius\\n    function ellipse(\\n        bytes memory _e,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<ellipse ',\\n            'cx=\\\"',\\n            byte2uint8(_e, 1).toString(),\\n            '\\\" cy=\\\"',\\n            byte2uint8(_e, 2).toString(),\\n            '\\\" rx=\\\"',\\n            byte2uint8(_e, 3).toString(),\\n            '\\\" ry=\\\"',\\n            byte2uint8(_e, 4).toString(),\\n            '\\\" ',\\n            _customAttributes,\\n            endingtag(_e)\\n        );  \\n    }\\n\\n\\n    // Returns a <use href='#id' ...\\n    // _coord:\\n    //   [0] : General format applies\\n    //   [1],[2] x,y\\n    function use(\\n        bytes memory _coord,\\n        bytes memory _href,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<use ', \\n            'href=\\\"',\\n            _href,\\n            '\\\" x=\\\"',\\n            byte2uint8(_coord, 1).toString(),\\n            '\\\" y=\\\"',\\n            byte2uint8(_coord, 2).toString(),\\n            '\\\" ',\\n            _customAttributes,\\n            endingtag(_coord)\\n        );\\n    }\\n\\n    // Returns a linearGradient\\n    //  _lg:\\n    //   [0] General format applies but adds an option:\\n    //   [0] if i & 128:\\n    //      [3] x1\\n    //      [4] x2\\n    //      [5] y1\\n    //      [6] y2\\n    //      [7..10] RGBA\\n    //      [11] offset %\\n    //      [12..15] RGBA\\n    //      [16] offset %\\n    //      [...]\\n    //   else: RGBA starts at [3]\\n    // Define a linear gradient, better used in a <defs> tag. \\n    // Applied to an object with 'fill:url(#id)'\\n    // Then loops, offset + RGBA = 5 bytes \\n    function linearGradient(\\n        bytes memory _lg,\\n        bytes memory _id,\\n        bytes memory _customAttributes\\n    ) external pure returns (bytes memory) {\\n        bytes memory grdata; \\n        uint8 offset = 1;\\n\\n        if (uint8(_lg[0]) & 128 == 128) {\\n            grdata = abi.encodePacked(\\n                'x1=\\\"',\\n                byte2uint8(_lg, 1).toString(),\\n                '%\\\" x2=\\\"',\\n                byte2uint8(_lg, 2).toString(),\\n                '%\\\" y1=\\\"',\\n                byte2uint8(_lg, 3).toString(),\\n                '%\\\" y2=\\\"',\\n                byte2uint8(_lg, 4).toString(), '%\\\"'\\n            );\\n            offset = 5;\\n        }\\n        grdata = abi.encodePacked(\\n            '<linearGradient id=\\\"',\\n            _id,\\n            '\\\" ',\\n            _customAttributes,\\n            grdata,\\n            '>'\\n        );\\n        for (uint i = offset ; i < _lg.length ; i+=5) {\\n            grdata = abi.encodePacked(\\n                grdata,\\n                '<stop offset=\\\"',\\n                byte2uint8(_lg, i).toString(),\\n                '%\\\" stop-color=\\\"',\\n                toRgba(_lg, i+1),\\n                '\\\" id=\\\"',\\n                _id,\\n                byte2uint8(_lg, i).toString(),\\n                '\\\"/>'\\n            );\\n        }\\n        return abi.encodePacked(grdata, '</linearGradient>');\\n    }\\n\\n    // Returns a <text ...>_text</text> block\\n    // Non standard ; _b only contains coordinates.\\n    function text(\\n        bytes memory _b,\\n        bytes memory _text,\\n        bytes memory _customAttributes\\n    ) external pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<text x=\\\"', \\n            byte2uint8(_b, 0).toString(),\\n            '\\\" y=\\\"',\\n            byte2uint8(_b, 1).toString(),\\n            '\\\" ',\\n            _customAttributes,\\n            '>',\\n            _text,\\n            '</text>'\\n        );\\n\\n    }\\n\\n    // Returns animate\\n    // Non standard function.\\n    // _b contains the 'values' Svg field.\\n    //   [0] : number of byte element per tuple\\n    //   [1:] values\\n    // the tuples are separated by ';'.\\n    // _element refers to the id to apply the animation\\n    // _attr contains the attribute name set to 'attribute'\\n    // _element is the target element to animate\\n    // _attr the attribute to animate\\n    // _duration of the animation is in seconds\\n    // repeatCount's default is 'indefinite'\\n    function animate(\\n        bytes memory _b,\\n        bytes memory _element,\\n        bytes memory _attr,\\n        uint8 _duration,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return animate(_b, _element, _attr, _duration, 0, _customAttributes);\\n    }\\n\\n    function animate(\\n        bytes memory _b,\\n        bytes memory _element,\\n        bytes memory _attr,\\n        uint8 _duration,\\n        uint8 _repeatCount,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<animate href=\\\"',\\n            _element,\\n            '\\\" attributeName=\\\"',\\n            _attr,\\n            '\\\" values=\\\"',\\n            tuples2ValueMatrix(_b),\\n            '\\\" dur=\\\"',\\n            _duration.toString(),\\n            's\\\" repeatCount=\\\"',\\n            repeatCount(_repeatCount),\\n            '\\\" ',\\n            _customAttributes,\\n            '/>'\\n        );\\n    }\\n\\n    // Returns animateTransform\\n    // _b is the same as in animate\\n    // AnimTransfType is an enum: {translate, scale, rotate, skewX, skewY}\\n    function animateTransform(\\n        bytes memory _b,\\n        bytes memory _element,\\n        AnimTransfType _type,\\n        uint8 _duration,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return animateTransform(_b, _element, _type, _duration, 0, _customAttributes);\\n    }\\n\\n    function animateTransform(\\n        bytes memory _b,\\n        bytes memory _element,\\n        AnimTransfType _type,\\n        uint8 _duration,\\n        uint8 _repeatCount,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<animateTransform href=\\\"',\\n            _element,\\n            '\\\" attributeName=\\\"transform\\\" type=\\\"',\\n            animTransfType(_type),\\n            '\\\" dur=\\\"',\\n            _duration.toString(),\\n            's\\\" repeatCount=\\\"',\\n            repeatCount(_repeatCount),\\n            '\\\" values=\\\"',\\n            tuples2ValueMatrix(_b),\\n            '\\\" ',\\n            _customAttributes,\\n            '/>'\\n        );\\n    }\\n\\n    // Returns 'type' for animateTransform \\n    function animTransfType(AnimTransfType _t)\\n    internal pure returns (bytes memory) {\\n        if (_t == AnimTransfType.translate) return \\\"translate\\\";\\n        if (_t == AnimTransfType.scale)     return \\\"scale\\\";\\n        if (_t == AnimTransfType.rotate)    return \\\"rotate\\\";\\n        if (_t == AnimTransfType.skewX)     return \\\"skewX\\\";\\n        if (_t == AnimTransfType.skewY)     return \\\"skewY\\\";\\n    }\\n\\n    // Returns a path\\n    // See github's repo oh how to encode data for path\\n    // A Q and T are not implemented yet\\n    // _b:\\n    //   [0] : General format applies\\n    //   [1:] : encoded data\\n    function path(\\n        bytes memory _b,\\n        bytes memory _customAttributes\\n    ) external pure returns (bytes memory) {\\n\\n        bytes memory pathdata; \\n        pathdata = '<path d=\\\"';\\n\\n        for (uint i = 1 ; i < _b.length ; i++) {\\n            if(uint8(_b[i]) == 77) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'M',\\n                    stringifyIntSet(_b, i+1, 2)\\n                );\\n                i += 2;\\n            } else if (uint8(_b[i]) == 109) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'm',\\n                    stringifyIntSet(_b, i+1, 2)\\n                );\\n                i += 2;\\n            } else if (uint8(_b[i]) == 76) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'L',\\n                    stringifyIntSet(_b, i+1, 2)\\n                );\\n                i += 2;\\n            } else if (uint8(_b[i]) == 108) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'l',\\n                    stringifyIntSet(_b, i+1, 2)\\n                );\\n                i += 2;\\n            } else if (uint8(_b[i]) == 67) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'C',\\n                    stringifyIntSet(_b, i+1, 6)\\n                );\\n                i += 6;\\n            } else if (uint8(_b[i]) == 86) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'V',\\n                    byte2uint8(_b, i+1).toString()\\n                );\\n                i++;\\n            } else if (uint8(_b[i]) == 118) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'v',\\n                    byte2uint8(_b, i+1).toString()\\n                );\\n                i++;\\n            } else if (uint8(_b[i]) == 72) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'H',\\n                    byte2uint8(_b, i+1).toString()\\n                );\\n                i++;\\n            } else if (uint8(_b[i]) == 104) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'h',\\n                    byte2uint8(_b, i+1).toString()\\n                );\\n                i++;\\n            } else if (uint8(_b[i]) == 83) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'S',\\n                    stringifyIntSet(_b, i+1, 4)\\n                );\\n                i += 4;\\n            } else if (uint8(_b[i]) == 115) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 's',\\n                    stringifyIntSet(_b, i+1, 4)\\n                );\\n                i += 4;\\n            } else if (uint8(_b[i]) == 65) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'A',\\n                    stringifyIntSet(_b, i+1, 7)\\n                );\\n                i += 7;\\n            } else if (uint8(_b[i]) == 97) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'a',\\n                    stringifyIntSet(_b, i+1, 7)\\n                );\\n                i += 4;\\n            } else if (uint8(_b[i]) == 90) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'Z'\\n                );\\n            } else if (uint8(_b[i]) == 122) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'z'\\n                );\\n            } else {\\n                pathdata = abi.encodePacked(\\n                    pathdata, '**' , i.toString(), '-', \\n                    uint8(_b[i]).toString()\\n                    );\\n            }\\n        }\\n        return(\\n            abi.encodePacked(\\n                pathdata, '\\\" ',\\n                _customAttributes,\\n                endingtag(_b)\\n            )\\n        );\\n    }\\n// ------ tools -----------\\n\\n    // Returns the ending tag as defined in_b[3] (odd number)\\n    function endingtag(\\n        bytes memory _b\\n    ) pure public returns (string memory) {\\n        if (byte2uint8(_b,0) & 1 == 0) {\\n            return ' />';\\n        }\\n        return '>';\\n    }\\n\\n    // Returns 'n' stringified and spaced uint8\\n    function stringifyIntSet(\\n        bytes memory _data,\\n        uint256 _offset,\\n        uint256 _len\\n    ) public pure returns (bytes memory) { \\n        bytes memory res;\\n        require (_data.length >= _offset + _len, 'Out of range');\\n        for (uint i = _offset ; i < _offset + _len ; i++) {\\n            res = abi.encodePacked(\\n                res,\\n                byte2uint8(_data, i).toString(),\\n                ' '\\n            );\\n        }\\n        return res;\\n    }\\n\\n    // Used by animation*, receives an array whose the first elements indicates\\n    // the number of tuples, and the values data\\n    // returns the values separated by spaces,\\n    // tuples separated by semicolon\\n    function tuples2ValueMatrix(\\n        bytes memory _data\\n    ) public pure returns (bytes memory) { \\n        uint256 _len = byte2uint8(_data, 0);\\n        bytes memory res;\\n\\n        for (uint i = 1 ; i <= _data.length - 1 ; i += _len) {\\n            res = abi.encodePacked(\\n                res,\\n                stringifyIntSet(_data, i, _len),\\n                ';'\\n            );\\n        }\\n        return res;\\n\\n    }\\n\\n    // returns a repeatCount for the animations.\\n    // If uint8 == 0 then indefinite loop\\n    // else a count of loops.\\n    function repeatCount(uint8 _r)\\n    public pure returns (string memory) {\\n        if (_r == 0) {\\n            return 'indefinite';\\n        } else {\\n            return _r.toString();\\n        }\\n    }\\n\\n    // Returns one uint8 in a byte array\\n    function byte2uint8(\\n        bytes memory _data,\\n        uint256 _offset\\n    ) public pure returns (uint8) { \\n        require (_data.length > _offset, 'Out of range');\\n        return uint8(_data[_offset]);\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x94cae161b911c4bc4d173eb3e80b071bec4b3f92a059d3de1a1e9d22fc371d09\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}