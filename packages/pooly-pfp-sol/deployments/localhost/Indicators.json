{
  "address": "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_SvgWigets",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sTools",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NewIndicator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_qty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_buildType",
          "type": "uint256"
        }
      ],
      "name": "createToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "svgBase64",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "svgRaw",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x35be87e1d5f8cd20a66c8405c8f560e69c2e9ea0c349aa337191de305b8da4b1",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
    "transactionIndex": 0,
    "gasUsed": "2748307",
    "logsBloom": "0x
    "blockHash": "0xb1114131abb4b428815f85b3b1b152cc1c535fb19effbe48f6d626f3e50f53dd",
    "transactionHash": "0x35be87e1d5f8cd20a66c8405c8f560e69c2e9ea0c349aa337191de305b8da4b1",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 8,
        "transactionHash": "0x35be87e1d5f8cd20a66c8405c8f560e69c2e9ea0c349aa337191de305b8da4b1",
        "address": "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb1114131abb4b428815f85b3b1b152cc1c535fb19effbe48f6d626f3e50f53dd"
      }
    ],
    "blockNumber": 8,
    "cumulativeGasUsed": "2748307",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0165878A594ca255338adfa4d48449f69242Eb8F",
    "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707"
  ],
  "numDeployments": 1,
  "solcInputHash": "1d5a56a1078f935190c56fe6e8e932bb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_SvgWigets\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sTools\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NewIndicator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_qty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buildType\",\"type\":\"uint256\"}],\"name\":\"createToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"svgBase64\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"svgRaw\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Indicators.sol\":\"Indicators\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1cbe42915bc66227970fe99bc0f783eb1de30f2b48f984af01ad45edb9658698\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@pooly-cards/svg-lib-sol/contracts/interfaces/ISvgTools.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface ISvgTools {\\n    function getColor(string memory) external view returns (bytes memory);\\n    function getColor(string memory, uint8 )\\n    external view returns (bytes memory);\\n    function toEthTxt(uint256, uint8) external pure returns (bytes memory);\\n    function autoLinearGradient(bytes memory, bytes memory, bytes memory)\\n    external view returns (bytes memory);\\n    function autoLinearGradient(bytes memory, bytes memory, bytes memory, bytes memory)\\n    external view returns (bytes memory);\\n    function startSvgRect(bytes memory, bytes memory, bytes memory)\\n    external view returns (bytes memory);\\n    function round2Txt(uint256, uint8, uint8)\\n    external pure returns (bytes memory);\\n}\",\"keccak256\":\"0x43b1c920638398b06549e06e6a0705927fbaa21f27850ab96666497cfb2159bb\",\"license\":\"MIT\"},\"@pooly-cards/svg-lib-sol/contracts/interfaces/ISvgWidgets.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface ISvgWidgets {\\n    function gaugeArc(bytes memory) external view returns (bytes memory);\\n        function gaugeVBar() external view returns (bytes memory);\\n    function gaugeVBar(bytes memory) external view returns (bytes memory);\\n    function gaugeVBar(bytes memory, bytes memory) external view returns (bytes memory);\\n    function gaugeHBar(bytes memory) external view returns (bytes memory);\\n    function gaugeHBar(bytes memory, bytes memory)\\n    external view returns (bytes memory);\\n    function includeSymbolGaugeArc(bytes memory) external view returns (bytes memory);\\n    function includeSymbolGaugeV(bytes memory) external view returns (bytes memory);\\n    function includeSymbolSFLogo(bytes memory) external view returns (bytes memory); \\n    function gaugeArc(bytes memory, bytes memory)\\n    external view returns (bytes memory);\\n    function autoVGauge(bytes memory, uint, bytes memory)\\n    external view returns (bytes memory);\\n}\",\"keccak256\":\"0x710cd98231eb067ace5d368e7305fc5ddb044a9257e56a3eccccc974aec5c065\",\"license\":\"MIT\"},\"@pooly-cards/svg-lib-sol/contracts/libraries/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n        \\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n            \\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n            \\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n            \\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n            \\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               dataPtr := add(dataPtr, 3)\\n               \\n               // read 3 bytes\\n               let input := mload(dataPtr)\\n               \\n               // write 4 characters\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n            }\\n            \\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n        \\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9639f92df222edfd9c7716b87a62c366fa1549d3c329ba6c7c5cf8166818bb43\",\"license\":\"MIT\"},\"@pooly-cards/svg-lib-sol/contracts/libraries/SvgCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n\\n// General format for shapes:\\n// [0] : options splitted in bits extracted with & mask (so can be cumulative).\\n//       Following the principle of least surprise.\\n//       if i & 1 == 0   : ending tag '/>', else just '>' (you must close the tag)\\n//       if i & 2 == 0   : uses svgPrefix (i`svgPrefix_`0, ..)\\n//                         Otherwise no class nor id prefix (i0, c0) \\n//\\n\\n// svgStyle is a structure used by style() that returns a '<style ... >' block\\n// svgStyle.conf:\\n// if bit 8 is set, fill is a css selector. Else, default: rgba on 4 bytes\\n// if bit 7 is set, stroke is a css selector. Else, default rgba on 4 bytes\\n// In other words:\\n//     if i & 1 == 1: [1] is a text containing a css selector \\n//       and produces 'fill:url(#id)' where #id is #i`conf.prefix`_n\\n//       else: \\n//         [1], [2], [3], [4] : fill:RGBA\\n//     if i & 2 == 2: stroke contain a css selector at [2] or [5] depending \\n//       on the option i & 1 above\\nstruct svgStyle {\\n    uint8 conf; \\n    uint8 stroke_width;\\n    bytes element; // target element to apply the style\\n    bytes fill;    // rgba or plain id string\\n    bytes stroke;  // rgba or plain id string\\n}\\n\\n\\n// AnimTransfType is used by animateTransform\\nenum AnimTransfType { translate, scale, rotate, skewX, skewY }\\n\\nlibrary SvgCore {\\n\\n    using Strings for uint256;\\n    using Strings for uint8;\\n\\n    // Open <svg> tag\\n    // _vBSize defines the viewBox in 4 bytes\\n    //   [0] x\\n    //   [1] y\\n    //   [2] length\\n    //   [3] width\\n    // accepts custom attributes in _customAttributes\\n    function startSvg(\\n        bytes memory _vBSize,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<svg ',\\n            'viewBox=\\\"',\\n            stringifyIntSet(_vBSize, 0, 4),\\n            '\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" ',\\n            _customAttributes,\\n            '>'\\n        );\\n    }\\n\\n    // Close </svg> tag\\n    function endSvg(\\n    ) public pure returns (bytes memory) {\\n        return('</svg>');\\n    }\\n\\n    // <g _customAttributes></g> tag encloses _b\\n    function defs(\\n        bytes memory _b,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<g ',\\n            _customAttributes,\\n            '>',\\n            _b,\\n            '</g>'\\n        );\\n    }\\n    // <defs></defs> tag encloses _b\\n    function defs(\\n        bytes memory _b\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<defs>',\\n            _b,\\n            '</defs>'\\n        );\\n    }\\n    // returns a <symbol id=...>_content</symbol>\\n    function symbol(\\n        bytes memory _id,\\n        bytes memory _content\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<symbol id=\\\"',\\n            _id,\\n            '\\\">',\\n            _content,\\n            '</symbol>'\\n        );\\n    }\\n\\n    // <mask id=\\\"_id\\\">_b<mask> tag encloses _b\\n    // accepts custom attributes in _customAttributes\\n    function mask(\\n        bytes memory _b,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<mask ',\\n            _customAttributes,\\n            '>',\\n            _b,\\n            '</mask>'\\n        );\\n    }\\n\\n    // Takes 4 bytes starting from the given offset\\n    // Returns css' 'rgba(r,v,b,a%)'\\n    // so alpha should be between 0 and 100\\n    function toRgba(\\n        bytes memory _rgba,\\n        uint256 offset\\n    ) public pure returns (bytes memory){\\n\\n        return abi.encodePacked(\\n            \\\"rgba(\\\",\\n            byte2uint8(_rgba, offset).toString(), \\\",\\\",\\n            byte2uint8(_rgba, offset + 1).toString(), \\\",\\\",\\n            byte2uint8(_rgba, offset + 2).toString(), \\\",\\\",\\n            byte2uint8(_rgba, offset + 3).toString(),\\n            \\\"%)\\\"\\n        );\\n    }\\n\\n    // defines a style for '_element' class or id string (eg. '#iprefix_1') \\n    // colors are defined in 4 bytes ; red,green,blue,alpha OR url(#id)\\n    // then if set stroke color (RGBA or #id),\\n    // then if set stroke-width\\n    // see idoc about svgStyle.conf in the struct def.\\n    // note: As \\\"_element\\\" is a free string you can pass \\\"svg\\\" for a default style\\n    function style(\\n        svgStyle memory _style\\n    ) public pure returns (bytes memory) {\\n        return style(_style, '');\\n    }\\n    function style(\\n        svgStyle memory _style,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n            bytes memory attributes; \\n\\n            attributes = abi.encodePacked(\\n                '<style>', \\n                _style.element, '{fill:');\\n            if (_style.conf & 1 == 1) {\\n                attributes = abi.encodePacked(\\n                    attributes,\\n                    'url(',\\n                    _style.fill,\\n                    ');'\\n                );\\n            } else {\\n                if (_style.fill.length == 4) {\\n                    attributes = abi.encodePacked(\\n                        attributes,\\n                        toRgba(_style.fill, 0), ';'\\n                    );\\n                } else {\\n                    attributes = abi.encodePacked(\\n                        attributes,\\n                        'none;'\\n                    );\\n                }\\n            }\\n            if (_style.conf & 2 == 2) {\\n                attributes = abi.encodePacked(\\n                    attributes,\\n                    'stroke:url(',\\n                    _style.stroke,\\n                    ');'\\n                );\\n            } else {\\n                if (_style.stroke.length == 4) {\\n                    attributes = abi.encodePacked(\\n                        attributes,\\n                        'stroke:',\\n                        toRgba(_style.stroke, 0),\\n                        ';'\\n                    );\\n                }\\n            }\\n            attributes = abi.encodePacked(\\n                attributes,\\n                'stroke-width:',\\n                _style.stroke_width.toString(),\\n                ';'\\n            );\\n            return abi.encodePacked(\\n                attributes,\\n                _customAttributes,\\n                '}</style>'\\n            );\\n    }\\n\\n    // Returns a line element.\\n    // _coord:\\n    //   [0] : General format applies\\n    //   [1] : x1 \\n    //   [2] : y1\\n    //   [3] : x2\\n    //   [4] : y2\\n    function line(\\n        bytes memory _coord,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        // add .0001 is a workaround for stroke filling\\n        // doesn'n work on horizontal and vertical lines\\n        return abi.encodePacked(\\n            '<line x1=\\\"',\\n            byte2uint8(_coord, 1).toString(),\\n            '.0001\\\" y1=\\\"',\\n            byte2uint8(_coord, 2).toString(),\\n            '.0001\\\" x2=\\\"',\\n            byte2uint8(_coord, 3).toString(),\\n            '\\\" y2=\\\"',\\n            byte2uint8(_coord, 4).toString(),\\n                '\\\" ',\\n            _customAttributes,\\n            endingtag(_coord)\\n        );\\n    }\\n    // Returns a polyline: Variable length ; \\\"infinite\\\" coordinates\\n    // _coords:\\n    //   [0] : General format applies\\n    //   [1],[2] x,y 1st point\\n    //   [3],[4] x,y 2nd point\\n    //   [5],[6] x,y 3rd point\\n    //   ... , ...\\n    // Define one or more lines depending on the number of parameters\\n    function polyline(\\n        bytes memory _coords,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n\\n        return abi.encodePacked(\\n            '<polyline  points=\\\"', \\n            stringifyIntSet(_coords, 1, _coords.length - 1),\\n            '\\\" ',\\n            _customAttributes,\\n            endingtag(_coords)\\n        );\\n    }\\n\\n    // Returns a rectangle\\n    // _r:\\n    //   [0] : General format applies\\n    //   [1],[2] x,y 1st point\\n    //   [3],[4] width, height\\n    function rect(\\n        bytes memory _r,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n\\n        return abi.encodePacked(\\n            '<rect x=\\\"', \\n            byte2uint8(_r, 1).toString(),\\n            '\\\" y=\\\"',\\n            byte2uint8(_r, 2).toString(),\\n            '\\\" width=\\\"',\\n            byte2uint8(_r, 3).toString(),\\n            '\\\" height=\\\"',\\n            byte2uint8(_r, 4).toString(),\\n            '\\\" ',\\n            _customAttributes,\\n            endingtag(_r)\\n        );\\n    }\\n\\n    // Returns a polygon, with a variable number of points\\n    // _p:\\n    //   [0] : General format applies\\n    //   [1],[2] x,y 1st point\\n    //   [3],[4] x,y 2nd point\\n    //   [5],[6] x,y 3rd point\\n    //   ... , ...\\n    // Define one or more lines depending on the number of parameters\\n    function polygon(\\n        bytes memory _p,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n\\n        return abi.encodePacked(\\n            '<polygon points=\\\"',\\n            stringifyIntSet(_p, 1, _p.length -1),\\n            '\\\" ',\\n            _customAttributes,\\n            endingtag(_p)\\n        );\\n    }\\n\\n    // Returns a circle\\n    // _c:\\n    //   [0] : General format applies\\n    //   [1] : cx \\n    //   [2] : cy Where cx,cy defines the center.\\n    //   [3] : r = radius\\n    function circle(\\n        bytes memory _c,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<circle ', \\n            'cx=\\\"', \\n            byte2uint8(_c, 1).toString(),\\n            '\\\" cy=\\\"',\\n            byte2uint8(_c, 2).toString(),\\n            '\\\" r=\\\"',\\n            byte2uint8(_c, 3).toString(),\\n            '\\\" ',\\n            _customAttributes,\\n            endingtag(_c)\\n        );  \\n    }\\n\\n    // Returns an ellipse\\n    // _e:\\n    //   [0] : General format applies\\n    //   [1] : cx \\n    //   [2] : cy Where cx,cy defines the center.\\n    //   [3] : rx = X radius\\n    //   [4] : ry = Y radius\\n    function ellipse(\\n        bytes memory _e,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<ellipse ',\\n            'cx=\\\"',\\n            byte2uint8(_e, 1).toString(),\\n            '\\\" cy=\\\"',\\n            byte2uint8(_e, 2).toString(),\\n            '\\\" rx=\\\"',\\n            byte2uint8(_e, 3).toString(),\\n            '\\\" ry=\\\"',\\n            byte2uint8(_e, 4).toString(),\\n            '\\\" ',\\n            _customAttributes,\\n            endingtag(_e)\\n        );  \\n    }\\n\\n\\n    // Returns a <use href='#id' ...\\n    // _coord:\\n    //   [0] : General format applies\\n    //   [1],[2] x,y\\n    function use(\\n        bytes memory _coord,\\n        bytes memory _href,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<use ', \\n            'href=\\\"',\\n            _href,\\n            '\\\" x=\\\"',\\n            byte2uint8(_coord, 1).toString(),\\n            '\\\" y=\\\"',\\n            byte2uint8(_coord, 2).toString(),\\n            '\\\" ',\\n            _customAttributes,\\n            endingtag(_coord)\\n        );\\n    }\\n\\n    // Returns a linearGradient\\n    //  _lg:\\n    //   [0] General format applies but adds an option:\\n    //   [0] if i & 128:\\n    //      [3] x1\\n    //      [4] x2\\n    //      [5] y1\\n    //      [6] y2\\n    //      [7..10] RGBA\\n    //      [11] offset %\\n    //      [12..15] RGBA\\n    //      [16] offset %\\n    //      [...]\\n    //   else: RGBA starts at [3]\\n    // Define a linear gradient, better used in a <defs> tag. \\n    // Applied to an object with 'fill:url(#id)'\\n    // Then loops, offset + RGBA = 5 bytes \\n    function linearGradient(\\n        bytes memory _lg,\\n        bytes memory _id,\\n        bytes memory _customAttributes\\n    ) external pure returns (bytes memory) {\\n        bytes memory grdata; \\n        uint8 offset = 1;\\n\\n        if (uint8(_lg[0]) & 128 == 128) {\\n            grdata = abi.encodePacked(\\n                'x1=\\\"',\\n                byte2uint8(_lg, 1).toString(),\\n                '%\\\" x2=\\\"',\\n                byte2uint8(_lg, 2).toString(),\\n                '%\\\" y1=\\\"',\\n                byte2uint8(_lg, 3).toString(),\\n                '%\\\" y2=\\\"',\\n                byte2uint8(_lg, 4).toString(), '%\\\"'\\n            );\\n            offset = 5;\\n        }\\n        grdata = abi.encodePacked(\\n            '<linearGradient id=\\\"',\\n            _id,\\n            '\\\" ',\\n            _customAttributes,\\n            grdata,\\n            '>'\\n        );\\n        for (uint i = offset ; i < _lg.length ; i+=5) {\\n            grdata = abi.encodePacked(\\n                grdata,\\n                '<stop offset=\\\"',\\n                byte2uint8(_lg, i).toString(),\\n                '%\\\" stop-color=\\\"',\\n                toRgba(_lg, i+1),\\n                '\\\" id=\\\"',\\n                _id,\\n                byte2uint8(_lg, i).toString(),\\n                '\\\"/>'\\n            );\\n        }\\n        return abi.encodePacked(grdata, '</linearGradient>');\\n    }\\n\\n    // Returns a <text ...>_text</text> block\\n    // Non standard ; _b only contains coordinates.\\n    function text(\\n        bytes memory _b,\\n        bytes memory _text,\\n        bytes memory _customAttributes\\n    ) external pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<text x=\\\"', \\n            byte2uint8(_b, 0).toString(),\\n            '\\\" y=\\\"',\\n            byte2uint8(_b, 1).toString(),\\n            '\\\" ',\\n            _customAttributes,\\n            '>',\\n            _text,\\n            '</text>'\\n        );\\n\\n    }\\n\\n    // Returns animate\\n    // Non standard function.\\n    // _b contains the 'values' Svg field.\\n    //   [0] : number of byte element per tuple\\n    //   [1:] values\\n    // the tuples are separated by ';'.\\n    // _element refers to the id to apply the animation\\n    // _attr contains the attribute name set to 'attribute'\\n    // _element is the target element to animate\\n    // _attr the attribute to animate\\n    // _duration of the animation is in seconds\\n    // repeatCount's default is 'indefinite'\\n    function animate(\\n        bytes memory _b,\\n        bytes memory _element,\\n        bytes memory _attr,\\n        uint8 _duration,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return animate(_b, _element, _attr, _duration, 0, _customAttributes);\\n    }\\n\\n    function animate(\\n        bytes memory _b,\\n        bytes memory _element,\\n        bytes memory _attr,\\n        uint8 _duration,\\n        uint8 _repeatCount,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<animate href=\\\"',\\n            _element,\\n            '\\\" attributeName=\\\"',\\n            _attr,\\n            '\\\" values=\\\"',\\n            tuples2ValueMatrix(_b),\\n            '\\\" dur=\\\"',\\n            _duration.toString(),\\n            's\\\" repeatCount=\\\"',\\n            repeatCount(_repeatCount),\\n            '\\\" ',\\n            _customAttributes,\\n            '/>'\\n        );\\n    }\\n\\n    // Returns animateTransform\\n    // _b is the same as in animate\\n    // AnimTransfType is an enum: {translate, scale, rotate, skewX, skewY}\\n    function animateTransform(\\n        bytes memory _b,\\n        bytes memory _element,\\n        AnimTransfType _type,\\n        uint8 _duration,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return animateTransform(_b, _element, _type, _duration, 0, _customAttributes);\\n    }\\n\\n    function animateTransform(\\n        bytes memory _b,\\n        bytes memory _element,\\n        AnimTransfType _type,\\n        uint8 _duration,\\n        uint8 _repeatCount,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<animateTransform href=\\\"',\\n            _element,\\n            '\\\" attributeName=\\\"transform\\\" type=\\\"',\\n            animTransfType(_type),\\n            '\\\" dur=\\\"',\\n            _duration.toString(),\\n            's\\\" repeatCount=\\\"',\\n            repeatCount(_repeatCount),\\n            '\\\" values=\\\"',\\n            tuples2ValueMatrix(_b),\\n            '\\\" ',\\n            _customAttributes,\\n            '/>'\\n        );\\n    }\\n\\n    // Returns 'type' for animateTransform \\n    function animTransfType(AnimTransfType _t)\\n    internal pure returns (bytes memory) {\\n        if (_t == AnimTransfType.translate) return \\\"translate\\\";\\n        if (_t == AnimTransfType.scale)     return \\\"scale\\\";\\n        if (_t == AnimTransfType.rotate)    return \\\"rotate\\\";\\n        if (_t == AnimTransfType.skewX)     return \\\"skewX\\\";\\n        if (_t == AnimTransfType.skewY)     return \\\"skewY\\\";\\n    }\\n\\n    // Returns a path\\n    // See github's repo oh how to encode data for path\\n    // A Q and T are not implemented yet\\n    // _b:\\n    //   [0] : General format applies\\n    //   [1:] : encoded data\\n    function path(\\n        bytes memory _b,\\n        bytes memory _customAttributes\\n    ) external pure returns (bytes memory) {\\n\\n        bytes memory pathdata; \\n        pathdata = '<path d=\\\"';\\n\\n        for (uint i = 1 ; i < _b.length ; i++) {\\n            if(uint8(_b[i]) == 77) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'M',\\n                    stringifyIntSet(_b, i+1, 2)\\n                );\\n                i += 2;\\n            } else if (uint8(_b[i]) == 109) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'm',\\n                    stringifyIntSet(_b, i+1, 2)\\n                );\\n                i += 2;\\n            } else if (uint8(_b[i]) == 76) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'L',\\n                    stringifyIntSet(_b, i+1, 2)\\n                );\\n                i += 2;\\n            } else if (uint8(_b[i]) == 108) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'l',\\n                    stringifyIntSet(_b, i+1, 2)\\n                );\\n                i += 2;\\n            } else if (uint8(_b[i]) == 67) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'C',\\n                    stringifyIntSet(_b, i+1, 6)\\n                );\\n                i += 6;\\n            } else if (uint8(_b[i]) == 86) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'V',\\n                    byte2uint8(_b, i+1).toString()\\n                );\\n                i++;\\n            } else if (uint8(_b[i]) == 118) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'v',\\n                    byte2uint8(_b, i+1).toString()\\n                );\\n                i++;\\n            } else if (uint8(_b[i]) == 72) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'H',\\n                    byte2uint8(_b, i+1).toString()\\n                );\\n                i++;\\n            } else if (uint8(_b[i]) == 104) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'h',\\n                    byte2uint8(_b, i+1).toString()\\n                );\\n                i++;\\n            } else if (uint8(_b[i]) == 83) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'S',\\n                    stringifyIntSet(_b, i+1, 4)\\n                );\\n                i += 4;\\n            } else if (uint8(_b[i]) == 115) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 's',\\n                    stringifyIntSet(_b, i+1, 4)\\n                );\\n                i += 4;\\n            } else if (uint8(_b[i]) == 65) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'A',\\n                    stringifyIntSet(_b, i+1, 7)\\n                );\\n                i += 7;\\n            } else if (uint8(_b[i]) == 97) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'a',\\n                    stringifyIntSet(_b, i+1, 7)\\n                );\\n                i += 4;\\n            } else if (uint8(_b[i]) == 90) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'Z'\\n                );\\n            } else if (uint8(_b[i]) == 122) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'z'\\n                );\\n            } else {\\n                pathdata = abi.encodePacked(\\n                    pathdata, '**' , i.toString(), '-', \\n                    uint8(_b[i]).toString()\\n                    );\\n            }\\n        }\\n        return(\\n            abi.encodePacked(\\n                pathdata, '\\\" ',\\n                _customAttributes,\\n                endingtag(_b)\\n            )\\n        );\\n    }\\n// ------ tools -----------\\n\\n    // Returns the ending tag as defined in_b[3] (odd number)\\n    function endingtag(\\n        bytes memory _b\\n    ) pure public returns (string memory) {\\n        if (byte2uint8(_b,0) & 1 == 0) {\\n            return ' />';\\n        }\\n        return '>';\\n    }\\n\\n    // Returns 'n' stringified and spaced uint8\\n    function stringifyIntSet(\\n        bytes memory _data,\\n        uint256 _offset,\\n        uint256 _len\\n    ) public pure returns (bytes memory) { \\n        bytes memory res;\\n        require (_data.length >= _offset + _len, 'Out of range');\\n        for (uint i = _offset ; i < _offset + _len ; i++) {\\n            res = abi.encodePacked(\\n                res,\\n                byte2uint8(_data, i).toString(),\\n                ' '\\n            );\\n        }\\n        return res;\\n    }\\n\\n    // Used by animation*, receives an array whose the first elements indicates\\n    // the number of tuples, and the values data\\n    // returns the values separated by spaces,\\n    // tuples separated by semicolon\\n    function tuples2ValueMatrix(\\n        bytes memory _data\\n    ) public pure returns (bytes memory) { \\n        uint256 _len = byte2uint8(_data, 0);\\n        bytes memory res;\\n\\n        for (uint i = 1 ; i <= _data.length - 1 ; i += _len) {\\n            res = abi.encodePacked(\\n                res,\\n                stringifyIntSet(_data, i, _len),\\n                ';'\\n            );\\n        }\\n        return res;\\n\\n    }\\n\\n    // returns a repeatCount for the animations.\\n    // If uint8 == 0 then indefinite loop\\n    // else a count of loops.\\n    function repeatCount(uint8 _r)\\n    public pure returns (string memory) {\\n        if (_r == 0) {\\n            return 'indefinite';\\n        } else {\\n            return _r.toString();\\n        }\\n    }\\n\\n    // Returns one uint8 in a byte array\\n    function byte2uint8(\\n        bytes memory _data,\\n        uint256 _offset\\n    ) public pure returns (uint8) { \\n        require (_data.length > _offset, 'Out of range');\\n        return uint8(_data[_offset]);\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x94cae161b911c4bc4d173eb3e80b071bec4b3f92a059d3de1a1e9d22fc371d09\",\"license\":\"MIT\"},\"contracts/Indicators.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@pooly-cards/svg-lib-sol/contracts/libraries/Base64.sol\\\";\\nimport \\\"@pooly-cards/svg-lib-sol/contracts/libraries/SvgCore.sol\\\";\\nimport \\\"@pooly-cards/svg-lib-sol/contracts/interfaces/ISvgTools.sol\\\";\\nimport \\\"@pooly-cards/svg-lib-sol/contracts/interfaces/ISvgWidgets.sol\\\";\\n\\n// Superfluid Interfaces\\ninterface ISCFA {\\n  function getAccountFlowInfo(address token, address account)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      int96,\\n      uint256,\\n      uint256\\n    );\\n}\\n\\ninterface ISuperToken {\\n  function balanceOf(address) external view returns (uint256);\\n}\\n\\n// Aave LendingPool Interface\\ninterface IAaveLP {\\n  function getUserAccountData(address)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n}\\n\\ncontract Indicators is ERC721, ERC721URIStorage, ERC721Enumerable, Ownable {\\n  event NewIndicator(uint256 tokenId);\\n\\n  ISvgWidgets svgWidgets;\\n  ISvgTools sTools;\\n  ISCFA sCFA;\\n  IAaveLP sALP;\\n  mapping(uint256 => uint256) internal idToService;\\n\\n  struct STAddresss {\\n    bytes stName;\\n    address addr;\\n  }\\n\\n  STAddresss[] stAddress;\\n  using Counters for Counters.Counter;\\n  using Strings for uint256;\\n  using Strings for uint96;\\n  using Strings for uint8;\\n\\n  uint256 constant maxSupply = 50000;\\n  uint256 constant price = 10 ether;\\n  // box size 0,0,110,136\\n  bytes constant bgSize = hex\\\"00006e88\\\";\\n  Counters.Counter private _tokenIdCounter;\\n\\n  constructor(address _SvgWigets, address _sTools) ERC721(\\\"Indicators\\\", \\\"IDC\\\") {\\n    svgWidgets = ISvgWidgets(_SvgWigets);\\n    sTools = ISvgTools(_sTools);\\n    // polygon\\n    sCFA = ISCFA(0x6EeE6060f715257b970700bc2656De21dEdF074C);\\n    stAddress.push(STAddresss(\\\"MATICx\\\", 0x3aD736904E9e65189c3000c7DD2c8AC8bB7cD4e3));\\n    stAddress.push(STAddresss(\\\"ETHx\\\", 0x27e1e4E6BC79D93032abef01025811B7E4727e85));\\n    stAddress.push(STAddresss(\\\"USDCx\\\", 0xCAa7349CEA390F89641fe306D93591f87595dc1F));\\n    stAddress.push(STAddresss(\\\"DAIx\\\", 0x1305F6B6Df9Dc47159D12Eb7aC2804d4A33173c2));\\n    stAddress.push(STAddresss(\\\"WBTCx\\\", 0x4086eBf75233e8492F1BCDa41C7f2A8288c2fB92));\\n\\n    sALP = IAaveLP(0x8dFf5E27EA6b7AC08EbFdf9eB090F32ee9a30fcf);\\n  }\\n\\n  function svgBase64(uint256 _tokenId) public view returns (string memory) {\\n    return (\\n      string(abi.encodePacked(\\\"data:image/svg+xml;base64,\\\", Base64.encode(svgRaw(_tokenId))))\\n    );\\n  }\\n\\n  function buildSVG(uint256 _tokenId) internal view returns (bytes memory) {\\n    bytes memory symbol_id = abi.encodePacked(\\\"pooly\\\", _tokenId.toString());\\n    bytes memory svgPart = abi.encodePacked(\\n      // svgWidgets.includeSymbolGaugeV(symbol_id), // define the gauge symbol\\n      svgWidgets.includeSymbolSFLogo(\\\"sfl\\\"),\\n      SvgCore.startSvg(hex\\\"00002128\\\", 'width=\\\"10\\\" height=\\\"10\\\" x=\\\"94\\\" y=\\\"5\\\"'),\\n      SvgCore.use(\\n        hex\\\"000000\\\", // noopts, x,y=0,0\\n        \\\"#sfl\\\", //symbol id (href)\\n        \\\"\\\"\\n      ),\\n      SvgCore.endSvg()\\n    );\\n\\n    return svgPart;\\n  }\\n\\n  function svgRaw(uint256 _tokenId) public view returns (bytes memory) {\\n    bytes memory svgPart;\\n    svgStyle memory bgRect = svgStyle(\\n      0,\\n      5,\\n      \\\"#rectBg\\\",\\n      sTools.getColor(\\\"GhostWhite\\\"),\\n      sTools.getColor(\\\"Navy\\\")\\n    );\\n    svgPart = buildSVG(_tokenId);\\n    return\\n      abi.encodePacked(\\n        sTools.startSvgRect(\\n          bgSize,\\n          'height=\\\"400\\\" style=\\\"font-family:sans;font-size:4px;text-anchor:middle\\\"',\\n          'id=\\\"rectBg\\\" rx=\\\"3\\\"'\\n        ),\\n        SvgCore.style(bgRect),\\n        svgPart,\\n        SvgCore.endSvg()\\n      );\\n  }\\n\\n  function createToken(uint256 _qty, uint256 _buildType) external payable {\\n    require(maxSupply > _tokenIdCounter.current() + _qty, \\\"Exceed max supply\\\");\\n    require(_buildType < 2, \\\"type must be 0 or 1\\\");\\n    require(_qty * price == msg.value, \\\"Ether amount is not correct\\\");\\n\\n    for (uint256 i = 0; i < _qty; i++) {\\n      uint256 id = _tokenIdCounter.current();\\n      _safeMint(msg.sender, id);\\n      idToService[id] = _buildType;\\n      emit NewIndicator(id);\\n      _tokenIdCounter.increment();\\n    }\\n  }\\n\\n  // The following functions are overrides required by Solidity.\\n\\n  function withdraw() public onlyOwner {\\n    (bool success, ) = msg.sender.call{ value: address(this).balance }(\\\"\\\");\\n    require(success, \\\"Withdrawal failed\\\");\\n  }\\n\\n  receive() external payable {}\\n\\n  // The following functions are overrides required by Solidity.\\n\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) internal override(ERC721, ERC721Enumerable) {\\n    super._beforeTokenTransfer(from, to, tokenId);\\n  }\\n\\n  function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\\n    super._burn(tokenId);\\n  }\\n\\n  function tokenURI(uint256 _tokenId)\\n    public\\n    view\\n    override(ERC721, ERC721URIStorage)\\n    returns (string memory)\\n  {\\n    require(_exists(_tokenId), \\\"Unknown tokenId\\\");\\n    bytes memory service;\\n    if (idToService[_tokenId] == 0) {\\n      service = \\\"SuperFluid\\\";\\n    } else {\\n      service = \\\"Aave\\\";\\n    }\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"data:application/json;base64,\\\",\\n          Base64.encode(\\n            bytes(\\n              abi.encodePacked(\\n                '{\\\"name\\\":\\\"',\\n                name(),\\n                '\\\", \\\"service\\\":\\\"',\\n                service,\\n                '\\\", \\\"image\\\": \\\"',\\n                svgBase64(_tokenId),\\n                '\\\"}'\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    override(ERC721, ERC721Enumerable)\\n    returns (bool)\\n  {\\n    return super.supportsInterface(interfaceId);\\n  }\\n}\\n\",\"keccak256\":\"0xe46c3aa864244027350aec707105d5fe0ad6c4a4b2ebdd790d6a5aa30115b3c4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101445760003560e01c80636352211e116100b6578063a22cb4651161006f578063a22cb46514610370578063b88d4fde14610390578063c0e89254146103b0578063c87b56dd146103d0578063e985e9c5146103f0578063f2fde38b1461043957600080fd5b80636352211e146102c857806367ae5d98146102e857806370a0823114610308578063715018a6146103285780638da5cb5b1461033d57806395d89b411461035b57600080fd5b806323b872dd1161010857806323b872dd146102205780632a805069146102405780632f745c59146102535780633ccfd60b1461027357806342842e0e146102885780634f6ccce7146102a857600080fd5b806301ffc9a71461015057806306fdde0314610185578063081812fc146101a7578063095ea7b3146101df57806318160ddd1461020157600080fd5b3661014b57005b600080fd5b34801561015c57600080fd5b5061017061016b366004611ffc565b610459565b60405190151581526020015b60405180910390f35b34801561019157600080fd5b5061019a61046a565b60405161017c9190612078565b3480156101b357600080fd5b506101c76101c236600461208b565b6104fc565b6040516001600160a01b03909116815260200161017c565b3480156101eb57600080fd5b506101ff6101fa3660046120c0565b610596565b005b34801561020d57600080fd5b506009545b60405190815260200161017c565b34801561022c57600080fd5b506101ff61023b3660046120ea565b6106ab565b6101ff61024e366004612126565b6106dc565b34801561025f57600080fd5b5061021261026e3660046120c0565b610868565b34801561027f57600080fd5b506101ff6108fe565b34801561029457600080fd5b506101ff6102a33660046120ea565b6109b7565b3480156102b457600080fd5b506102126102c336600461208b565b6109d2565b3480156102d457600080fd5b506101c76102e336600461208b565b610a65565b3480156102f457600080fd5b5061019a61030336600461208b565b610adc565b34801561031457600080fd5b50610212610323366004612148565b610de6565b34801561033457600080fd5b506101ff610e6d565b34801561034957600080fd5b50600b546001600160a01b03166101c7565b34801561036757600080fd5b5061019a610ea3565b34801561037c57600080fd5b506101ff61038b366004612163565b610eb2565b34801561039c57600080fd5b506101ff6103ab36600461220e565b610ec1565b3480156103bc57600080fd5b5061019a6103cb36600461208b565b610ef9565b3480156103dc57600080fd5b5061019a6103eb36600461208b565b610f32565b3480156103fc57600080fd5b5061017061040b3660046122b9565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561044557600080fd5b506101ff610454366004612148565b611048565b6000610464826110e0565b92915050565b606060008054610479906122ec565b80601f01602080910402602001604051908101604052809291908181526020018280546104a5906122ec565b80156104f25780601f106104c7576101008083540402835291602001916104f2565b820191906000526020600020905b8154815290600101906020018083116104d557829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b031661057a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006105a182610a65565b9050806001600160a01b0316836001600160a01b03160361060e5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610571565b336001600160a01b038216148061062a575061062a813361040b565b61069c5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610571565b6106a68383611105565b505050565b6106b53382611173565b6106d15760405162461bcd60e51b815260040161057190612326565b6106a683838361126a565b816106e660125490565b6106f0919061238d565b61c350116107345760405162461bcd60e51b8152602060048201526011602482015270457863656564206d617820737570706c7960781b6044820152606401610571565b6002811061077a5760405162461bcd60e51b815260206004820152601360248201527274797065206d7573742062652030206f72203160681b6044820152606401610571565b3461078d678ac7230489e80000846123a5565b146107da5760405162461bcd60e51b815260206004820152601b60248201527f457468657220616d6f756e74206973206e6f7420636f727265637400000000006044820152606401610571565b60005b828110156106a65760006107f060125490565b90506107fc3382611411565b60008181526010602052604090819020849055517f6de139b9d7795964579b56debad708bb40c5588bdd00381459787f834a156eec9061083f9083815260200190565b60405180910390a1610855601280546001019055565b5080610860816123c4565b9150506107dd565b600061087383610de6565b82106108d55760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610571565b506001600160a01b03919091166000908152600760209081526040808320938352929052205490565b600b546001600160a01b031633146109285760405162461bcd60e51b8152600401610571906123dd565b604051600090339047908381818185875af1925050503d806000811461096a576040519150601f19603f3d011682016040523d82523d6000602084013e61096f565b606091505b50509050806109b45760405162461bcd60e51b815260206004820152601160248201527015da5d1a191c985dd85b0819985a5b1959607a1b6044820152606401610571565b50565b6106a683838360405180602001604052806000815250610ec1565b60006109dd60095490565b8210610a405760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610571565b60098281548110610a5357610a53612412565b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b0316806104645760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610571565b6040805160a081018252600080825260056020808401919091528351808501855260078152662372656374426760c81b8183015283850152600d549351630b01875760e41b81526004810191909152600a60248201526947686f7374576869746560b01b6044820152606093849391848301916001600160a01b03169063b018757090606401600060405180830381865afa158015610b7f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ba79190810190612428565b8152600d54604051630b01875760e41b8152602060048083018290526024830152634e61767960e01b6044830152909201916001600160a01b039091169063b018757090606401600060405180830381865afa158015610c0b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c339190810190612428565b90529050610c408461142b565b600d546040805180820182526004808252610dd160e31b60208301529151620135df60e81b81529395506001600160a01b0390921692630135df0092610c889290910161249f565b600060405180830381865afa158015610ca5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ccd9190810190612428565b60405163f43d49a360e01b815273__$72447f1b2f145aca09ac0141c77e8da5f9$__9063f43d49a390610d04908590600401612553565b600060405180830381865af4158015610d21573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d499190810190612428565b8373__$72447f1b2f145aca09ac0141c77e8da5f9$__63bba7e70c6040518163ffffffff1660e01b8152600401600060405180830381865af4158015610d93573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610dbb9190810190612428565b604051602001610dce94939291906125c5565b60405160208183030381529060405292505050919050565b60006001600160a01b038216610e515760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610571565b506001600160a01b031660009081526003602052604090205490565b600b546001600160a01b03163314610e975760405162461bcd60e51b8152600401610571906123dd565b610ea16000611706565b565b606060018054610479906122ec565b610ebd338383611758565b5050565b610ecb3383611173565b610ee75760405162461bcd60e51b815260040161057190612326565b610ef384848484611826565b50505050565b6060610f0c610f0783610adc565b611859565b604051602001610f1c919061261c565b6040516020818303038152906040529050919050565b6000818152600260205260409020546060906001600160a01b0316610f8b5760405162461bcd60e51b815260206004820152600f60248201526e155b9adb9bdddb881d1bdad95b9259608a1b6044820152606401610571565b60008281526010602052604081205460609103610fc9575060408051808201909152600a81526914dd5c195c919b1d5a5960b21b6020820152610fe6565b506040805180820190915260048152634161766560e01b60208201525b611021610ff161046a565b82610ffb86610ef9565b60405160200161100d93929190612661565b604051602081830303815290604052611859565b60405160200161103191906126fe565b604051602081830303815290604052915050919050565b600b546001600160a01b031633146110725760405162461bcd60e51b8152600401610571906123dd565b6001600160a01b0381166110d75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610571565b6109b481611706565b60006001600160e01b0319821663780e9d6360e01b14806104645750610464826119c0565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061113a82610a65565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b03166111ec5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610571565b60006111f783610a65565b9050806001600160a01b0316846001600160a01b0316148061123e57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806112625750836001600160a01b0316611257846104fc565b6001600160a01b0316145b949350505050565b826001600160a01b031661127d82610a65565b6001600160a01b0316146112e15760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610571565b6001600160a01b0382166113435760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610571565b61134e838383611a10565b611359600082611105565b6001600160a01b0383166000908152600360205260408120805460019290611382908490612743565b90915550506001600160a01b03821660009081526003602052604081208054600192906113b090849061238d565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b610ebd828260405180602001604052806000815250611a1b565b6060600061143883611a4e565b604051602001611448919061275a565b60408051808303601f1901815290829052600c54631c76f9bd60e01b83526020600484015260036024840152621cd99b60ea1b60448401529092506000916001600160a01b0390911690631c76f9bd90606401600060405180830381865afa1580156114b8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114e09190810190612428565b604051630e49f2cd60e41b815273__$72447f1b2f145aca09ac0141c77e8da5f9$__9063e49f2cd09061156d90600401604080825260049082015261042560e31b60608201526080602082018190526023908201527f77696474683d22313022206865696768743d2231302220783d2239342220793d60a082015262111a9160e91b60c082015260e00190565b600060405180830381865af415801561158a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115b29190810190612428565b60405163482eac7d60e01b815273__$72447f1b2f145aca09ac0141c77e8da5f9$__9063482eac7d9061162590600401606080825260039082015260006080820181905260a0602083018190526004908301526308dcd99b60e21b60c083015260e0604083018190528201526101000190565b600060405180830381865af4158015611642573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261166a9190810190612428565b73__$72447f1b2f145aca09ac0141c77e8da5f9$__63bba7e70c6040518163ffffffff1660e01b8152600401600060405180830381865af41580156116b3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116db9190810190612428565b6040516020016116ee94939291906125c5565b60408051601f19818403018152919052949350505050565b600b80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316036117b95760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610571565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61183184848461126a565b61183d84848484611b4f565b610ef35760405162461bcd60e51b815260040161057190612787565b6060815160000361187857505060408051602081019091526000815290565b600060405180606001604052806040815260200161288860409139905060006003845160026118a7919061238d565b6118b191906127ef565b6118bc9060046123a5565b905060006118cb82602061238d565b67ffffffffffffffff8111156118e3576118e361219f565b6040519080825280601f01601f19166020018201604052801561190d576020820181803683370190505b509050818152600183018586518101602084015b8183101561197b5760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b93820193909352600401611921565b60038951066001811461199557600281146119a6576119b2565b613d3d60f01b6001198301526119b2565b603d60f81b6000198301525b509398975050505050505050565b60006001600160e01b031982166380ac58cd60e01b14806119f157506001600160e01b03198216635b5e139f60e01b145b8061046457506301ffc9a760e01b6001600160e01b0319831614610464565b6106a6838383611c50565b611a258383611d08565b611a326000848484611b4f565b6106a65760405162461bcd60e51b815260040161057190612787565b606081600003611a755750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611a9f5780611a89816123c4565b9150611a989050600a836127ef565b9150611a79565b60008167ffffffffffffffff811115611aba57611aba61219f565b6040519080825280601f01601f191660200182016040528015611ae4576020820181803683370190505b5090505b841561126257611af9600183612743565b9150611b06600a86612803565b611b1190603061238d565b60f81b818381518110611b2657611b26612412565b60200101906001600160f81b031916908160001a905350611b48600a866127ef565b9450611ae8565b60006001600160a01b0384163b15611c4557604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611b93903390899088908890600401612817565b6020604051808303816000875af1925050508015611bce575060408051601f3d908101601f19168201909252611bcb91810190612854565b60015b611c2b573d808015611bfc576040519150601f19603f3d011682016040523d82523d6000602084013e611c01565b606091505b508051600003611c235760405162461bcd60e51b815260040161057190612787565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611262565b506001949350505050565b6001600160a01b038316611cab57611ca681600980546000838152600a60205260408120829055600182018355919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0155565b611cce565b816001600160a01b0316836001600160a01b031614611cce57611cce8382611e56565b6001600160a01b038216611ce5576106a681611ef3565b826001600160a01b0316826001600160a01b0316146106a6576106a68282611fa2565b6001600160a01b038216611d5e5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610571565b6000818152600260205260409020546001600160a01b031615611dc35760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610571565b611dcf60008383611a10565b6001600160a01b0382166000908152600360205260408120805460019290611df890849061238d565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001611e6384610de6565b611e6d9190612743565b600083815260086020526040902054909150808214611ec0576001600160a01b03841660009081526007602090815260408083208584528252808320548484528184208190558352600890915290208190555b5060009182526008602090815260408084208490556001600160a01b039094168352600781528383209183525290812055565b600954600090611f0590600190612743565b6000838152600a602052604081205460098054939450909284908110611f2d57611f2d612412565b906000526020600020015490508060098381548110611f4e57611f4e612412565b6000918252602080832090910192909255828152600a90915260408082208490558582528120556009805480611f8657611f86612871565b6001900381819060005260206000200160009055905550505050565b6000611fad83610de6565b6001600160a01b039093166000908152600760209081526040808320868452825280832085905593825260089052919091209190915550565b6001600160e01b0319811681146109b457600080fd5b60006020828403121561200e57600080fd5b813561201981611fe6565b9392505050565b60005b8381101561203b578181015183820152602001612023565b83811115610ef35750506000910152565b60008151808452612064816020860160208601612020565b601f01601f19169290920160200192915050565b602081526000612019602083018461204c565b60006020828403121561209d57600080fd5b5035919050565b80356001600160a01b03811681146120bb57600080fd5b919050565b600080604083850312156120d357600080fd5b6120dc836120a4565b946020939093013593505050565b6000806000606084860312156120ff57600080fd5b612108846120a4565b9250612116602085016120a4565b9150604084013590509250925092565b6000806040838503121561213957600080fd5b50508035926020909101359150565b60006020828403121561215a57600080fd5b612019826120a4565b6000806040838503121561217657600080fd5b61217f836120a4565b91506020830135801515811461219457600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156121de576121de61219f565b604052919050565b600067ffffffffffffffff8211156122005761220061219f565b50601f01601f191660200190565b6000806000806080858703121561222457600080fd5b61222d856120a4565b935061223b602086016120a4565b925060408501359150606085013567ffffffffffffffff81111561225e57600080fd5b8501601f8101871361226f57600080fd5b803561228261227d826121e6565b6121b5565b81815288602083850101111561229757600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b600080604083850312156122cc57600080fd5b6122d5836120a4565b91506122e3602084016120a4565b90509250929050565b600181811c9082168061230057607f821691505b60208210810361232057634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600082198211156123a0576123a0612377565b500190565b60008160001904831182151516156123bf576123bf612377565b500290565b6000600182016123d6576123d6612377565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561243a57600080fd5b815167ffffffffffffffff81111561245157600080fd5b8201601f8101841361246257600080fd5b805161247061227d826121e6565b81815285602083850101111561248557600080fd5b612496826020830160208601612020565b95945050505050565b6060815260006124b2606083018461204c565b828103806020850152604682527f6865696768743d2234303022207374796c653d22666f6e742d66616d696c793a60208301527f73616e733b666f6e742d73697a653a3470783b746578742d616e63686f723a6d60408301526534b23236329160d11b606083015260808101604085015250601260808201527134b21e913932b1ba21339110393c1e91199160711b60a082015260c0810191505092915050565b6020815260ff825116602082015260ff60208301511660408201526000604083015160a0606084015261258960c084018261204c565b90506060840151601f19808584030160808601526125a7838361204c565b925060808601519150808584030160a086015250612496828261204c565b600085516125d7818460208a01612020565b8551908301906125eb818360208a01612020565b85519101906125fe818360208901612020565b8451910190612611818360208801612020565b019695505050505050565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c00000000000081526000825161265481601a850160208701612020565b91909101601a0192915050565b683d913730b6b2911d1160b91b81528351600090612686816009850160208901612020565b6d1116101139b2b93b34b1b2911d1160911b60099184019182015284516126b4816017840160208901612020565b6c1116101134b6b0b3b2911d101160991b6017929091019182015283516126e2816024840160208801612020565b61227d60f01b6024929091019182015260260195945050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161273681601d850160208701612020565b91909101601d0192915050565b60008282101561275557612755612377565b500390565b64706f6f6c7960d81b81526000825161277a816005850160208701612020565b9190910160050192915050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b6000826127fe576127fe6127d9565b500490565b600082612812576128126127d9565b500690565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061284a9083018461204c565b9695505050505050565b60006020828403121561286657600080fd5b815161201981611fe6565b634e487b7160e01b600052603160045260246000fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa264697066735822122059a0d8111d403608bb8456b585cadb9865eaaf7e1195b394f778afd1debea00664736f6c634300080d0033",
  "libraries": {
    "SvgCore": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 838,
        "contract": "contracts/Indicators.sol:Indicators",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 840,
        "contract": "contracts/Indicators.sol:Indicators",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 844,
        "contract": "contracts/Indicators.sol:Indicators",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 848,
        "contract": "contracts/Indicators.sol:Indicators",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 852,
        "contract": "contracts/Indicators.sol:Indicators",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 858,
        "contract": "contracts/Indicators.sol:Indicators",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2209,
        "contract": "contracts/Indicators.sol:Indicators",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1827,
        "contract": "contracts/Indicators.sol:Indicators",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1831,
        "contract": "contracts/Indicators.sol:Indicators",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1834,
        "contract": "contracts/Indicators.sol:Indicators",
        "label": "_allTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1838,
        "contract": "contracts/Indicators.sol:Indicators",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/Indicators.sol:Indicators",
        "label": "_owner",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 7265,
        "contract": "contracts/Indicators.sol:Indicators",
        "label": "svgWidgets",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(ISvgWidgets)4804"
      },
      {
        "astId": 7268,
        "contract": "contracts/Indicators.sol:Indicators",
        "label": "sTools",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(ISvgTools)4716"
      },
      {
        "astId": 7271,
        "contract": "contracts/Indicators.sol:Indicators",
        "label": "sCFA",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(ISCFA)7224"
      },
      {
        "astId": 7274,
        "contract": "contracts/Indicators.sol:Indicators",
        "label": "sALP",
        "offset": 0,
        "slot": "15",
        "type": "t_contract(IAaveLP)7250"
      },
      {
        "astId": 7278,
        "contract": "contracts/Indicators.sol:Indicators",
        "label": "idToService",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7287,
        "contract": "contracts/Indicators.sol:Indicators",
        "label": "stAddress",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_struct(STAddresss)7283_storage)dyn_storage"
      },
      {
        "astId": 7312,
        "contract": "contracts/Indicators.sol:Indicators",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "18",
        "type": "t_struct(Counter)2903_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(STAddresss)7283_storage)dyn_storage": {
        "base": "t_struct(STAddresss)7283_storage",
        "encoding": "dynamic_array",
        "label": "struct Indicators.STAddresss[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IAaveLP)7250": {
        "encoding": "inplace",
        "label": "contract IAaveLP",
        "numberOfBytes": "20"
      },
      "t_contract(ISCFA)7224": {
        "encoding": "inplace",
        "label": "contract ISCFA",
        "numberOfBytes": "20"
      },
      "t_contract(ISvgTools)4716": {
        "encoding": "inplace",
        "label": "contract ISvgTools",
        "numberOfBytes": "20"
      },
      "t_contract(ISvgWidgets)4804": {
        "encoding": "inplace",
        "label": "contract ISvgWidgets",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2903_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2902,
            "contract": "contracts/Indicators.sol:Indicators",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(STAddresss)7283_storage": {
        "encoding": "inplace",
        "label": "struct Indicators.STAddresss",
        "members": [
          {
            "astId": 7280,
            "contract": "contracts/Indicators.sol:Indicators",
            "label": "stName",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes_storage"
          },
          {
            "astId": 7282,
            "contract": "contracts/Indicators.sol:Indicators",
            "label": "addr",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}