{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "contract SVGColor",
          "name": "_svgColor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "example",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "generate",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "owners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "render",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "svgColor",
      "outputs": [
        {
          "internalType": "contract SVGColor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf192437a820176ddf33f46ace8effcae5b050d222eca6dda528a9f641b45f480",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "1480325",
    "logsBloom": "0x
    "blockHash": "0x73126c165f20db6f008272e423f8ff68233ccebfac4599e11695961a83cf0dde",
    "transactionHash": "0xf192437a820176ddf33f46ace8effcae5b050d222eca6dda528a9f641b45f480",
    "logs": [],
    "blockNumber": 3,
    "cumulativeGasUsed": "1480325",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512"
  ],
  "numDeployments": 1,
  "solcInputHash": "1d5a56a1078f935190c56fe6e8e932bb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract SVGColor\",\"name\":\"_svgColor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"example\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"generate\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"render\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"svgColor\",\"outputs\":[{\"internalType\":\"contract SVGColor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PoolyPFPRenderer.sol\":\"PoolyPFPRenderer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@pooly-cards/svg-lib-sol/contracts/SVG.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./SVGUtils.sol\\\";\\n/**\\n    * @title SVG\\n    * @notice SVG construction library (credit: wintw1nt3r-eth)\\n    * @author Kames Geraghty\\n*/\\nlibrary svg {\\n    using Strings for uint256;\\n    using Strings for uint8;\\n\\n    function g(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el('g', _props, _children);\\n    }\\n\\n    function path(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el('path', _props, _children);\\n    }\\n\\n    function text(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el('text', _props, _children);\\n    }\\n\\n    function line(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el('line', _props, _children);\\n    }\\n\\n    function circle(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el('circle', _props, _children);\\n    }\\n\\n    function circle(string memory _props)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el('circle', _props);\\n    }\\n\\n    function rect(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el('rect', _props, _children);\\n    }\\n\\n    function rect(string memory _props)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el('rect', _props);\\n    }\\n    \\n    function stop(string memory _props)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el('stop', _props);\\n    }\\n\\n    function filter(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el('filter', _props, _children);\\n    }\\n    \\n    function defs(string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el('defs', \\\"\\\", _children);\\n    }\\n\\n    function cdata(string memory _content)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat('<![CDATA[', _content, ']]>');\\n    }\\n\\n    /* GRADIENTS */\\n    function radialGradient(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el('radialGradient', _props, _children);\\n    }\\n\\n    function linearGradient(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el('linearGradient', _props, _children);\\n    }\\n\\n    function gradientStop(\\n        uint256 offset,\\n        string memory stopColor,\\n        string memory _props\\n    ) internal pure returns (string memory) {\\n        return\\n            el(\\n                'stop',\\n                string.concat(\\n                    prop('stop-color', stopColor),\\n                    ' ',\\n                    prop('offset', string.concat(svgUtils.uint2str(offset), '%')),\\n                    ' ',\\n                    _props\\n                )\\n            );\\n    }\\n\\n    function animateTransform(string memory _props)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el('animateTransform', _props);\\n    }\\n\\n    function image(string memory _href, string memory _props)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return\\n            el(\\n                'image',\\n                string.concat(prop('href', _href), ' ', _props)\\n            );\\n    }\\n\\n    function start(\\n    ) internal pure returns (string memory) {\\n        return string.concat(\\n            '<svg width=\\\"400\\\" height=\\\"400\\\" style=\\\"background:#541563\\\" ', 'viewBox=\\\"0 0 400 400\\\"', 'xmlns=\\\"http://www.w3.org/2000/svg\\\" ','>'\\n        );\\n    }\\n\\n    function end(\\n    ) internal pure returns (bytes memory) {\\n        return('</svg>');\\n    }\\n\\n    /* COMMON */\\n    // A generic element, can be used to construct any SVG (or HTML) element\\n    function el(\\n        string memory _tag,\\n        string memory _props,\\n        string memory _children\\n    ) internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                '<',\\n                _tag,\\n                ' ',\\n                _props,\\n                '>',\\n                _children,\\n                '</',\\n                _tag,\\n                '>'\\n            );\\n    }\\n\\n    // A generic element, can be used to construct any SVG (or HTML) element without children\\n    function el(\\n        string memory _tag,\\n        string memory _props\\n    ) internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                '<',\\n                _tag,\\n                ' ',\\n                _props,\\n                '/>'\\n            );\\n    }\\n\\n    // an SVG attribute\\n    function prop(string memory _key, string memory _val)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(_key, '=', '\\\"', _val, '\\\" ');\\n    }\\n\\n    function stringifyIntSet(\\n        bytes memory _data,\\n        uint256 _offset,\\n        uint256 _len\\n    ) public pure returns (bytes memory) { \\n        bytes memory res;\\n        require (_data.length >= _offset + _len, 'Out of range');\\n        for (uint i = _offset ; i < _offset + _len ; i++) {\\n            res = abi.encodePacked(\\n                res,\\n                byte2uint8(_data, i).toString(),\\n                ' '\\n            );\\n        }\\n        return res;\\n    }\\n\\n    function byte2uint8(\\n        bytes memory _data,\\n        uint256 _offset\\n    ) public pure returns (uint8) { \\n        require (_data.length > _offset, 'Out of range');\\n        return uint8(_data[_offset]);\\n    }\\n}\\n\",\"keccak256\":\"0xc676413f21dcb09febe9961644b2f522f8cc9da4617340b648fb0c3e94c6805c\",\"license\":\"MIT\"},\"@pooly-cards/svg-lib-sol/contracts/SVGColor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\n\\ncontract SVGColor {\\n    using Strings for uint256;\\n    using Strings for uint8;\\n\\n    mapping(string => bytes) public colors;\\n\\n    constructor () {\\n        colors[\\\"Black\\\"] = hex'000000'; \\n        colors[\\\"White\\\"] = hex'FFFFFF'; \\n        colors[\\\"SFRed\\\"] = hex'E02020'; \\n        colors[\\\"SFGreen\\\"] = hex'10BB34'; \\n        colors[\\\"Aave1\\\"] = hex'B6509E';\\n        colors[\\\"Aave2\\\"] = hex'2EBAC6';\\n        colors[\\\"Navy\\\"] = hex'000080'; \\n        colors[\\\"MediumBlue\\\"] = hex'0000CD'; \\n        colors[\\\"Green\\\"] = hex'008000'; \\n        colors[\\\"DarkGreen\\\"] = hex'006400'; \\n        colors[\\\"Maroon\\\"] = hex'800000'; \\n        colors[\\\"Red\\\"] = hex'FF0000'; \\n        colors[\\\"Lime\\\"] = hex'00FF00'; \\n        colors[\\\"DarkGrey\\\"] = hex'A9A9A9'; \\n        colors[\\\"Gold\\\"] = hex'FFD700'; \\n        colors[\\\"Yellow\\\"] = hex'FFFF00'; \\n        colors[\\\"Blue\\\"] = hex'0000FF'; \\n        colors[\\\"GhostWhite\\\"] = hex'F8F8FF'; \\n        colors[\\\"LightGrey\\\"] = hex'D3D3D3'; \\n        colors[\\\"DarkViolet\\\"] = hex'9400D3'; \\n    }\\n\\n    /* -------------------------------------\\n    *  Various helpers\\n       ------------------------------------- */\\n    function getColor(string memory _colorName)\\n    public view returns (bytes memory) {\\n        require(colors[_colorName].length == 3, \\\"Unknown color\\\");\\n        return abi.encodePacked(colors[_colorName], hex'64');\\n    }\\n    \\n    function getColor(string memory _colorName, uint8 _alpha)\\n    public view returns (bytes memory) {\\n        require(colors[_colorName].length == 3, \\\"Unknown color\\\");\\n        return abi.encodePacked(colors[_colorName], _alpha);\\n    }\\n    \\n    function getRgba(string memory _colorName)\\n    public view returns (string memory) {\\n        return string(toRgba(getColor(_colorName), 0));\\n    }\\n    \\n    \\n    // Input: array of colors (without alpha)\\n    // Ouputs a linearGradient\\n    function autoLinearGradient(\\n        bytes memory _colors,\\n        bytes memory _id,\\n        bytes memory _customAttributes\\n    )\\n    public view returns (bytes memory) {\\n        return this.autoLinearGradient(\\\"\\\", _colors, _id, _customAttributes);\\n    }\\n    function autoLinearGradient(\\n        bytes memory _coordinates,\\n        bytes memory _colors,\\n        bytes memory _id,\\n        bytes memory _customAttributes\\n    )\\n    external view returns (bytes memory) {\\n        bytes memory _b;\\n        if (_coordinates.length > 3 ) {\\n            _b = abi.encodePacked(\\n                uint8(128),\\n                _coordinates\\n            );\\n        } else {\\n            _b = hex'00';\\n        }\\n        // Count the number of colors passed, each on 4 byte\\n        uint256 colorCount = _colors.length / 4;\\n        uint8 i = 0;\\n        while (i < colorCount) {\\n            _b = abi.encodePacked(\\n                _b,\\n                uint8(i * (100 / (colorCount - 1))) , // grad. stop %\\n                uint8(_colors[i*4]),\\n                uint8(_colors[i*4 + 1]),\\n                uint8(_colors[i*4 + 2]),\\n                uint8(_colors[i*4 + 3])\\n           );\\n           i++;\\n        }\\n        return linearGradient(_b, _id, _customAttributes);\\n    } \\n\\n\\n    // Converts uint value to 'decimal' text\\n    function round2Txt(\\n        uint256 _value,\\n        uint8 _decimals,\\n        uint8 _prec\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            (_value / 10 ** _decimals).toString(), \\n            \\\".\\\",\\n            ( _value / 10 ** (_decimals - _prec) -\\n                _value / 10 ** (_decimals ) * 10 ** _prec\\n            ).toString()\\n        );\\n    }\\n\\n    function linearGradient(\\n        bytes memory _lg,\\n        bytes memory _id,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        bytes memory grdata; \\n        uint8 offset = 1;\\n\\n        if (uint8(_lg[0]) & 128 == 128) {\\n            grdata = abi.encodePacked(\\n                'x1=\\\"',\\n                byte2uint8(_lg, 1).toString(),\\n                '%\\\" x2=\\\"',\\n                byte2uint8(_lg, 2).toString(),\\n                '%\\\" y1=\\\"',\\n                byte2uint8(_lg, 3).toString(),\\n                '%\\\" y2=\\\"',\\n                byte2uint8(_lg, 4).toString(), '%\\\"'\\n            );\\n            offset = 5;\\n        }\\n        grdata = abi.encodePacked(\\n            '<linearGradient id=\\\"',\\n            _id,\\n            '\\\" ',\\n            _customAttributes,\\n            grdata,\\n            \\\">\\\"\\n        );\\n        for (uint i = offset ; i < _lg.length ; i+=5) {\\n            grdata = abi.encodePacked(\\n                grdata,\\n                '<stop offset=\\\"',\\n                byte2uint8(_lg, i).toString(),\\n                '%\\\" stop-color=\\\"',\\n                toRgba(_lg, i+1),\\n                '\\\" id=\\\"',\\n                _id,\\n                byte2uint8(_lg, i).toString(),\\n                '\\\"/>'\\n            );\\n        }\\n        return abi.encodePacked(grdata, '</linearGradient>');\\n    }\\n\\n\\n    function toRgba(\\n        bytes memory _rgba,\\n        uint256 offset\\n    ) public pure returns (bytes memory){\\n\\n        return abi.encodePacked(\\n            \\\"rgba(\\\",\\n            byte2uint8(_rgba, offset).toString(), \\\",\\\",\\n            byte2uint8(_rgba, offset + 1).toString(), \\\",\\\",\\n            byte2uint8(_rgba, offset + 2).toString(), \\\",\\\",\\n            byte2uint8(_rgba, offset + 3).toString(),\\n            \\\"%)\\\"\\n        );\\n    }\\n\\n    function byte2uint8(\\n        bytes memory _data,\\n        uint256 _offset\\n    ) public pure returns (uint8) { \\n        require (_data.length > _offset, 'Out of range');\\n        return uint8(_data[_offset]);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x994f4cedb1629f5601ec4b221593da6145eb2397ac9f35a4a6a22dd58bbb935c\",\"license\":\"MIT\"},\"@pooly-cards/svg-lib-sol/contracts/SVGUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\n// Core utils used extensively to format CSS and numbers.\\nlibrary svgUtils {\\n    /// @notice used to simulate empty strings\\n    string internal constant NULL = \\\"\\\";\\n\\n    /// @notice formats a CSS variable line. includes a semicolon for formatting.\\n    function setCssVar(string memory _key, string memory _val)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(\\\"--\\\", _key, \\\":\\\", _val, \\\";\\\");\\n    }\\n\\n    // formats getting a css variable\\n    function getCssVar(string memory _key)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(\\\"var(--\\\", _key, \\\")\\\");\\n    }\\n\\n    // formats getting a def URL\\n    function getDefURL(string memory _id)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(\\\"url(#\\\", _id, \\\")\\\");\\n    }\\n\\n    // formats rgba white with a specified opacity / alpha\\n    function white_a(uint256 _a) internal pure returns (string memory) {\\n        return rgba(255, 255, 255, _a);\\n    }\\n\\n    // formats rgba black with a specified opacity / alpha\\n    function black_a(uint256 _a) internal pure returns (string memory) {\\n        return rgba(0, 0, 0, _a);\\n    }\\n\\n    // formats generic rgba color in css\\n    function rgba(\\n        uint256 _r,\\n        uint256 _g,\\n        uint256 _b,\\n        uint256 _a\\n    ) internal pure returns (string memory) {\\n        string memory formattedA = _a < 100\\n            ? string.concat(\\\"0.\\\", uint2str(_a))\\n            : \\\"1\\\";\\n        return\\n            string.concat(\\n                \\\"rgba(\\\",\\n                uint2str(_r),\\n                \\\",\\\",\\n                uint2str(_g),\\n                \\\",\\\",\\n                uint2str(_b),\\n                \\\",\\\",\\n                formattedA,\\n                \\\")\\\"\\n            );\\n    }\\n\\n    // checks if two strings are equal\\n    function stringsEqual(string memory _a, string memory _b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return\\n            keccak256(abi.encodePacked(_a)) == keccak256(abi.encodePacked(_b));\\n    }\\n\\n    // returns the length of a string in characters\\n    function utfStringLength(string memory _str)\\n        internal\\n        pure\\n        returns (uint256 length)\\n    {\\n        uint256 i = 0;\\n        bytes memory string_rep = bytes(_str);\\n\\n        while (i < string_rep.length) {\\n            if (string_rep[i] >> 7 == 0) i += 1;\\n            else if (string_rep[i] >> 5 == bytes1(uint8(0x6))) i += 2;\\n            else if (string_rep[i] >> 4 == bytes1(uint8(0xE))) i += 3;\\n            else if (string_rep[i] >> 3 == bytes1(uint8(0x1E)))\\n                i += 4;\\n                //For safety\\n            else i += 1;\\n\\n            length++;\\n        }\\n    }\\n\\n    // converts an unsigned integer to a string\\n    function uint2str(uint256 _i)\\n        internal\\n        pure\\n        returns (string memory _uintAsString)\\n    {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n}\\n\",\"keccak256\":\"0x61c31a7ae4af7ebba344c8a57d7ea885be369d314d546be1ffae7473a9a707b3\",\"license\":\"MIT\"},\"contracts/PoolyPFPRenderer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\nimport \\\"@pooly-cards/svg-lib-sol/contracts/SVG.sol\\\";\\nimport \\\"@pooly-cards/svg-lib-sol/contracts/SVGColor.sol\\\";\\nimport \\\"@pooly-cards/svg-lib-sol/contracts/SVGUtils.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract PoolyPFPRenderer {\\n\\n  ERC20 public token;\\n  SVGColor public svgColor;\\n\\n  mapping(uint256 => address) public owners;\\n\\n  constructor(ERC20 _token, SVGColor _svgColor) public {\\n    token = _token;\\n    svgColor = _svgColor;\\n    owners[0] = msg.sender;\\n    owners[1] = msg.sender;\\n  }\\n\\n  function render(uint256 _tokenId) public view returns (string memory) {\\n    address _owner = owners[_tokenId];\\n    string memory _symbol = token.symbol(); \\n    string memory _name = token.name();\\n    uint256 _decimals = token.decimals();\\n    uint256 _balance = token.balanceOf(_owner);\\n    uint256 _viewB = _balance / (10 ** _decimals);\\n    return\\n      string(\\n        abi.encodePacked(\\n          svg.start(),\\n          svg.defs(\\n            svg.linearGradient(\\n              string.concat(\\n                svg.prop(\\\"id\\\", \\\"myGradient\\\"),\\n                svg.prop(\\\"gradientTransform\\\", \\\"rotate(140)\\\")\\n              ),\\n              string.concat(\\n                svg.stop(\\n                  string.concat(\\n                    svg.prop(\\\"offset\\\", \\\"0%\\\"),\\n                    svg.prop(\\\"stop-color\\\", svgColor.getRgba(\\\"Aave1\\\"))\\n                  )\\n                ),\\n                svg.stop(\\n                  string.concat(\\n                    svg.prop(\\\"offset\\\", \\\"100%\\\"),\\n                    svg.prop(\\\"stop-color\\\", svgColor.getRgba(\\\"Aave2\\\"))\\n                  )\\n                )\\n              )\\n            )\\n          ),\\n          svg.rect(\\n            string.concat(\\n              svg.prop(\\\"fill\\\", \\\"url('#myGradient')\\\"),\\n              svg.prop(\\\"x\\\", \\\"0\\\"),\\n              svg.prop(\\\"y\\\", \\\"0\\\"),\\n              svg.prop(\\\"width\\\", \\\"100%\\\"),\\n              svg.prop(\\\"height\\\", \\\"100%\\\")\\n            ),\\n            svgUtils.NULL\\n          ),\\n          svg.text(\\n            string.concat(\\n              svg.prop(\\\"x\\\", \\\"20\\\"),\\n              svg.prop(\\\"y\\\", \\\"40\\\"),\\n              svg.prop(\\\"font-size\\\", \\\"22\\\"),\\n              svg.prop(\\\"fill\\\", \\\"white\\\")\\n            ),\\n            string.concat(svg.cdata(\\\"Pooly PFP #\\\"), svgUtils.uint2str(_tokenId))\\n          ),\\n          svg.image(\\n            \\\"https://github.com/friends-of-pooly/pooly-assets/blob/main/general/cooly.png?raw=true\\\", \\n            string.concat(\\n              svg.prop(\\\"x\\\", \\\"5%\\\"),\\n              svg.prop(\\\"y\\\", \\\"25%\\\"),\\n              svg.prop(\\\"width\\\", \\\"50%\\\"),\\n              svg.prop(\\\"height\\\", \\\"50%\\\")\\n            )\\n          ),\\n          svg.text(\\n            string.concat(\\n              svg.prop(\\\"x\\\", \\\"5%\\\"),\\n              svg.prop(\\\"y\\\", \\\"90%\\\"),\\n              svg.prop(\\\"fill\\\", \\\"white\\\"),\\n              svg.prop(\\\"font-weight\\\", \\\"bold\\\")\\n            ),\\n            _symbol\\n            // string.concat(svg.cdata(\\\"token:\\\"), _symbol)\\n          ),\\n          svg.text(\\n            string.concat(\\n              svg.prop(\\\"x\\\", \\\"50%\\\"),\\n              svg.prop(\\\"y\\\", \\\"90%\\\"),\\n              svg.prop(\\\"fill\\\", \\\"white\\\")\\n            ),\\n            string.concat(svg.cdata(\\\"balance:\\\"), svgUtils.uint2str(_viewB))\\n          ),\\n          svg.end()\\n        )\\n      );\\n  }\\n\\n  function example() external view returns (string memory) {\\n    return render(1);\\n  }\\n\\n  function generate(uint256 id) external pure returns (string memory) {\\n    return \\\"test\\\";\\n  }\\n}\\n\",\"keccak256\":\"0xf95ccc93af884e75afc924d8a58d9e5934fbf030c6f784cd4ff6880683dc6f66\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c8063025e7c27146100675780634a7dd523146100ad57806354353f2f146100e75780635942fda9146100ef578063c321118c14610102578063fc0c546a14610115575b600080fd5b6100906100753660046110c5565b6002602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100da6100bb3660046110c5565b506040805180820190915260048152631d195cdd60e21b602082015290565b6040516100a4919061110e565b6100da610128565b600154610090906001600160a01b031681565b6100da6101103660046110c5565b610139565b600054610090906001600160a01b031681565b60606101346001610139565b905090565b60008181526002602052604080822054825482516395d89b4160e01b815292516060946001600160a01b03938416949093909216916395d89b4191600480830192869291908290030181865afa158015610197573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101bf9190810190611157565b905060008060009054906101000a90046001600160a01b03166001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610215573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261023d9190810190611157565b905060008060009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610293573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b79190611204565b600080546040516370a0823160e01b81526001600160a01b03888116600483015260ff949094169450919216906370a0823190602401602060405180830381865afa15801561030a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032e9190611227565b9050600061033d83600a61133c565b6103479083611348565b9050610351610cdd565b61060a61060561039d604051806040016040528060028152602001611a5960f21b8152506040518060400160405280600a8152602001691b5e51dc98591a595b9d60b21b815250610da6565b6103f3604051806040016040528060118152602001706772616469656e745472616e73666f726d60781b8152506040518060400160405280600b81526020016a726f74617465283134302960a81b815250610da6565b60405160200161040492919061136a565b604051602081830303815290604052610530610458604051806040016040528060068152602001651bd9999cd95d60d21b81525060405180604001604052806002815260200161302560f01b815250610da6565b604080518082018252600a81526939ba37b816b1b7b637b960b11b60208201526001549151630cde589160e41b815261050b926001600160a01b03169063cde58910906104c190600401602080825260059082015264416176653160d81b604082015260600190565b600060405180830381865afa1580156104de573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105069190810190611157565b610da6565b60405160200161051c92919061136a565b604051602081830303815290604052610dd3565b6105e0610577604051806040016040528060068152602001651bd9999cd95d60d21b815250604051806040016040528060048152602001633130302560e01b815250610da6565b604080518082018252600a81526939ba37b816b1b7b637b960b11b60208201526001549151630cde589160e41b815261050b926001600160a01b03169063cde58910906104c19060040160208082526005908201526420b0bb329960d91b604082015260600190565b6040516020016105f192919061136a565b604051602081830303815290604052610dfb565b610e35565b61078e61065d60405180604001604052806004815260200163199a5b1b60e21b8152506040518060400160405280601281526020017175726c2827236d794772616469656e74272960701b815250610da6565b610699604051806040016040528060018152602001600f60fb1b815250604051806040016040528060018152602001600360fc1b815250610da6565b6106d5604051806040016040528060018152602001607960f81b815250604051806040016040528060018152602001600360fc1b815250610da6565b610718604051806040016040528060058152602001640eed2c8e8d60db1b815250604051806040016040528060048152602001633130302560e01b815250610da6565b61075c604051806040016040528060068152602001651a195a59da1d60d21b815250604051806040016040528060048152602001633130302560e01b815250610da6565b604051602001610770959493929190611399565b60408051601f19818403018152602083019091526000825290610e6d565b6109096107ce604051806040016040528060018152602001600f60fb1b81525060405180604001604052806002815260200161032360f41b815250610da6565b61080b604051806040016040528060018152602001607960f81b81525060405180604001604052806002815260200161034360f41b815250610da6565b61085060405180604001604052806009815260200168666f6e742d73697a6560b81b81525060405180604001604052806002815260200161191960f11b815250610da6565b61089360405180604001604052806004815260200163199a5b1b60e21b81525060405180604001604052806005815260200164776869746560d81b815250610da6565b6040516020016108a69493929190611404565b60408051601f19818403018152828201909152600b82526a506f6f6c7920504650202360a81b6020830152906108db90610e96565b6108e48e610ebf565b6040516020016108f592919061136a565b604051602081830303815290604052610feb565b610a4c60405180608001604052806055815260200161179260559139610962604051806040016040528060018152602001600f60fb1b81525060405180604001604052806002815260200161352560f01b815250610da6565b6109a0604051806040016040528060018152602001607960f81b8152506040518060400160405280600381526020016232352560e81b815250610da6565b6109e2604051806040016040528060058152602001640eed2c8e8d60db1b8152506040518060400160405280600381526020016235302560e81b815250610da6565b610a25604051806040016040528060068152602001651a195a59da1d60d21b8152506040518060400160405280600381526020016235302560e81b815250610da6565b604051602001610a389493929190611404565b604051602081830303815290604052611014565b610b7e610a8c604051806040016040528060018152602001600f60fb1b81525060405180604001604052806002815260200161352560f01b815250610da6565b610aca604051806040016040528060018152602001607960f81b8152506040518060400160405280600381526020016239302560e81b815250610da6565b610b0d60405180604001604052806004815260200163199a5b1b60e21b81525060405180604001604052806005815260200164776869746560d81b815250610da6565b610b566040518060400160405280600b81526020016a199bdb9d0b5dd95a59da1d60aa1b81525060405180604001604052806004815260200163189bdb1960e21b815250610da6565b604051602001610b699493929190611404565b6040516020818303038152906040528b610feb565b610c8d610bbf604051806040016040528060018152602001600f60fb1b8152506040518060400160405280600381526020016235302560e81b815250610da6565b610bfd604051806040016040528060018152602001607960f81b8152506040518060400160405280600381526020016239302560e81b815250610da6565b610c4060405180604001604052806004815260200163199a5b1b60e21b81525060405180604001604052806005815260200164776869746560d81b815250610da6565b604051602001610c529392919061145b565b60408051601f1981840301815282820190915260088252673130b630b731b29d60c11b602083015290610c8490610e96565b6108e48a610ebf565b6040805180820190915260068152651e17b9bb339f60d11b6020820152604051602001610cc198979695949392919061149e565b6040516020818303038152906040529650505050505050919050565b6060604051602001610d92907f3c7376672077696474683d2234303022206865696768743d223430302220737481527f796c653d226261636b67726f756e643a233534313536332220000000000000006020820152743b34b2bba137bc1e91181018101a1818101a18181160591b60398201527f786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f7376604e8201526203391160ed1b606e820152601f60f91b607182015260720190565b604051602081830303815290604052905090565b60608282604051602001610dbb929190611543565b60405160208183030381529060405290505b92915050565b6060610dcd60405180604001604052806004815260200163073746f760e41b8152508361107f565b6060610e2e6040518060400160405280600e81526020016d1b1a5b99585c91dc98591a595b9d60921b8152508484611094565b9392505050565b6060610dcd604051806040016040528060048152602001636465667360e01b8152506040518060200160405280600081525084611094565b6060610e2e604051806040016040528060048152602001631c9958dd60e21b8152508484611094565b606081604051602001610ea99190611598565b6040516020818303038152906040529050919050565b606081600003610ee65750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610f105780610efa816115d6565b9150610f099050600a83611348565b9150610eea565b60008167ffffffffffffffff811115610f2b57610f2b611141565b6040519080825280601f01601f191660200182016040528015610f55576020820181803683370190505b509050815b8515610fe257610f6b6001826115ef565b90506000610f7a600a88611348565b610f8590600a611606565b610f8f90886115ef565b610f9a906030611625565b905060008160f81b905080848481518110610fb757610fb761164a565b60200101906001600160f81b031916908160001a905350610fd9600a89611348565b97505050610f5a565b50949350505050565b6060610e2e604051806040016040528060048152602001631d195e1d60e21b8152508484611094565b6060610e2e60405180604001604052806005815260200164696d61676560d81b81525061105d60405180604001604052806004815260200163343932b360e11b81525086610da6565b8460405160200161106f929190611660565b6040516020818303038152906040525b60608282604051602001610dbb92919061169c565b6060838383866040516020016110ad94939291906116f4565b60405160208183030381529060405290509392505050565b6000602082840312156110d757600080fd5b5035919050565b60005b838110156110f95781810151838201526020016110e1565b83811115611108576000848401525b50505050565b602081526000825180602084015261112d8160408501602087016110de565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561116957600080fd5b815167ffffffffffffffff8082111561118157600080fd5b818401915084601f83011261119557600080fd5b8151818111156111a7576111a7611141565b604051601f8201601f19908116603f011681019083821181831017156111cf576111cf611141565b816040528281528760208487010111156111e857600080fd5b6111f98360208301602088016110de565b979650505050505050565b60006020828403121561121657600080fd5b815160ff81168114610e2e57600080fd5b60006020828403121561123957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600181600019825b808611156112925782820483111561127857611278611240565b8086161561128557928202925b94851c949180029161125e565b50509250929050565b6000826112aa57506001610dcd565b816112b757506000610dcd565b81600181146112cd57600281146112d7576112f3565b6001915050610dcd565b60ff8411156112e8576112e8611240565b50506001821b610dcd565b5060208310610133831016604e8410600b8410161715611316575081810a610dcd565b6113208383611256565b806000190482111561133457611334611240565b029392505050565b6000610e2e838361129b565b60008261136557634e487b7160e01b600052601260045260246000fd5b500490565b6000835161137c8184602088016110de565b8351908301906113908183602088016110de565b01949350505050565b600086516113ab818460208b016110de565b8651908301906113bf818360208b016110de565b86519101906113d2818360208a016110de565b85519101906113e58183602089016110de565b84519101906113f88183602088016110de565b01979650505050505050565b60008551611416818460208a016110de565b85519083019061142a818360208a016110de565b855191019061143d8183602089016110de565b84519101906114508183602088016110de565b019695505050505050565b6000845161146d8184602089016110de565b8451908301906114818183602089016110de565b84519101906114948183602088016110de565b0195945050505050565b6000895160206114b18285838f016110de565b8a51918401916114c48184848f016110de565b8a519201916114d68184848e016110de565b89519201916114e88184848d016110de565b88519201916114fa8184848c016110de565b875192019161150c8184848b016110de565b865192019161151e8184848a016110de565b855192019161153081848489016110de565b919091019b9a5050505050505050505050565b600083516115558184602088016110de565b603d60f81b908301908152601160f91b6001820152835161157d8160028401602088016110de565b61011160f51b60029290910191820152600401949350505050565b683c215b43444154415b60b81b8152600082516115bc8160098501602087016110de565b622eae9f60e91b6009939091019283015250600c01919050565b6000600182016115e8576115e8611240565b5060010190565b60008282101561160157611601611240565b500390565b600081600019048311821515161561162057611620611240565b500290565b600060ff821660ff84168060ff0382111561164257611642611240565b019392505050565b634e487b7160e01b600052603260045260246000fd5b600083516116728184602088016110de565b600160fd1b90830190815283516116908160018401602088016110de565b01600101949350505050565b600f60fa1b8152600083516116b88160018501602088016110de565b600160fd1b60019184019182015283516116d98160028401602088016110de565b61179f60f11b60029290910191820152600401949350505050565b600f60fa1b815260008551611710816001850160208a016110de565b600160fd1b6001918401918201528551611731816002840160208a016110de565b808201915050601f60f91b8060028301528551611755816003850160208a016110de565b600181840101925050613c2f60f01b6002830152845161177c8160048501602089016110de565b6004920191820152600501969550505050505056fe68747470733a2f2f6769746875622e636f6d2f667269656e64732d6f662d706f6f6c792f706f6f6c792d6173736574732f626c6f622f6d61696e2f67656e6572616c2f636f6f6c792e706e673f7261773d74727565a2646970667358221220242cddd7a2d776a6d74d18c8bbc0d00281f1e26b49230bfb50c3763e239250c064736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7795,
        "contract": "contracts/PoolyPFPRenderer.sol:PoolyPFPRenderer",
        "label": "token",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ERC20)709"
      },
      {
        "astId": 7798,
        "contract": "contracts/PoolyPFPRenderer.sol:PoolyPFPRenderer",
        "label": "svgColor",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(SVGColor)4285"
      },
      {
        "astId": 7802,
        "contract": "contracts/PoolyPFPRenderer.sol:PoolyPFPRenderer",
        "label": "owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ERC20)709": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_contract(SVGColor)4285": {
        "encoding": "inplace",
        "label": "contract SVGColor",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}