{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "name": "example",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "generate",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "render",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xae1240a39b6411328b459f7e0eb60f4800fb120b189169bd198e6efcf0ff429f",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "604951",
    "logsBloom": "0x
    "blockHash": "0x8598cead275733c9d5bcfb24cd9fffd7dad549a1ba6fd97bf26c9f8582d81591",
    "transactionHash": "0xae1240a39b6411328b459f7e0eb60f4800fb120b189169bd198e6efcf0ff429f",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "604951",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "64574b2683b1488f2b90db84107a9d68",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"example\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"generate\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"render\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PoolyPFPRenderer.sol\":\"PoolyPFPRenderer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@pooly-cards/svg-lib-sol/contracts/SVG.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\nimport './Utils.sol';\\n\\n// Core SVG utilitiy library which helps us construct\\n// onchain SVG's with a simple, web-like API.\\nlibrary svg {\\n    /* MAIN ELEMENTS */\\n    function g(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el('g', _props, _children);\\n    }\\n\\n    function path(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el('path', _props, _children);\\n    }\\n\\n    function text(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el('text', _props, _children);\\n    }\\n\\n    function line(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el('line', _props, _children);\\n    }\\n\\n    function circle(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el('circle', _props, _children);\\n    }\\n\\n    function circle(string memory _props)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el('circle', _props);\\n    }\\n\\n    function rect(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el('rect', _props, _children);\\n    }\\n\\n    function rect(string memory _props)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el('rect', _props);\\n    }\\n\\n    function filter(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el('filter', _props, _children);\\n    }\\n\\n    function cdata(string memory _content)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat('<![CDATA[', _content, ']]>');\\n    }\\n\\n    /* GRADIENTS */\\n    function radialGradient(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el('radialGradient', _props, _children);\\n    }\\n\\n    function linearGradient(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el('linearGradient', _props, _children);\\n    }\\n\\n    function gradientStop(\\n        uint256 offset,\\n        string memory stopColor,\\n        string memory _props\\n    ) internal pure returns (string memory) {\\n        return\\n            el(\\n                'stop',\\n                string.concat(\\n                    prop('stop-color', stopColor),\\n                    ' ',\\n                    prop('offset', string.concat(utils.uint2str(offset), '%')),\\n                    ' ',\\n                    _props\\n                )\\n            );\\n    }\\n\\n    function animateTransform(string memory _props)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el('animateTransform', _props);\\n    }\\n\\n    function image(string memory _href, string memory _props)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return\\n            el(\\n                'image',\\n                string.concat(prop('href', _href), ' ', _props)\\n            );\\n    }\\n\\n    /* COMMON */\\n    // A generic element, can be used to construct any SVG (or HTML) element\\n    function el(\\n        string memory _tag,\\n        string memory _props,\\n        string memory _children\\n    ) internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                '<',\\n                _tag,\\n                ' ',\\n                _props,\\n                '>',\\n                _children,\\n                '</',\\n                _tag,\\n                '>'\\n            );\\n    }\\n\\n    // A generic element, can be used to construct any SVG (or HTML) element without children\\n    function el(\\n        string memory _tag,\\n        string memory _props\\n    ) internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                '<',\\n                _tag,\\n                ' ',\\n                _props,\\n                '/>'\\n            );\\n    }\\n\\n    // an SVG attribute\\n    function prop(string memory _key, string memory _val)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(_key, '=', '\\\"', _val, '\\\" ');\\n    }\\n}\\n\",\"keccak256\":\"0x24590c8dcc114696b90d6d68e8da63a36b0cf04d194f64dd9d7c6cccac4ef0e7\",\"license\":\"MIT\"},\"@pooly-cards/svg-lib-sol/contracts/Utils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\n// Core utils used extensively to format CSS and numbers.\\nlibrary utils {\\n    // used to simulate empty strings\\n    string internal constant NULL = '';\\n\\n    // formats a CSS variable line. includes a semicolon for formatting.\\n    function setCssVar(string memory _key, string memory _val)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat('--', _key, ':', _val, ';');\\n    }\\n\\n    // formats getting a css variable\\n    function getCssVar(string memory _key)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat('var(--', _key, ')');\\n    }\\n\\n    // formats getting a def URL\\n    function getDefURL(string memory _id)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat('url(#', _id, ')');\\n    }\\n\\n    // formats rgba white with a specified opacity / alpha\\n    function white_a(uint256 _a) internal pure returns (string memory) {\\n        return rgba(255, 255, 255, _a);\\n    }\\n\\n    // formats rgba black with a specified opacity / alpha\\n    function black_a(uint256 _a) internal pure returns (string memory) {\\n        return rgba(0, 0, 0, _a);\\n    }\\n\\n    // formats generic rgba color in css\\n    function rgba(\\n        uint256 _r,\\n        uint256 _g,\\n        uint256 _b,\\n        uint256 _a\\n    ) internal pure returns (string memory) {\\n        string memory formattedA = _a < 100\\n            ? string.concat('0.', utils.uint2str(_a))\\n            : '1';\\n        return\\n            string.concat(\\n                'rgba(',\\n                utils.uint2str(_r),\\n                ',',\\n                utils.uint2str(_g),\\n                ',',\\n                utils.uint2str(_b),\\n                ',',\\n                formattedA,\\n                ')'\\n            );\\n    }\\n\\n    // checks if two strings are equal\\n    function stringsEqual(string memory _a, string memory _b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return\\n            keccak256(abi.encodePacked(_a)) == keccak256(abi.encodePacked(_b));\\n    }\\n\\n    // returns the length of a string in characters\\n    function utfStringLength(string memory _str)\\n        internal\\n        pure\\n        returns (uint256 length)\\n    {\\n        uint256 i = 0;\\n        bytes memory string_rep = bytes(_str);\\n\\n        while (i < string_rep.length) {\\n            if (string_rep[i] >> 7 == 0) i += 1;\\n            else if (string_rep[i] >> 5 == bytes1(uint8(0x6))) i += 2;\\n            else if (string_rep[i] >> 4 == bytes1(uint8(0xE))) i += 3;\\n            else if (string_rep[i] >> 3 == bytes1(uint8(0x1E)))\\n                i += 4;\\n                //For safety\\n            else i += 1;\\n\\n            length++;\\n        }\\n    }\\n\\n    // converts an unsigned integer to a string\\n    function uint2str(uint256 _i)\\n        internal\\n        pure\\n        returns (string memory _uintAsString)\\n    {\\n        if (_i == 0) {\\n            return '0';\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n}\\n\",\"keccak256\":\"0x3d349e802ef5db83738d348c646c41fe2ff3da48899728768bec9a52592456b9\",\"license\":\"MIT\"},\"contracts/PoolyPFPRenderer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\nimport \\\"@pooly-cards/svg-lib-sol/contracts/SVG.sol\\\";\\nimport \\\"@pooly-cards/svg-lib-sol/contracts/Utils.sol\\\";\\n\\ncontract PoolyPFPRenderer {\\n  function render(uint256 _tokenId) public pure returns (string memory) {\\n    return\\n      string.concat(\\n        '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"300\\\" height=\\\"300\\\" style=\\\"background:#541563\\\">',\\n        svg.text(\\n          string.concat(\\n            svg.prop(\\\"x\\\", \\\"20\\\"),\\n            svg.prop(\\\"y\\\", \\\"40\\\"),\\n            svg.prop(\\\"font-size\\\", \\\"22\\\"),\\n            svg.prop(\\\"fill\\\", \\\"white\\\")\\n          ),\\n          string.concat(svg.cdata(\\\"Pooly PFP #\\\"), utils.uint2str(_tokenId))\\n        ),\\n        svg.rect(\\n          string.concat(\\n            svg.prop(\\\"fill\\\", \\\"purple\\\"),\\n            svg.prop(\\\"x\\\", \\\"20\\\"),\\n            svg.prop(\\\"y\\\", \\\"50\\\"),\\n            svg.prop(\\\"width\\\", utils.uint2str(160)),\\n            svg.prop(\\\"height\\\", utils.uint2str(10))\\n          ),\\n          utils.NULL\\n        ),\\n        \\\"</svg>\\\"\\n      );\\n  }\\n\\n  function example() external pure returns (string memory) {\\n    return render(1);\\n  }\\n\\n  function generate(uint256 id) external pure returns (string memory) {\\n    return \\\"test\\\";\\n  }\\n}\\n\",\"keccak256\":\"0x0f6242af4352373c7f964d695fc6e6a0d1e9a315d9abce5721f4037a5749d67f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506109fa806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634a7dd5231461004657806354353f2f14610089578063c321118c14610091575b600080fd5b610073610054366004610599565b506040805180820190915260048152631d195cdd60e21b602082015290565b60405161008091906105e2565b60405180910390f35b6100736100a4565b61007361009f366004610599565b6100b5565b60606100b060016100b5565b905090565b60606102326100f7604051806040016040528060018152602001600f60fb1b81525060405180604001604052806002815260200161032360f41b8152506103a8565b610134604051806040016040528060018152602001607960f81b81525060405180604001604052806002815260200161034360f41b8152506103a8565b61017960405180604001604052806009815260200168666f6e742d73697a6560b81b81525060405180604001604052806002815260200161191960f11b8152506103a8565b6101bc60405180604001604052806004815260200163199a5b1b60e21b81525060405180604001604052806005815260200164776869746560d81b8152506103a8565b6040516020016101cf9493929190610615565b60408051601f19818403018152828201909152600b82526a506f6f6c7920504650202360a81b602083015290610204906103d4565b61020d856103e7565b60405160200161021e92919061066c565b604051602081830303815290604052610513565b61038161027960405180604001604052806004815260200163199a5b1b60e21b81525060405180604001604052806006815260200165707572706c6560d01b8152506103a8565b6102b6604051806040016040528060018152602001600f60fb1b81525060405180604001604052806002815260200161032360f41b8152506103a8565b6102f3604051806040016040528060018152602001607960f81b81525060405180604001604052806002815260200161035360f41b8152506103a8565b610323604051806040016040528060058152602001640eed2c8e8d60db1b81525061031e60a06103e7565b6103a8565b61034f604051806040016040528060068152602001651a195a59da1d60d21b81525061031e600a6103e7565b60405160200161036395949392919061069b565b60408051601f19818403018152602083019091526000825290610543565b604051602001610392929190610706565b6040516020818303038152906040529050919050565b606082826040516020016103bd9291906107c0565b604051602081830303815290604052905092915050565b6060816040516020016103929190610815565b60608160000361040e5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610438578061042281610869565b91506104319050600a83610882565b9150610412565b60008167ffffffffffffffff811115610453576104536108a4565b6040519080825280601f01601f19166020018201604052801561047d576020820181803683370190505b509050815b851561050a576104936001826108ba565b905060006104a2600a88610882565b6104ad90600a6108d1565b6104b790886108ba565b6104c29060306108f0565b905060008160f81b9050808484815181106104df576104df610915565b60200101906001600160f81b031916908160001a905350610501600a89610882565b97505050610482565b50949350505050565b606061053c604051806040016040528060048152602001631d195e1d60e21b8152508484610568565b9392505050565b606061053c604051806040016040528060048152602001631c9958dd60e21b81525084845b606083838386604051602001610581949392919061092b565b60405160208183030381529060405290509392505050565b6000602082840312156105ab57600080fd5b5035919050565b60005b838110156105cd5781810151838201526020016105b5565b838111156105dc576000848401525b50505050565b60208152600082518060208401526106018160408501602087016105b2565b601f01601f19169190910160400192915050565b60008551610627818460208a016105b2565b85519083019061063b818360208a016105b2565b855191019061064e8183602089016105b2565b84519101906106618183602088016105b2565b019695505050505050565b6000835161067e8184602088016105b2565b8351908301906106928183602088016105b2565b01949350505050565b600086516106ad818460208b016105b2565b8651908301906106c1818360208b016105b2565b86519101906106d4818360208a016105b2565b85519101906106e78183602089016105b2565b84519101906106fa8183602088016105b2565b01979650505050505050565b7f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323081527f30302f737667222077696474683d2233303022206865696768743d223330302260208201527f207374796c653d226261636b67726f756e643a23353431353633223e0000000060408201526000835161078a81605c8501602088016105b2565b8351908301906107a181605c8401602088016105b2565b651e17b9bb339f60d11b605c9290910191820152606201949350505050565b600083516107d28184602088016105b2565b603d60f81b908301908152601160f91b600182015283516107fa8160028401602088016105b2565b61011160f51b60029290910191820152600401949350505050565b683c215b43444154415b60b81b8152600082516108398160098501602087016105b2565b622eae9f60e91b6009939091019283015250600c01919050565b634e487b7160e01b600052601160045260246000fd5b60006001820161087b5761087b610853565b5060010190565b60008261089f57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b6000828210156108cc576108cc610853565b500390565b60008160001904831182151516156108eb576108eb610853565b500290565b600060ff821660ff84168060ff0382111561090d5761090d610853565b019392505050565b634e487b7160e01b600052603260045260246000fd5b600f60fa1b815260008551610947816001850160208a016105b2565b600160fd1b6001918401918201528551610968816002840160208a016105b2565b808201915050601f60f91b806002830152855161098c816003850160208a016105b2565b613c2f60f01b6003939091019283015284516109af8160058501602089016105b2565b6005920191820152600601969550505050505056fea2646970667358221220f24be8354f00fbdc1f77f01df3d1dd3b1fe779c8b6228dfed296a6ebb13011ba64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80634a7dd5231461004657806354353f2f14610089578063c321118c14610091575b600080fd5b610073610054366004610599565b506040805180820190915260048152631d195cdd60e21b602082015290565b60405161008091906105e2565b60405180910390f35b6100736100a4565b61007361009f366004610599565b6100b5565b60606100b060016100b5565b905090565b60606102326100f7604051806040016040528060018152602001600f60fb1b81525060405180604001604052806002815260200161032360f41b8152506103a8565b610134604051806040016040528060018152602001607960f81b81525060405180604001604052806002815260200161034360f41b8152506103a8565b61017960405180604001604052806009815260200168666f6e742d73697a6560b81b81525060405180604001604052806002815260200161191960f11b8152506103a8565b6101bc60405180604001604052806004815260200163199a5b1b60e21b81525060405180604001604052806005815260200164776869746560d81b8152506103a8565b6040516020016101cf9493929190610615565b60408051601f19818403018152828201909152600b82526a506f6f6c7920504650202360a81b602083015290610204906103d4565b61020d856103e7565b60405160200161021e92919061066c565b604051602081830303815290604052610513565b61038161027960405180604001604052806004815260200163199a5b1b60e21b81525060405180604001604052806006815260200165707572706c6560d01b8152506103a8565b6102b6604051806040016040528060018152602001600f60fb1b81525060405180604001604052806002815260200161032360f41b8152506103a8565b6102f3604051806040016040528060018152602001607960f81b81525060405180604001604052806002815260200161035360f41b8152506103a8565b610323604051806040016040528060058152602001640eed2c8e8d60db1b81525061031e60a06103e7565b6103a8565b61034f604051806040016040528060068152602001651a195a59da1d60d21b81525061031e600a6103e7565b60405160200161036395949392919061069b565b60408051601f19818403018152602083019091526000825290610543565b604051602001610392929190610706565b6040516020818303038152906040529050919050565b606082826040516020016103bd9291906107c0565b604051602081830303815290604052905092915050565b6060816040516020016103929190610815565b60608160000361040e5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610438578061042281610869565b91506104319050600a83610882565b9150610412565b60008167ffffffffffffffff811115610453576104536108a4565b6040519080825280601f01601f19166020018201604052801561047d576020820181803683370190505b509050815b851561050a576104936001826108ba565b905060006104a2600a88610882565b6104ad90600a6108d1565b6104b790886108ba565b6104c29060306108f0565b905060008160f81b9050808484815181106104df576104df610915565b60200101906001600160f81b031916908160001a905350610501600a89610882565b97505050610482565b50949350505050565b606061053c604051806040016040528060048152602001631d195e1d60e21b8152508484610568565b9392505050565b606061053c604051806040016040528060048152602001631c9958dd60e21b81525084845b606083838386604051602001610581949392919061092b565b60405160208183030381529060405290509392505050565b6000602082840312156105ab57600080fd5b5035919050565b60005b838110156105cd5781810151838201526020016105b5565b838111156105dc576000848401525b50505050565b60208152600082518060208401526106018160408501602087016105b2565b601f01601f19169190910160400192915050565b60008551610627818460208a016105b2565b85519083019061063b818360208a016105b2565b855191019061064e8183602089016105b2565b84519101906106618183602088016105b2565b019695505050505050565b6000835161067e8184602088016105b2565b8351908301906106928183602088016105b2565b01949350505050565b600086516106ad818460208b016105b2565b8651908301906106c1818360208b016105b2565b86519101906106d4818360208a016105b2565b85519101906106e78183602089016105b2565b84519101906106fa8183602088016105b2565b01979650505050505050565b7f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323081527f30302f737667222077696474683d2233303022206865696768743d223330302260208201527f207374796c653d226261636b67726f756e643a23353431353633223e0000000060408201526000835161078a81605c8501602088016105b2565b8351908301906107a181605c8401602088016105b2565b651e17b9bb339f60d11b605c9290910191820152606201949350505050565b600083516107d28184602088016105b2565b603d60f81b908301908152601160f91b600182015283516107fa8160028401602088016105b2565b61011160f51b60029290910191820152600401949350505050565b683c215b43444154415b60b81b8152600082516108398160098501602087016105b2565b622eae9f60e91b6009939091019283015250600c01919050565b634e487b7160e01b600052601160045260246000fd5b60006001820161087b5761087b610853565b5060010190565b60008261089f57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b6000828210156108cc576108cc610853565b500390565b60008160001904831182151516156108eb576108eb610853565b500290565b600060ff821660ff84168060ff0382111561090d5761090d610853565b019392505050565b634e487b7160e01b600052603260045260246000fd5b600f60fa1b815260008551610947816001850160208a016105b2565b600160fd1b6001918401918201528551610968816002840160208a016105b2565b808201915050601f60f91b806002830152855161098c816003850160208a016105b2565b613c2f60f01b6003939091019283015284516109af8160058501602089016105b2565b6005920191820152600601969550505050505056fea2646970667358221220f24be8354f00fbdc1f77f01df3d1dd3b1fe779c8b6228dfed296a6ebb13011ba64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}