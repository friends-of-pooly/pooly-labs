{
  "address": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sTools",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_id",
          "type": "bytes"
        }
      ],
      "name": "includeSymbolEye",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_id",
          "type": "bytes"
        }
      ],
      "name": "includeSymbolGaugeArc",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_id",
          "type": "bytes"
        }
      ],
      "name": "includeSymbolGaugeV",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_id",
          "type": "bytes"
        }
      ],
      "name": "includeSymbolSFLogo",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x05d6b04dab3b9059fb84ae6cd54dd263b432c040071a8d5df1f45f5b96a28b3c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
    "transactionIndex": 0,
    "gasUsed": "808569",
    "logsBloom": "0x
    "blockHash": "0xccf85a78ebf5984281dceff5b678d97be563bdaf5338c2bc116c9c3f45cbc131",
    "transactionHash": "0x05d6b04dab3b9059fb84ae6cd54dd263b432c040071a8d5df1f45f5b96a28b3c",
    "logs": [],
    "blockNumber": 7,
    "cumulativeGasUsed": "808569",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707"
  ],
  "numDeployments": 1,
  "solcInputHash": "1d5a56a1078f935190c56fe6e8e932bb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sTools\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_id\",\"type\":\"bytes\"}],\"name\":\"includeSymbolEye\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_id\",\"type\":\"bytes\"}],\"name\":\"includeSymbolGaugeArc\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_id\",\"type\":\"bytes\"}],\"name\":\"includeSymbolGaugeV\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_id\",\"type\":\"bytes\"}],\"name\":\"includeSymbolSFLogo\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@pooly-cards/svg-lib-sol/contracts/libraries/SvgWidgets.sol\":\"SvgWidgets\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@pooly-cards/svg-lib-sol/contracts/interfaces/ISvgTools.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface ISvgTools {\\n    function getColor(string memory) external view returns (bytes memory);\\n    function getColor(string memory, uint8 )\\n    external view returns (bytes memory);\\n    function toEthTxt(uint256, uint8) external pure returns (bytes memory);\\n    function autoLinearGradient(bytes memory, bytes memory, bytes memory)\\n    external view returns (bytes memory);\\n    function autoLinearGradient(bytes memory, bytes memory, bytes memory, bytes memory)\\n    external view returns (bytes memory);\\n    function startSvgRect(bytes memory, bytes memory, bytes memory)\\n    external view returns (bytes memory);\\n    function round2Txt(uint256, uint8, uint8)\\n    external pure returns (bytes memory);\\n}\",\"keccak256\":\"0x43b1c920638398b06549e06e6a0705927fbaa21f27850ab96666497cfb2159bb\",\"license\":\"MIT\"},\"@pooly-cards/svg-lib-sol/contracts/libraries/SvgCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n\\n// General format for shapes:\\n// [0] : options splitted in bits extracted with & mask (so can be cumulative).\\n//       Following the principle of least surprise.\\n//       if i & 1 == 0   : ending tag '/>', else just '>' (you must close the tag)\\n//       if i & 2 == 0   : uses svgPrefix (i`svgPrefix_`0, ..)\\n//                         Otherwise no class nor id prefix (i0, c0) \\n//\\n\\n// svgStyle is a structure used by style() that returns a '<style ... >' block\\n// svgStyle.conf:\\n// if bit 8 is set, fill is a css selector. Else, default: rgba on 4 bytes\\n// if bit 7 is set, stroke is a css selector. Else, default rgba on 4 bytes\\n// In other words:\\n//     if i & 1 == 1: [1] is a text containing a css selector \\n//       and produces 'fill:url(#id)' where #id is #i`conf.prefix`_n\\n//       else: \\n//         [1], [2], [3], [4] : fill:RGBA\\n//     if i & 2 == 2: stroke contain a css selector at [2] or [5] depending \\n//       on the option i & 1 above\\nstruct svgStyle {\\n    uint8 conf; \\n    uint8 stroke_width;\\n    bytes element; // target element to apply the style\\n    bytes fill;    // rgba or plain id string\\n    bytes stroke;  // rgba or plain id string\\n}\\n\\n\\n// AnimTransfType is used by animateTransform\\nenum AnimTransfType { translate, scale, rotate, skewX, skewY }\\n\\nlibrary SvgCore {\\n\\n    using Strings for uint256;\\n    using Strings for uint8;\\n\\n    // Open <svg> tag\\n    // _vBSize defines the viewBox in 4 bytes\\n    //   [0] x\\n    //   [1] y\\n    //   [2] length\\n    //   [3] width\\n    // accepts custom attributes in _customAttributes\\n    function startSvg(\\n        bytes memory _vBSize,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<svg ',\\n            'viewBox=\\\"',\\n            stringifyIntSet(_vBSize, 0, 4),\\n            '\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" ',\\n            _customAttributes,\\n            '>'\\n        );\\n    }\\n\\n    // Close </svg> tag\\n    function endSvg(\\n    ) public pure returns (bytes memory) {\\n        return('</svg>');\\n    }\\n\\n    // <g _customAttributes></g> tag encloses _b\\n    function defs(\\n        bytes memory _b,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<g ',\\n            _customAttributes,\\n            '>',\\n            _b,\\n            '</g>'\\n        );\\n    }\\n    // <defs></defs> tag encloses _b\\n    function defs(\\n        bytes memory _b\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<defs>',\\n            _b,\\n            '</defs>'\\n        );\\n    }\\n    // returns a <symbol id=...>_content</symbol>\\n    function symbol(\\n        bytes memory _id,\\n        bytes memory _content\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<symbol id=\\\"',\\n            _id,\\n            '\\\">',\\n            _content,\\n            '</symbol>'\\n        );\\n    }\\n\\n    // <mask id=\\\"_id\\\">_b<mask> tag encloses _b\\n    // accepts custom attributes in _customAttributes\\n    function mask(\\n        bytes memory _b,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<mask ',\\n            _customAttributes,\\n            '>',\\n            _b,\\n            '</mask>'\\n        );\\n    }\\n\\n    // Takes 4 bytes starting from the given offset\\n    // Returns css' 'rgba(r,v,b,a%)'\\n    // so alpha should be between 0 and 100\\n    function toRgba(\\n        bytes memory _rgba,\\n        uint256 offset\\n    ) public pure returns (bytes memory){\\n\\n        return abi.encodePacked(\\n            \\\"rgba(\\\",\\n            byte2uint8(_rgba, offset).toString(), \\\",\\\",\\n            byte2uint8(_rgba, offset + 1).toString(), \\\",\\\",\\n            byte2uint8(_rgba, offset + 2).toString(), \\\",\\\",\\n            byte2uint8(_rgba, offset + 3).toString(),\\n            \\\"%)\\\"\\n        );\\n    }\\n\\n    // defines a style for '_element' class or id string (eg. '#iprefix_1') \\n    // colors are defined in 4 bytes ; red,green,blue,alpha OR url(#id)\\n    // then if set stroke color (RGBA or #id),\\n    // then if set stroke-width\\n    // see idoc about svgStyle.conf in the struct def.\\n    // note: As \\\"_element\\\" is a free string you can pass \\\"svg\\\" for a default style\\n    function style(\\n        svgStyle memory _style\\n    ) public pure returns (bytes memory) {\\n        return style(_style, '');\\n    }\\n    function style(\\n        svgStyle memory _style,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n            bytes memory attributes; \\n\\n            attributes = abi.encodePacked(\\n                '<style>', \\n                _style.element, '{fill:');\\n            if (_style.conf & 1 == 1) {\\n                attributes = abi.encodePacked(\\n                    attributes,\\n                    'url(',\\n                    _style.fill,\\n                    ');'\\n                );\\n            } else {\\n                if (_style.fill.length == 4) {\\n                    attributes = abi.encodePacked(\\n                        attributes,\\n                        toRgba(_style.fill, 0), ';'\\n                    );\\n                } else {\\n                    attributes = abi.encodePacked(\\n                        attributes,\\n                        'none;'\\n                    );\\n                }\\n            }\\n            if (_style.conf & 2 == 2) {\\n                attributes = abi.encodePacked(\\n                    attributes,\\n                    'stroke:url(',\\n                    _style.stroke,\\n                    ');'\\n                );\\n            } else {\\n                if (_style.stroke.length == 4) {\\n                    attributes = abi.encodePacked(\\n                        attributes,\\n                        'stroke:',\\n                        toRgba(_style.stroke, 0),\\n                        ';'\\n                    );\\n                }\\n            }\\n            attributes = abi.encodePacked(\\n                attributes,\\n                'stroke-width:',\\n                _style.stroke_width.toString(),\\n                ';'\\n            );\\n            return abi.encodePacked(\\n                attributes,\\n                _customAttributes,\\n                '}</style>'\\n            );\\n    }\\n\\n    // Returns a line element.\\n    // _coord:\\n    //   [0] : General format applies\\n    //   [1] : x1 \\n    //   [2] : y1\\n    //   [3] : x2\\n    //   [4] : y2\\n    function line(\\n        bytes memory _coord,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        // add .0001 is a workaround for stroke filling\\n        // doesn'n work on horizontal and vertical lines\\n        return abi.encodePacked(\\n            '<line x1=\\\"',\\n            byte2uint8(_coord, 1).toString(),\\n            '.0001\\\" y1=\\\"',\\n            byte2uint8(_coord, 2).toString(),\\n            '.0001\\\" x2=\\\"',\\n            byte2uint8(_coord, 3).toString(),\\n            '\\\" y2=\\\"',\\n            byte2uint8(_coord, 4).toString(),\\n                '\\\" ',\\n            _customAttributes,\\n            endingtag(_coord)\\n        );\\n    }\\n    // Returns a polyline: Variable length ; \\\"infinite\\\" coordinates\\n    // _coords:\\n    //   [0] : General format applies\\n    //   [1],[2] x,y 1st point\\n    //   [3],[4] x,y 2nd point\\n    //   [5],[6] x,y 3rd point\\n    //   ... , ...\\n    // Define one or more lines depending on the number of parameters\\n    function polyline(\\n        bytes memory _coords,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n\\n        return abi.encodePacked(\\n            '<polyline  points=\\\"', \\n            stringifyIntSet(_coords, 1, _coords.length - 1),\\n            '\\\" ',\\n            _customAttributes,\\n            endingtag(_coords)\\n        );\\n    }\\n\\n    // Returns a rectangle\\n    // _r:\\n    //   [0] : General format applies\\n    //   [1],[2] x,y 1st point\\n    //   [3],[4] width, height\\n    function rect(\\n        bytes memory _r,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n\\n        return abi.encodePacked(\\n            '<rect x=\\\"', \\n            byte2uint8(_r, 1).toString(),\\n            '\\\" y=\\\"',\\n            byte2uint8(_r, 2).toString(),\\n            '\\\" width=\\\"',\\n            byte2uint8(_r, 3).toString(),\\n            '\\\" height=\\\"',\\n            byte2uint8(_r, 4).toString(),\\n            '\\\" ',\\n            _customAttributes,\\n            endingtag(_r)\\n        );\\n    }\\n\\n    // Returns a polygon, with a variable number of points\\n    // _p:\\n    //   [0] : General format applies\\n    //   [1],[2] x,y 1st point\\n    //   [3],[4] x,y 2nd point\\n    //   [5],[6] x,y 3rd point\\n    //   ... , ...\\n    // Define one or more lines depending on the number of parameters\\n    function polygon(\\n        bytes memory _p,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n\\n        return abi.encodePacked(\\n            '<polygon points=\\\"',\\n            stringifyIntSet(_p, 1, _p.length -1),\\n            '\\\" ',\\n            _customAttributes,\\n            endingtag(_p)\\n        );\\n    }\\n\\n    // Returns a circle\\n    // _c:\\n    //   [0] : General format applies\\n    //   [1] : cx \\n    //   [2] : cy Where cx,cy defines the center.\\n    //   [3] : r = radius\\n    function circle(\\n        bytes memory _c,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<circle ', \\n            'cx=\\\"', \\n            byte2uint8(_c, 1).toString(),\\n            '\\\" cy=\\\"',\\n            byte2uint8(_c, 2).toString(),\\n            '\\\" r=\\\"',\\n            byte2uint8(_c, 3).toString(),\\n            '\\\" ',\\n            _customAttributes,\\n            endingtag(_c)\\n        );  \\n    }\\n\\n    // Returns an ellipse\\n    // _e:\\n    //   [0] : General format applies\\n    //   [1] : cx \\n    //   [2] : cy Where cx,cy defines the center.\\n    //   [3] : rx = X radius\\n    //   [4] : ry = Y radius\\n    function ellipse(\\n        bytes memory _e,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<ellipse ',\\n            'cx=\\\"',\\n            byte2uint8(_e, 1).toString(),\\n            '\\\" cy=\\\"',\\n            byte2uint8(_e, 2).toString(),\\n            '\\\" rx=\\\"',\\n            byte2uint8(_e, 3).toString(),\\n            '\\\" ry=\\\"',\\n            byte2uint8(_e, 4).toString(),\\n            '\\\" ',\\n            _customAttributes,\\n            endingtag(_e)\\n        );  \\n    }\\n\\n\\n    // Returns a <use href='#id' ...\\n    // _coord:\\n    //   [0] : General format applies\\n    //   [1],[2] x,y\\n    function use(\\n        bytes memory _coord,\\n        bytes memory _href,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<use ', \\n            'href=\\\"',\\n            _href,\\n            '\\\" x=\\\"',\\n            byte2uint8(_coord, 1).toString(),\\n            '\\\" y=\\\"',\\n            byte2uint8(_coord, 2).toString(),\\n            '\\\" ',\\n            _customAttributes,\\n            endingtag(_coord)\\n        );\\n    }\\n\\n    // Returns a linearGradient\\n    //  _lg:\\n    //   [0] General format applies but adds an option:\\n    //   [0] if i & 128:\\n    //      [3] x1\\n    //      [4] x2\\n    //      [5] y1\\n    //      [6] y2\\n    //      [7..10] RGBA\\n    //      [11] offset %\\n    //      [12..15] RGBA\\n    //      [16] offset %\\n    //      [...]\\n    //   else: RGBA starts at [3]\\n    // Define a linear gradient, better used in a <defs> tag. \\n    // Applied to an object with 'fill:url(#id)'\\n    // Then loops, offset + RGBA = 5 bytes \\n    function linearGradient(\\n        bytes memory _lg,\\n        bytes memory _id,\\n        bytes memory _customAttributes\\n    ) external pure returns (bytes memory) {\\n        bytes memory grdata; \\n        uint8 offset = 1;\\n\\n        if (uint8(_lg[0]) & 128 == 128) {\\n            grdata = abi.encodePacked(\\n                'x1=\\\"',\\n                byte2uint8(_lg, 1).toString(),\\n                '%\\\" x2=\\\"',\\n                byte2uint8(_lg, 2).toString(),\\n                '%\\\" y1=\\\"',\\n                byte2uint8(_lg, 3).toString(),\\n                '%\\\" y2=\\\"',\\n                byte2uint8(_lg, 4).toString(), '%\\\"'\\n            );\\n            offset = 5;\\n        }\\n        grdata = abi.encodePacked(\\n            '<linearGradient id=\\\"',\\n            _id,\\n            '\\\" ',\\n            _customAttributes,\\n            grdata,\\n            '>'\\n        );\\n        for (uint i = offset ; i < _lg.length ; i+=5) {\\n            grdata = abi.encodePacked(\\n                grdata,\\n                '<stop offset=\\\"',\\n                byte2uint8(_lg, i).toString(),\\n                '%\\\" stop-color=\\\"',\\n                toRgba(_lg, i+1),\\n                '\\\" id=\\\"',\\n                _id,\\n                byte2uint8(_lg, i).toString(),\\n                '\\\"/>'\\n            );\\n        }\\n        return abi.encodePacked(grdata, '</linearGradient>');\\n    }\\n\\n    // Returns a <text ...>_text</text> block\\n    // Non standard ; _b only contains coordinates.\\n    function text(\\n        bytes memory _b,\\n        bytes memory _text,\\n        bytes memory _customAttributes\\n    ) external pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<text x=\\\"', \\n            byte2uint8(_b, 0).toString(),\\n            '\\\" y=\\\"',\\n            byte2uint8(_b, 1).toString(),\\n            '\\\" ',\\n            _customAttributes,\\n            '>',\\n            _text,\\n            '</text>'\\n        );\\n\\n    }\\n\\n    // Returns animate\\n    // Non standard function.\\n    // _b contains the 'values' Svg field.\\n    //   [0] : number of byte element per tuple\\n    //   [1:] values\\n    // the tuples are separated by ';'.\\n    // _element refers to the id to apply the animation\\n    // _attr contains the attribute name set to 'attribute'\\n    // _element is the target element to animate\\n    // _attr the attribute to animate\\n    // _duration of the animation is in seconds\\n    // repeatCount's default is 'indefinite'\\n    function animate(\\n        bytes memory _b,\\n        bytes memory _element,\\n        bytes memory _attr,\\n        uint8 _duration,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return animate(_b, _element, _attr, _duration, 0, _customAttributes);\\n    }\\n\\n    function animate(\\n        bytes memory _b,\\n        bytes memory _element,\\n        bytes memory _attr,\\n        uint8 _duration,\\n        uint8 _repeatCount,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<animate href=\\\"',\\n            _element,\\n            '\\\" attributeName=\\\"',\\n            _attr,\\n            '\\\" values=\\\"',\\n            tuples2ValueMatrix(_b),\\n            '\\\" dur=\\\"',\\n            _duration.toString(),\\n            's\\\" repeatCount=\\\"',\\n            repeatCount(_repeatCount),\\n            '\\\" ',\\n            _customAttributes,\\n            '/>'\\n        );\\n    }\\n\\n    // Returns animateTransform\\n    // _b is the same as in animate\\n    // AnimTransfType is an enum: {translate, scale, rotate, skewX, skewY}\\n    function animateTransform(\\n        bytes memory _b,\\n        bytes memory _element,\\n        AnimTransfType _type,\\n        uint8 _duration,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return animateTransform(_b, _element, _type, _duration, 0, _customAttributes);\\n    }\\n\\n    function animateTransform(\\n        bytes memory _b,\\n        bytes memory _element,\\n        AnimTransfType _type,\\n        uint8 _duration,\\n        uint8 _repeatCount,\\n        bytes memory _customAttributes\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            '<animateTransform href=\\\"',\\n            _element,\\n            '\\\" attributeName=\\\"transform\\\" type=\\\"',\\n            animTransfType(_type),\\n            '\\\" dur=\\\"',\\n            _duration.toString(),\\n            's\\\" repeatCount=\\\"',\\n            repeatCount(_repeatCount),\\n            '\\\" values=\\\"',\\n            tuples2ValueMatrix(_b),\\n            '\\\" ',\\n            _customAttributes,\\n            '/>'\\n        );\\n    }\\n\\n    // Returns 'type' for animateTransform \\n    function animTransfType(AnimTransfType _t)\\n    internal pure returns (bytes memory) {\\n        if (_t == AnimTransfType.translate) return \\\"translate\\\";\\n        if (_t == AnimTransfType.scale)     return \\\"scale\\\";\\n        if (_t == AnimTransfType.rotate)    return \\\"rotate\\\";\\n        if (_t == AnimTransfType.skewX)     return \\\"skewX\\\";\\n        if (_t == AnimTransfType.skewY)     return \\\"skewY\\\";\\n    }\\n\\n    // Returns a path\\n    // See github's repo oh how to encode data for path\\n    // A Q and T are not implemented yet\\n    // _b:\\n    //   [0] : General format applies\\n    //   [1:] : encoded data\\n    function path(\\n        bytes memory _b,\\n        bytes memory _customAttributes\\n    ) external pure returns (bytes memory) {\\n\\n        bytes memory pathdata; \\n        pathdata = '<path d=\\\"';\\n\\n        for (uint i = 1 ; i < _b.length ; i++) {\\n            if(uint8(_b[i]) == 77) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'M',\\n                    stringifyIntSet(_b, i+1, 2)\\n                );\\n                i += 2;\\n            } else if (uint8(_b[i]) == 109) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'm',\\n                    stringifyIntSet(_b, i+1, 2)\\n                );\\n                i += 2;\\n            } else if (uint8(_b[i]) == 76) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'L',\\n                    stringifyIntSet(_b, i+1, 2)\\n                );\\n                i += 2;\\n            } else if (uint8(_b[i]) == 108) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'l',\\n                    stringifyIntSet(_b, i+1, 2)\\n                );\\n                i += 2;\\n            } else if (uint8(_b[i]) == 67) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'C',\\n                    stringifyIntSet(_b, i+1, 6)\\n                );\\n                i += 6;\\n            } else if (uint8(_b[i]) == 86) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'V',\\n                    byte2uint8(_b, i+1).toString()\\n                );\\n                i++;\\n            } else if (uint8(_b[i]) == 118) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'v',\\n                    byte2uint8(_b, i+1).toString()\\n                );\\n                i++;\\n            } else if (uint8(_b[i]) == 72) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'H',\\n                    byte2uint8(_b, i+1).toString()\\n                );\\n                i++;\\n            } else if (uint8(_b[i]) == 104) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'h',\\n                    byte2uint8(_b, i+1).toString()\\n                );\\n                i++;\\n            } else if (uint8(_b[i]) == 83) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'S',\\n                    stringifyIntSet(_b, i+1, 4)\\n                );\\n                i += 4;\\n            } else if (uint8(_b[i]) == 115) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 's',\\n                    stringifyIntSet(_b, i+1, 4)\\n                );\\n                i += 4;\\n            } else if (uint8(_b[i]) == 65) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'A',\\n                    stringifyIntSet(_b, i+1, 7)\\n                );\\n                i += 7;\\n            } else if (uint8(_b[i]) == 97) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'a',\\n                    stringifyIntSet(_b, i+1, 7)\\n                );\\n                i += 4;\\n            } else if (uint8(_b[i]) == 90) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'Z'\\n                );\\n            } else if (uint8(_b[i]) == 122) {\\n                pathdata = abi.encodePacked(\\n                    pathdata, 'z'\\n                );\\n            } else {\\n                pathdata = abi.encodePacked(\\n                    pathdata, '**' , i.toString(), '-', \\n                    uint8(_b[i]).toString()\\n                    );\\n            }\\n        }\\n        return(\\n            abi.encodePacked(\\n                pathdata, '\\\" ',\\n                _customAttributes,\\n                endingtag(_b)\\n            )\\n        );\\n    }\\n// ------ tools -----------\\n\\n    // Returns the ending tag as defined in_b[3] (odd number)\\n    function endingtag(\\n        bytes memory _b\\n    ) pure public returns (string memory) {\\n        if (byte2uint8(_b,0) & 1 == 0) {\\n            return ' />';\\n        }\\n        return '>';\\n    }\\n\\n    // Returns 'n' stringified and spaced uint8\\n    function stringifyIntSet(\\n        bytes memory _data,\\n        uint256 _offset,\\n        uint256 _len\\n    ) public pure returns (bytes memory) { \\n        bytes memory res;\\n        require (_data.length >= _offset + _len, 'Out of range');\\n        for (uint i = _offset ; i < _offset + _len ; i++) {\\n            res = abi.encodePacked(\\n                res,\\n                byte2uint8(_data, i).toString(),\\n                ' '\\n            );\\n        }\\n        return res;\\n    }\\n\\n    // Used by animation*, receives an array whose the first elements indicates\\n    // the number of tuples, and the values data\\n    // returns the values separated by spaces,\\n    // tuples separated by semicolon\\n    function tuples2ValueMatrix(\\n        bytes memory _data\\n    ) public pure returns (bytes memory) { \\n        uint256 _len = byte2uint8(_data, 0);\\n        bytes memory res;\\n\\n        for (uint i = 1 ; i <= _data.length - 1 ; i += _len) {\\n            res = abi.encodePacked(\\n                res,\\n                stringifyIntSet(_data, i, _len),\\n                ';'\\n            );\\n        }\\n        return res;\\n\\n    }\\n\\n    // returns a repeatCount for the animations.\\n    // If uint8 == 0 then indefinite loop\\n    // else a count of loops.\\n    function repeatCount(uint8 _r)\\n    public pure returns (string memory) {\\n        if (_r == 0) {\\n            return 'indefinite';\\n        } else {\\n            return _r.toString();\\n        }\\n    }\\n\\n    // Returns one uint8 in a byte array\\n    function byte2uint8(\\n        bytes memory _data,\\n        uint256 _offset\\n    ) public pure returns (uint8) { \\n        require (_data.length > _offset, 'Out of range');\\n        return uint8(_data[_offset]);\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x94cae161b911c4bc4d173eb3e80b071bec4b3f92a059d3de1a1e9d22fc371d09\",\"license\":\"MIT\"},\"@pooly-cards/svg-lib-sol/contracts/libraries/SvgWidgets.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport './SvgCore.sol';\\nimport '../interfaces/ISvgTools.sol';\\ncontract SvgWidgets {\\n\\n    using Strings for uint256;\\n    ISvgTools   sTools ;\\n    // path defines an arc\\n    bytes constant gaugeArcPath = hex'004d0a324128280000016432';\\n    bytes constant gaugeHLine   =  hex'0009096409';\\n    bytes constant gaugeVLine   =  hex'0009640909';\\n    bytes constant gaugeStyleStr = 'pathLength=\\\"100\\\" ';\\n    // Compressed path data for SuperFluid logo (with prefix '00'):\\n    bytes constant logoSFPath  = hex'004d1f184c18184c18104c10104c10094c1f094c1f185a4d091f4c101f4c10184c09184c091f5a4d00044c0024430026022804284c2428432628282628244c2804432802260024004c0400430200000200044c00045a';\\n\\n    constructor(address _sTools){\\n        sTools   = ISvgTools(_sTools);\\n    }\\n\\n    /*  ---------------- Symbols ---------- */\\n\\n    // returns an arc gauge <symbol> shape\\n    // can be displayed with <use href='#`_id`' ...\\n    function includeSymbolGaugeArc(\\n        bytes memory _id\\n    ) external view returns (bytes memory) {\\n        return SvgCore.symbol(\\n            _id,    \\n            abi.encodePacked(\\n                SvgCore.path( // background\\n                    gaugeArcPath,\\n                    gaugeStyleBgCustom(_id)\\n                ),\\n                SvgCore.path( // gauge's display\\n                    gaugeArcPath,\\n                    gaugeStyleFgCustom(_id)\\n                ),\\n                SvgCore.style(_gaugeBgStyle(_id), '')\\n            ) \\n        );\\n    } \\n\\n    // returns a vertical bar gauge <symbol> shape\\n    // can be displayed with <use href='#`_id`' ...\\n    function includeSymbolGaugeV(\\n        bytes memory _id\\n    ) external view returns (bytes memory) {\\n\\n        return SvgCore.symbol(\\n            _id,    \\n            abi.encodePacked(\\n                SvgCore.line(\\n                    gaugeVLine,\\n                    gaugeStyleBgCustom(_id)\\n                ),\\n                SvgCore.line(\\n                    gaugeVLine,\\n                    gaugeStyleFgCustom(_id)\\n                ),\\n                SvgCore.style(_gaugeBgStyle(_id), '')\\n            )\\n        );\\n    } \\n    //  returns an eye symbol.\\n    function includeSymbolEye(\\n        bytes memory _id\\n    ) external view returns (bytes memory) {\\n        return SvgCore.symbol(\\n            _id,\\n            abi.encodePacked(\\n                SvgCore.ellipse(hex'0010100b0f', 'style=\\\"stroke:#a1830b;fill:#fff\\\"'),\\n                SvgCore.circle(hex'00101006', 'id=\\\"swpupil\\\" style=\\\"fill:#000\\\"')\\n            )\\n        );\\n    }\\n/* Example of use:\\n    <use href=\\\"#eye\\\" x=\\\"10\\\" y=\\\"10\\\" class=\\\"ee\\\"/>\\n    <use href=\\\"#eye\\\" x=\\\"40\\\" y=\\\"10\\\" class=\\\"ee\\\" />\\n    <animate href=\\\"#p1\\\" attributeName=\\\"cx\\\" values=\\\"16;8;6;9;16\\\" dur=\\\"2s\\\" repeatCount=\\\"1\\\"/>\\n    <symbol id=\\\"eye\\\">\\n                                                             \\n        <ellipse  cx=\\\"16\\\" cy=\\\"16\\\" rx=\\\"11\\\" ry=\\\"15\\\" style=\\\"stroke:#a1830b; fill:#fff\\\" />     \\n        <circle class=\\\"ckb\\\" id=\\\"p1\\\" cx=\\\"16\\\" cy=\\\"16\\\" r=\\\"6\\\">                      \\n        </circle>\\n*/\\n    // returns Superfluid logo as a <symbol>\\n    // can be displayed with <use href='#`_id`' ...\\n    function includeSymbolSFLogo(bytes memory _id)\\n    public view returns (bytes memory){\\n        return SvgCore.symbol(\\n            _id,\\n            SvgCore.path(\\n                logoSFPath,\\n                'fill-rule=\\\"evenodd\\\" fill=\\\"#12141E\\\"'\\n            )\\n        );\\n    }\\n\\n    /*  ---------------- Internal functions ---------- */\\n    // Returns a svgStyle for gauges background\\n    function _gaugeBgStyle(bytes memory _id) internal view returns (svgStyle memory) {\\n        return svgStyle(\\n            0,  // no option\\n            10, // stroke width 10\\n            abi.encodePacked('#', 'bg', _id), // id\\n            '', // no fill\\n            sTools.getColor('DarkGrey') // stroke color\\n        );\\n    }\\n\\n    // Returns textual style attributes for background \\n    function gaugeStyleBgCustom(bytes memory _id)\\n    internal pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            gaugeStyleStr,\\n            'stroke-dasharray=\\\"100, 100\\\" id=\\\"bg',\\n           _id,\\n            '\\\"' \\n        );\\n    }\\n\\n    // Returns textual style attributes for the foreground \\n    function gaugeStyleFgCustom(bytes memory _id)\\n    internal pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            gaugeStyleStr,\\n            'id=\\\"fg',\\n           _id,\\n            '\\\"' \\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x18094955a96df55e71b59f78005a69cb25c5a9666f78f286b1a1c3a7b9fa284c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610dcd380380610dcd83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610d3a806100936000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806316eaaaf7146100515780631c76f9bd1461007a578063b2d8285e1461008d578063bf0b03df146100a0575b600080fd5b61006461005f3660046108ce565b6100b3565b60405161007191906109aa565b60405180910390f35b6100646100883660046108ce565b6102e6565b61006461009b3660046108ce565b6103b4565b6100646100ae3660046108ce565b6105b9565b606073Dc64a140Aa3E981100a9becA4E685f962f0cF6C963676d279d8373Dc64a140Aa3E981100a9becA4E685f962f0cF6C963f42de34d6040518163ffffffff1660e01b81526004016101529060408082526005908201526310100b0f60d81b606082015260806020808301829052908201527f7374796c653d227374726f6b653a236131383330623b66696c6c3a236666662260a082015260c00190565b600060405180830381865af415801561016f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261019791908101906109c4565b60405163ae7e728160e01b815273Dc64a140Aa3E981100a9becA4E685f962f0cF6C99063ae7e7281906102199060040160408082526004908201526208080360e11b6060820152608060208201819052601e908201527f69643d227377707570696c22207374796c653d2266696c6c3a2330303022000060a082015260c00190565b600060405180830381865af4158015610236573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261025e91908101906109c4565b60405160200161026f929190610a3b565b6040516020818303038152906040526040518363ffffffff1660e01b815260040161029b929190610a6a565b600060405180830381865af41580156102b8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102e091908101906109c4565b92915050565b606073Dc64a140Aa3E981100a9becA4E685f962f0cF6C963676d279d8373Dc64a140Aa3E981100a9becA4E685f962f0cF6C963aa278942604051806080016040528060568152602001610caf605691396040518263ffffffff1660e01b81526004016103529190610a8f565b600060405180830381865af415801561036f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261039791908101906109c4565b6040518363ffffffff1660e01b815260040161029b929190610a6a565b606073Dc64a140Aa3E981100a9becA4E685f962f0cF6C963676d279d8373Dc64a140Aa3E981100a9becA4E685f962f0cF6C963aa2789426040518060400160405280600c81526020016a268519209414000000b21960a11b815250610418886106b8565b6040518363ffffffff1660e01b8152600401610435929190610a6a565b600060405180830381865af4158015610452573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261047a91908101906109c4565b73Dc64a140Aa3E981100a9becA4E685f962f0cF6C963aa2789426040518060400160405280600c81526020016a268519209414000000b21960a11b8152506104c18961070c565b6040518363ffffffff1660e01b81526004016104de929190610a6a565b600060405180830381865af41580156104fb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261052391908101906109c4565b73Dc64a140Aa3E981100a9becA4E685f962f0cF6C963b108b88e6105468961074a565b6040518263ffffffff1660e01b81526004016105629190610aeb565b600060405180830381865af415801561057f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105a791908101906109c4565b60405160200161026f93929190610b76565b606073Dc64a140Aa3E981100a9becA4E685f962f0cF6C963676d279d8373Dc64a140Aa3E981100a9becA4E685f962f0cF6C9634793897b604051806040016040528060058152602001630964090960d81b815250610616886106b8565b6040518363ffffffff1660e01b8152600401610633929190610a6a565b600060405180830381865af4158015610650573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261067891908101906109c4565b73Dc64a140Aa3E981100a9becA4E685f962f0cF6C9634793897b604051806040016040528060058152602001630964090960d81b8152506104c18961070c565b60606040518060400160405280601181526020017003830ba342632b733ba341e91189818111607d1b815250826040516020016106f6929190610bb9565b6040516020818303038152906040529050919050565b60606040518060400160405280601181526020017003830ba342632b733ba341e91189818111607d1b815250826040516020016106f6929190610c2b565b6040805160a08101825260008082526020820152606091810182905281810182905260808101919091526040518060a00160405280600060ff168152602001600a60ff168152602001836040516020016107a49190610c7a565b60408051808303601f1901815291815290825280516020808201835260008083528185019290925290548251630b01875760e41b8152600481019290925260086024830152674461726b4772657960c01b604483015292909101916001600160a01b03169063b018757090606401600060405180830381865afa15801561082f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261085791908101906109c4565b905292915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561089e5761089e61085f565b604052919050565b600067ffffffffffffffff8211156108c0576108c061085f565b50601f01601f191660200190565b6000602082840312156108e057600080fd5b813567ffffffffffffffff8111156108f757600080fd5b8201601f8101841361090857600080fd5b803561091b610916826108a6565b610875565b81815285602083850101111561093057600080fd5b81602084016020830137600091810160200191909152949350505050565b60005b83811015610969578181015183820152602001610951565b83811115610978576000848401525b50505050565b6000815180845261099681602086016020860161094e565b601f01601f19169290920160200192915050565b6020815260006109bd602083018461097e565b9392505050565b6000602082840312156109d657600080fd5b815167ffffffffffffffff8111156109ed57600080fd5b8201601f810184136109fe57600080fd5b8051610a0c610916826108a6565b818152856020838501011115610a2157600080fd5b610a3282602083016020860161094e565b95945050505050565b60008351610a4d81846020880161094e565b835190830190610a6181836020880161094e565b01949350505050565b604081526000610a7d604083018561097e565b8281036020840152610a32818561097e565b604081526000610aa2604083018461097e565b828103602093840152602281527f66696c6c2d72756c653d226576656e6f6464222066696c6c3d22233132313431928101929092525061229160f11b6040820152606001919050565b6040815260ff825116604082015260ff60208301511660608201526000604083015160a06080840152610b2160e084018261097e565b90506060840151603f19808584030160a0860152610b3f838361097e565b925060808601519150808584030160c086015250610b5d828261097e565b8481036020958601526000815293909301949350505050565b60008451610b8881846020890161094e565b845190830190610b9c81836020890161094e565b8451910190610baf81836020880161094e565b0195945050505050565b60008351610bcb81846020880161094e565b80830190507f7374726f6b652d6461736861727261793d223130302c20313030222069643d22815261626760f01b60208201528351610c1181602284016020880161094e565b601160f91b60229290910191820152602301949350505050565b60008351610c3d81846020880161094e565b6569643d22666760d01b9083019081528351610c6081600684016020880161094e565b601160f91b60069290910191820152600701949350505050565b602360f81b815261626760f01b600182015260008251610ca181600385016020870161094e565b919091016003019291505056fe004d1f184c18184c18104c10104c10094c1f094c1f185a4d091f4c101f4c10184c09184c091f5a4d00044c0024430026022804284c2428432628282628244c2804432802260024004c0400430200000200044c00045aa2646970667358221220d918535eef88f8b0ecaae11491f7c5f9b153d590f94c9c9f261cb01bfaf5b5a864736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806316eaaaf7146100515780631c76f9bd1461007a578063b2d8285e1461008d578063bf0b03df146100a0575b600080fd5b61006461005f3660046108ce565b6100b3565b60405161007191906109aa565b60405180910390f35b6100646100883660046108ce565b6102e6565b61006461009b3660046108ce565b6103b4565b6100646100ae3660046108ce565b6105b9565b606073__$72447f1b2f145aca09ac0141c77e8da5f9$__63676d279d8373__$72447f1b2f145aca09ac0141c77e8da5f9$__63f42de34d6040518163ffffffff1660e01b81526004016101529060408082526005908201526310100b0f60d81b606082015260806020808301829052908201527f7374796c653d227374726f6b653a236131383330623b66696c6c3a236666662260a082015260c00190565b600060405180830381865af415801561016f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261019791908101906109c4565b60405163ae7e728160e01b815273__$72447f1b2f145aca09ac0141c77e8da5f9$__9063ae7e7281906102199060040160408082526004908201526208080360e11b6060820152608060208201819052601e908201527f69643d227377707570696c22207374796c653d2266696c6c3a2330303022000060a082015260c00190565b600060405180830381865af4158015610236573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261025e91908101906109c4565b60405160200161026f929190610a3b565b6040516020818303038152906040526040518363ffffffff1660e01b815260040161029b929190610a6a565b600060405180830381865af41580156102b8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102e091908101906109c4565b92915050565b606073__$72447f1b2f145aca09ac0141c77e8da5f9$__63676d279d8373__$72447f1b2f145aca09ac0141c77e8da5f9$__63aa278942604051806080016040528060568152602001610caf605691396040518263ffffffff1660e01b81526004016103529190610a8f565b600060405180830381865af415801561036f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261039791908101906109c4565b6040518363ffffffff1660e01b815260040161029b929190610a6a565b606073__$72447f1b2f145aca09ac0141c77e8da5f9$__63676d279d8373__$72447f1b2f145aca09ac0141c77e8da5f9$__63aa2789426040518060400160405280600c81526020016a268519209414000000b21960a11b815250610418886106b8565b6040518363ffffffff1660e01b8152600401610435929190610a6a565b600060405180830381865af4158015610452573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261047a91908101906109c4565b73__$72447f1b2f145aca09ac0141c77e8da5f9$__63aa2789426040518060400160405280600c81526020016a268519209414000000b21960a11b8152506104c18961070c565b6040518363ffffffff1660e01b81526004016104de929190610a6a565b600060405180830381865af41580156104fb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261052391908101906109c4565b73__$72447f1b2f145aca09ac0141c77e8da5f9$__63b108b88e6105468961074a565b6040518263ffffffff1660e01b81526004016105629190610aeb565b600060405180830381865af415801561057f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105a791908101906109c4565b60405160200161026f93929190610b76565b606073__$72447f1b2f145aca09ac0141c77e8da5f9$__63676d279d8373__$72447f1b2f145aca09ac0141c77e8da5f9$__634793897b604051806040016040528060058152602001630964090960d81b815250610616886106b8565b6040518363ffffffff1660e01b8152600401610633929190610a6a565b600060405180830381865af4158015610650573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261067891908101906109c4565b73__$72447f1b2f145aca09ac0141c77e8da5f9$__634793897b604051806040016040528060058152602001630964090960d81b8152506104c18961070c565b60606040518060400160405280601181526020017003830ba342632b733ba341e91189818111607d1b815250826040516020016106f6929190610bb9565b6040516020818303038152906040529050919050565b60606040518060400160405280601181526020017003830ba342632b733ba341e91189818111607d1b815250826040516020016106f6929190610c2b565b6040805160a08101825260008082526020820152606091810182905281810182905260808101919091526040518060a00160405280600060ff168152602001600a60ff168152602001836040516020016107a49190610c7a565b60408051808303601f1901815291815290825280516020808201835260008083528185019290925290548251630b01875760e41b8152600481019290925260086024830152674461726b4772657960c01b604483015292909101916001600160a01b03169063b018757090606401600060405180830381865afa15801561082f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261085791908101906109c4565b905292915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561089e5761089e61085f565b604052919050565b600067ffffffffffffffff8211156108c0576108c061085f565b50601f01601f191660200190565b6000602082840312156108e057600080fd5b813567ffffffffffffffff8111156108f757600080fd5b8201601f8101841361090857600080fd5b803561091b610916826108a6565b610875565b81815285602083850101111561093057600080fd5b81602084016020830137600091810160200191909152949350505050565b60005b83811015610969578181015183820152602001610951565b83811115610978576000848401525b50505050565b6000815180845261099681602086016020860161094e565b601f01601f19169290920160200192915050565b6020815260006109bd602083018461097e565b9392505050565b6000602082840312156109d657600080fd5b815167ffffffffffffffff8111156109ed57600080fd5b8201601f810184136109fe57600080fd5b8051610a0c610916826108a6565b818152856020838501011115610a2157600080fd5b610a3282602083016020860161094e565b95945050505050565b60008351610a4d81846020880161094e565b835190830190610a6181836020880161094e565b01949350505050565b604081526000610a7d604083018561097e565b8281036020840152610a32818561097e565b604081526000610aa2604083018461097e565b828103602093840152602281527f66696c6c2d72756c653d226576656e6f6464222066696c6c3d22233132313431928101929092525061229160f11b6040820152606001919050565b6040815260ff825116604082015260ff60208301511660608201526000604083015160a06080840152610b2160e084018261097e565b90506060840151603f19808584030160a0860152610b3f838361097e565b925060808601519150808584030160c086015250610b5d828261097e565b8481036020958601526000815293909301949350505050565b60008451610b8881846020890161094e565b845190830190610b9c81836020890161094e565b8451910190610baf81836020880161094e565b0195945050505050565b60008351610bcb81846020880161094e565b80830190507f7374726f6b652d6461736861727261793d223130302c20313030222069643d22815261626760f01b60208201528351610c1181602284016020880161094e565b601160f91b60229290910191820152602301949350505050565b60008351610c3d81846020880161094e565b6569643d22666760d01b9083019081528351610c6081600684016020880161094e565b601160f91b60069290910191820152600701949350505050565b602360f81b815261626760f01b600182015260008251610ca181600385016020870161094e565b919091016003019291505056fe004d1f184c18184c18104c10104c10094c1f094c1f185a4d091f4c101f4c10184c09184c091f5a4d00044c0024430026022804284c2428432628282628244c2804432802260024004c0400430200000200044c00045aa2646970667358221220d918535eef88f8b0ecaae11491f7c5f9b153d590f94c9c9f261cb01bfaf5b5a864736f6c634300080d0033",
  "libraries": {
    "SvgCore": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6874,
        "contract": "@pooly-cards/svg-lib-sol/contracts/libraries/SvgWidgets.sol:SvgWidgets",
        "label": "sTools",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ISvgTools)4716"
      }
    ],
    "types": {
      "t_contract(ISvgTools)4716": {
        "encoding": "inplace",
        "label": "contract ISvgTools",
        "numberOfBytes": "20"
      }
    }
  }
}